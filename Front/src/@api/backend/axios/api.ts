/* tslint:disable */
/* eslint-disable */
/**
 * Svan application
 * Pim API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Aecoc
 */
export interface Aecoc {
    /**
     * 
     * @type {string}
     * @memberof Aecoc
     */
    'texto': string;
    /**
     * 
     * @type {string}
     * @memberof Aecoc
     */
    'imagenes': string;
    /**
     * 
     * @type {string}
     * @memberof Aecoc
     */
    'gln': string;
}
/**
 * 
 * @export
 * @interface Atributos
 */
export interface Atributos {
    /**
     * 
     * @type {number}
     * @memberof Atributos
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Atributos
     */
    'grupoAtributosId'?: number;
    /**
     * 
     * @type {number}
     * @memberof Atributos
     */
    'codigo'?: number;
    /**
     * 
     * @type {string}
     * @memberof Atributos
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof Atributos
     */
    'unidadSN'?: string;
    /**
     * 
     * @type {string}
     * @memberof Atributos
     */
    'unidad'?: string;
    /**
     * 
     * @type {string}
     * @memberof Atributos
     */
    'unidadAecoc'?: string;
    /**
     * 
     * @type {string}
     * @memberof Atributos
     */
    'tagUOM'?: string;
    /**
     * 
     * @type {string}
     * @memberof Atributos
     */
    'tipoCampo'?: string;
    /**
     * 
     * @type {string}
     * @memberof Atributos
     */
    'tagAecoc'?: string;
    /**
     * 
     * @type {string}
     * @memberof Atributos
     */
    'filtro'?: string;
    /**
     * 
     * @type {string}
     * @memberof Atributos
     */
    'posiblesValores'?: string;
    /**
     * 
     * @type {string}
     * @memberof Atributos
     */
    'posiblesValoresAecoc'?: string;
    /**
     * 
     * @type {string}
     * @memberof Atributos
     */
    'categorias'?: string;
}
/**
 * 
 * @export
 * @interface AtributosFilter
 */
export interface AtributosFilter {
    /**
     * 
     * @type {number}
     * @memberof AtributosFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof AtributosFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof AtributosFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof AtributosFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof AtributosFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface AtributosFilter1
 */
export interface AtributosFilter1 {
    /**
     * 
     * @type {number}
     * @memberof AtributosFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof AtributosFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof AtributosFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof AtributosFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof AtributosFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof AtributosFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<Atributos>, schemaOptions: { partial: true })
 * @export
 * @interface AtributosPartial
 */
export interface AtributosPartial {
    /**
     * 
     * @type {number}
     * @memberof AtributosPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof AtributosPartial
     */
    'grupoAtributosId'?: number;
    /**
     * 
     * @type {number}
     * @memberof AtributosPartial
     */
    'codigo'?: number;
    /**
     * 
     * @type {string}
     * @memberof AtributosPartial
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof AtributosPartial
     */
    'unidadSN'?: string;
    /**
     * 
     * @type {string}
     * @memberof AtributosPartial
     */
    'unidad'?: string;
    /**
     * 
     * @type {string}
     * @memberof AtributosPartial
     */
    'unidadAecoc'?: string;
    /**
     * 
     * @type {string}
     * @memberof AtributosPartial
     */
    'tagUOM'?: string;
    /**
     * 
     * @type {string}
     * @memberof AtributosPartial
     */
    'tipoCampo'?: string;
    /**
     * 
     * @type {string}
     * @memberof AtributosPartial
     */
    'tagAecoc'?: string;
    /**
     * 
     * @type {string}
     * @memberof AtributosPartial
     */
    'filtro'?: string;
    /**
     * 
     * @type {string}
     * @memberof AtributosPartial
     */
    'posiblesValores'?: string;
    /**
     * 
     * @type {string}
     * @memberof AtributosPartial
     */
    'posiblesValoresAecoc'?: string;
    /**
     * 
     * @type {string}
     * @memberof AtributosPartial
     */
    'categorias'?: string;
}
/**
 * (tsType: AtributosWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface AtributosWithRelations
 */
export interface AtributosWithRelations {
    /**
     * 
     * @type {number}
     * @memberof AtributosWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof AtributosWithRelations
     */
    'grupoAtributosId'?: number;
    /**
     * 
     * @type {number}
     * @memberof AtributosWithRelations
     */
    'codigo'?: number;
    /**
     * 
     * @type {string}
     * @memberof AtributosWithRelations
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof AtributosWithRelations
     */
    'unidadSN'?: string;
    /**
     * 
     * @type {string}
     * @memberof AtributosWithRelations
     */
    'unidad'?: string;
    /**
     * 
     * @type {string}
     * @memberof AtributosWithRelations
     */
    'unidadAecoc'?: string;
    /**
     * 
     * @type {string}
     * @memberof AtributosWithRelations
     */
    'tagUOM'?: string;
    /**
     * 
     * @type {string}
     * @memberof AtributosWithRelations
     */
    'tipoCampo'?: string;
    /**
     * 
     * @type {string}
     * @memberof AtributosWithRelations
     */
    'tagAecoc'?: string;
    /**
     * 
     * @type {string}
     * @memberof AtributosWithRelations
     */
    'filtro'?: string;
    /**
     * 
     * @type {string}
     * @memberof AtributosWithRelations
     */
    'posiblesValores'?: string;
    /**
     * 
     * @type {string}
     * @memberof AtributosWithRelations
     */
    'posiblesValoresAecoc'?: string;
    /**
     * 
     * @type {string}
     * @memberof AtributosWithRelations
     */
    'categorias'?: string;
}
/**
 * 
 * @export
 * @interface Categorias
 */
export interface Categorias {
    /**
     * 
     * @type {number}
     * @memberof Categorias
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Categorias
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof Categorias
     */
    'tagAecoc'?: string;
    /**
     * 
     * @type {string}
     * @memberof Categorias
     */
    'codigo'?: string;
    /**
     * 
     * @type {string}
     * @memberof Categorias
     */
    'codigoAECOC'?: string;
    /**
     * 
     * @type {string}
     * @memberof Categorias
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof Categorias
     */
    'padre'?: string;
}
/**
 * 
 * @export
 * @interface CategoriasFilter
 */
export interface CategoriasFilter {
    /**
     * 
     * @type {number}
     * @memberof CategoriasFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof CategoriasFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof CategoriasFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof CategoriasFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof CategoriasFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface CategoriasFilter1
 */
export interface CategoriasFilter1 {
    /**
     * 
     * @type {number}
     * @memberof CategoriasFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof CategoriasFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof CategoriasFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof CategoriasFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof CategoriasFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof CategoriasFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<Categorias>, schemaOptions: { partial: true })
 * @export
 * @interface CategoriasPartial
 */
export interface CategoriasPartial {
    /**
     * 
     * @type {number}
     * @memberof CategoriasPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof CategoriasPartial
     */
    'empresaId'?: number;
    /**
     * 
     * @type {string}
     * @memberof CategoriasPartial
     */
    'tagAecoc'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoriasPartial
     */
    'codigo'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoriasPartial
     */
    'codigoAECOC'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoriasPartial
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoriasPartial
     */
    'padre'?: string;
}
/**
 * (tsType: CategoriasWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface CategoriasWithRelations
 */
export interface CategoriasWithRelations {
    /**
     * 
     * @type {number}
     * @memberof CategoriasWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof CategoriasWithRelations
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof CategoriasWithRelations
     */
    'tagAecoc'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoriasWithRelations
     */
    'codigo'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoriasWithRelations
     */
    'codigoAECOC'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoriasWithRelations
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoriasWithRelations
     */
    'padre'?: string;
}
/**
 * 
 * @export
 * @interface Empresas
 */
export interface Empresas {
    /**
     * 
     * @type {number}
     * @memberof Empresas
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Empresas
     */
    'codigo'?: string;
    /**
     * 
     * @type {string}
     * @memberof Empresas
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof Empresas
     */
    'GLN'?: string;
    /**
     * 
     * @type {string}
     * @memberof Empresas
     */
    'descripcion'?: string;
}
/**
 * 
 * @export
 * @interface EmpresasFilter
 */
export interface EmpresasFilter {
    /**
     * 
     * @type {number}
     * @memberof EmpresasFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof EmpresasFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof EmpresasFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof EmpresasFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof EmpresasFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface EmpresasFilter1
 */
export interface EmpresasFilter1 {
    /**
     * 
     * @type {number}
     * @memberof EmpresasFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof EmpresasFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof EmpresasFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof EmpresasFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof EmpresasFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof EmpresasFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<Empresas>, schemaOptions: { partial: true })
 * @export
 * @interface EmpresasPartial
 */
export interface EmpresasPartial {
    /**
     * 
     * @type {number}
     * @memberof EmpresasPartial
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof EmpresasPartial
     */
    'codigo'?: string;
    /**
     * 
     * @type {string}
     * @memberof EmpresasPartial
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof EmpresasPartial
     */
    'GLN'?: string;
    /**
     * 
     * @type {string}
     * @memberof EmpresasPartial
     */
    'descripcion'?: string;
}
/**
 * (tsType: EmpresasWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface EmpresasWithRelations
 */
export interface EmpresasWithRelations {
    /**
     * 
     * @type {number}
     * @memberof EmpresasWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof EmpresasWithRelations
     */
    'codigo'?: string;
    /**
     * 
     * @type {string}
     * @memberof EmpresasWithRelations
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof EmpresasWithRelations
     */
    'GLN'?: string;
    /**
     * 
     * @type {string}
     * @memberof EmpresasWithRelations
     */
    'descripcion'?: string;
}
/**
 * 
 * @export
 * @interface Files
 */
export interface Files {
    /**
     * 
     * @type {number}
     * @memberof Files
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Files
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Files
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof Files
     */
    'extension'?: string;
    /**
     * 
     * @type {number}
     * @memberof Files
     */
    'size'?: number;
    /**
     * 
     * @type {string}
     * @memberof Files
     */
    'src'?: string;
    /**
     * 
     * @type {string}
     * @memberof Files
     */
    'hash'?: string;
    /**
     * 
     * @type {string}
     * @memberof Files
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Files
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Files
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof Files
     */
    'alt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Files
     */
    'modifiedAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof Files
     */
    'userCreator'?: number;
    /**
     * 
     * @type {number}
     * @memberof Files
     */
    'userModifier'?: number;
    /**
     * 
     * @type {string}
     * @memberof Files
     */
    'deletedAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof Files
     */
    'userDeleted'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Files
     */
    'deleted'?: boolean;
}
/**
 * 
 * @export
 * @interface FilesFilter
 */
export interface FilesFilter {
    /**
     * 
     * @type {number}
     * @memberof FilesFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof FilesFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof FilesFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof FilesFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof FilesFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface FilesFilter1
 */
export interface FilesFilter1 {
    /**
     * 
     * @type {number}
     * @memberof FilesFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof FilesFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof FilesFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof FilesFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof FilesFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof FilesFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<Files>, schemaOptions: { partial: true })
 * @export
 * @interface FilesPartial
 */
export interface FilesPartial {
    /**
     * 
     * @type {number}
     * @memberof FilesPartial
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof FilesPartial
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof FilesPartial
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof FilesPartial
     */
    'extension'?: string;
    /**
     * 
     * @type {number}
     * @memberof FilesPartial
     */
    'size'?: number;
    /**
     * 
     * @type {string}
     * @memberof FilesPartial
     */
    'src'?: string;
    /**
     * 
     * @type {string}
     * @memberof FilesPartial
     */
    'hash'?: string;
    /**
     * 
     * @type {string}
     * @memberof FilesPartial
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof FilesPartial
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof FilesPartial
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof FilesPartial
     */
    'alt'?: string;
    /**
     * 
     * @type {string}
     * @memberof FilesPartial
     */
    'modifiedAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof FilesPartial
     */
    'userCreator'?: number;
    /**
     * 
     * @type {number}
     * @memberof FilesPartial
     */
    'userModifier'?: number;
    /**
     * 
     * @type {string}
     * @memberof FilesPartial
     */
    'deletedAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof FilesPartial
     */
    'userDeleted'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof FilesPartial
     */
    'deleted'?: boolean;
}
/**
 * (tsType: FilesWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface FilesWithRelations
 */
export interface FilesWithRelations {
    /**
     * 
     * @type {number}
     * @memberof FilesWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof FilesWithRelations
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof FilesWithRelations
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof FilesWithRelations
     */
    'extension'?: string;
    /**
     * 
     * @type {number}
     * @memberof FilesWithRelations
     */
    'size'?: number;
    /**
     * 
     * @type {string}
     * @memberof FilesWithRelations
     */
    'src'?: string;
    /**
     * 
     * @type {string}
     * @memberof FilesWithRelations
     */
    'hash'?: string;
    /**
     * 
     * @type {string}
     * @memberof FilesWithRelations
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof FilesWithRelations
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof FilesWithRelations
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof FilesWithRelations
     */
    'alt'?: string;
    /**
     * 
     * @type {string}
     * @memberof FilesWithRelations
     */
    'modifiedAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof FilesWithRelations
     */
    'userCreator'?: number;
    /**
     * 
     * @type {number}
     * @memberof FilesWithRelations
     */
    'userModifier'?: number;
    /**
     * 
     * @type {string}
     * @memberof FilesWithRelations
     */
    'deletedAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof FilesWithRelations
     */
    'userDeleted'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof FilesWithRelations
     */
    'deleted'?: boolean;
}
/**
 * 
 * @export
 * @interface GruposAtributos
 */
export interface GruposAtributos {
    /**
     * 
     * @type {number}
     * @memberof GruposAtributos
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof GruposAtributos
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof GruposAtributos
     */
    'codigo'?: string;
    /**
     * 
     * @type {string}
     * @memberof GruposAtributos
     */
    'nombre'?: string;
}
/**
 * 
 * @export
 * @interface GruposAtributosFilter
 */
export interface GruposAtributosFilter {
    /**
     * 
     * @type {number}
     * @memberof GruposAtributosFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof GruposAtributosFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof GruposAtributosFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof GruposAtributosFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof GruposAtributosFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface GruposAtributosFilter1
 */
export interface GruposAtributosFilter1 {
    /**
     * 
     * @type {number}
     * @memberof GruposAtributosFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof GruposAtributosFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof GruposAtributosFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof GruposAtributosFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof GruposAtributosFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof GruposAtributosFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<GruposAtributos>, schemaOptions: { partial: true })
 * @export
 * @interface GruposAtributosPartial
 */
export interface GruposAtributosPartial {
    /**
     * 
     * @type {number}
     * @memberof GruposAtributosPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof GruposAtributosPartial
     */
    'empresaId'?: number;
    /**
     * 
     * @type {string}
     * @memberof GruposAtributosPartial
     */
    'codigo'?: string;
    /**
     * 
     * @type {string}
     * @memberof GruposAtributosPartial
     */
    'nombre'?: string;
}
/**
 * (tsType: GruposAtributosWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface GruposAtributosWithRelations
 */
export interface GruposAtributosWithRelations {
    /**
     * 
     * @type {number}
     * @memberof GruposAtributosWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof GruposAtributosWithRelations
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof GruposAtributosWithRelations
     */
    'codigo'?: string;
    /**
     * 
     * @type {string}
     * @memberof GruposAtributosWithRelations
     */
    'nombre'?: string;
}
/**
 * 
 * @export
 * @interface Idiomas
 */
export interface Idiomas {
    /**
     * 
     * @type {number}
     * @memberof Idiomas
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Idiomas
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof Idiomas
     */
    'descripcion'?: string;
    /**
     * 
     * @type {string}
     * @memberof Idiomas
     */
    'activoSn'?: string;
    /**
     * 
     * @type {string}
     * @memberof Idiomas
     */
    'locale'?: string;
}
/**
 * 
 * @export
 * @interface IdiomasFilter
 */
export interface IdiomasFilter {
    /**
     * 
     * @type {number}
     * @memberof IdiomasFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof IdiomasFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof IdiomasFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof IdiomasFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof IdiomasFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface IdiomasFilter1
 */
export interface IdiomasFilter1 {
    /**
     * 
     * @type {number}
     * @memberof IdiomasFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof IdiomasFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof IdiomasFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof IdiomasFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof IdiomasFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof IdiomasFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<Idiomas>, schemaOptions: { partial: true })
 * @export
 * @interface IdiomasPartial
 */
export interface IdiomasPartial {
    /**
     * 
     * @type {number}
     * @memberof IdiomasPartial
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof IdiomasPartial
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiomasPartial
     */
    'descripcion'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiomasPartial
     */
    'activoSn'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiomasPartial
     */
    'locale'?: string;
}
/**
 * (tsType: IdiomasWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface IdiomasWithRelations
 */
export interface IdiomasWithRelations {
    /**
     * 
     * @type {number}
     * @memberof IdiomasWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof IdiomasWithRelations
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiomasWithRelations
     */
    'descripcion'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiomasWithRelations
     */
    'activoSn'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdiomasWithRelations
     */
    'locale'?: string;
}
/**
 * 
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     * 
     * @type {string}
     * @memberof InlineObject
     */
    'mail': string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface InlineObject1
 */
export interface InlineObject1 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject1
     */
    'refreshToken': string;
}
/**
 * 
 * @export
 * @interface InlineObject4
 */
export interface InlineObject4 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject4
     */
    'mail': string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject4
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    'token'?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     * 
     * @type {object}
     * @memberof InlineResponse2001
     */
    'accessToken'?: object;
}
/**
 * 
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2002
     */
    'accessToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2002
     */
    'refreshToken'?: string;
}
/**
 * 
 * @export
 * @interface InsertItem
 */
export interface InsertItem {
    /**
     * 
     * @type {Array<object>}
     * @memberof InsertItem
     */
    'items'?: Array<object>;
}
/**
 * 
 * @export
 * @interface LoopbackCount
 */
export interface LoopbackCount {
    /**
     * 
     * @type {number}
     * @memberof LoopbackCount
     */
    'count'?: number;
}
/**
 * 
 * @export
 * @interface Marca
 */
export interface Marca {
    /**
     * 
     * @type {number}
     * @memberof Marca
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Marca
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof Marca
     */
    'codigo'?: string;
    /**
     * 
     * @type {string}
     * @memberof Marca
     */
    'color'?: string;
    /**
     * 
     * @type {string}
     * @memberof Marca
     */
    'web'?: string;
    /**
     * 
     * @type {string}
     * @memberof Marca
     */
    'logo'?: string;
}
/**
 * 
 * @export
 * @interface MarcaFilter
 */
export interface MarcaFilter {
    /**
     * 
     * @type {number}
     * @memberof MarcaFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof MarcaFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof MarcaFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof MarcaFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof MarcaFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface MarcaFilter1
 */
export interface MarcaFilter1 {
    /**
     * 
     * @type {number}
     * @memberof MarcaFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof MarcaFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof MarcaFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof MarcaFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof MarcaFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof MarcaFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<Marca>, schemaOptions: { partial: true })
 * @export
 * @interface MarcaPartial
 */
export interface MarcaPartial {
    /**
     * 
     * @type {number}
     * @memberof MarcaPartial
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof MarcaPartial
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof MarcaPartial
     */
    'codigo'?: string;
    /**
     * 
     * @type {string}
     * @memberof MarcaPartial
     */
    'color'?: string;
    /**
     * 
     * @type {string}
     * @memberof MarcaPartial
     */
    'web'?: string;
    /**
     * 
     * @type {string}
     * @memberof MarcaPartial
     */
    'logo'?: string;
}
/**
 * (tsType: MarcaWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface MarcaWithRelations
 */
export interface MarcaWithRelations {
    /**
     * 
     * @type {number}
     * @memberof MarcaWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof MarcaWithRelations
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof MarcaWithRelations
     */
    'codigo'?: string;
    /**
     * 
     * @type {string}
     * @memberof MarcaWithRelations
     */
    'color'?: string;
    /**
     * 
     * @type {string}
     * @memberof MarcaWithRelations
     */
    'web'?: string;
    /**
     * 
     * @type {string}
     * @memberof MarcaWithRelations
     */
    'logo'?: string;
}
/**
 * 
 * @export
 * @interface Mercados
 */
export interface Mercados {
    /**
     * 
     * @type {number}
     * @memberof Mercados
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Mercados
     */
    'codigo': number;
    /**
     * 
     * @type {string}
     * @memberof Mercados
     */
    'nombre'?: string;
}
/**
 * 
 * @export
 * @interface MercadosFilter
 */
export interface MercadosFilter {
    /**
     * 
     * @type {number}
     * @memberof MercadosFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof MercadosFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof MercadosFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof MercadosFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof MercadosFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface MercadosFilter1
 */
export interface MercadosFilter1 {
    /**
     * 
     * @type {number}
     * @memberof MercadosFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof MercadosFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof MercadosFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof MercadosFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof MercadosFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof MercadosFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<Mercados>, schemaOptions: { partial: true })
 * @export
 * @interface MercadosPartial
 */
export interface MercadosPartial {
    /**
     * 
     * @type {number}
     * @memberof MercadosPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof MercadosPartial
     */
    'codigo'?: number;
    /**
     * 
     * @type {string}
     * @memberof MercadosPartial
     */
    'nombre'?: string;
}
/**
 * (tsType: MercadosWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface MercadosWithRelations
 */
export interface MercadosWithRelations {
    /**
     * 
     * @type {number}
     * @memberof MercadosWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof MercadosWithRelations
     */
    'codigo': number;
    /**
     * 
     * @type {string}
     * @memberof MercadosWithRelations
     */
    'nombre'?: string;
}
/**
 * 
 * @export
 * @interface Multimedia
 */
export interface Multimedia {
    /**
     * 
     * @type {number}
     * @memberof Multimedia
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Multimedia
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof Multimedia
     */
    'clave'?: string;
    /**
     * 
     * @type {string}
     * @memberof Multimedia
     */
    'tipo'?: string;
    /**
     * 
     * @type {string}
     * @memberof Multimedia
     */
    'categoria': string;
    /**
     * 
     * @type {string}
     * @memberof Multimedia
     */
    'defectosn'?: string;
}
/**
 * 
 * @export
 * @interface MultimediaFilter
 */
export interface MultimediaFilter {
    /**
     * 
     * @type {number}
     * @memberof MultimediaFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof MultimediaFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof MultimediaFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof MultimediaFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof MultimediaFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface MultimediaFilter1
 */
export interface MultimediaFilter1 {
    /**
     * 
     * @type {number}
     * @memberof MultimediaFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof MultimediaFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof MultimediaFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof MultimediaFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof MultimediaFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof MultimediaFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<Multimedia>, schemaOptions: { partial: true })
 * @export
 * @interface MultimediaPartial
 */
export interface MultimediaPartial {
    /**
     * 
     * @type {number}
     * @memberof MultimediaPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof MultimediaPartial
     */
    'empresaId'?: number;
    /**
     * 
     * @type {string}
     * @memberof MultimediaPartial
     */
    'clave'?: string;
    /**
     * 
     * @type {string}
     * @memberof MultimediaPartial
     */
    'tipo'?: string;
    /**
     * 
     * @type {string}
     * @memberof MultimediaPartial
     */
    'categoria'?: string;
    /**
     * 
     * @type {string}
     * @memberof MultimediaPartial
     */
    'defectosn'?: string;
}
/**
 * (tsType: MultimediaWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface MultimediaWithRelations
 */
export interface MultimediaWithRelations {
    /**
     * 
     * @type {number}
     * @memberof MultimediaWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof MultimediaWithRelations
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof MultimediaWithRelations
     */
    'clave'?: string;
    /**
     * 
     * @type {string}
     * @memberof MultimediaWithRelations
     */
    'tipo'?: string;
    /**
     * 
     * @type {string}
     * @memberof MultimediaWithRelations
     */
    'categoria': string;
    /**
     * 
     * @type {string}
     * @memberof MultimediaWithRelations
     */
    'defectosn'?: string;
}
/**
 * (tsType: Omit<Atributos, \'id\'>, schemaOptions: { title: \'NewAtributos\', exclude: [ \'id\' ] })
 * @export
 * @interface NewAtributos
 */
export interface NewAtributos {
    /**
     * 
     * @type {number}
     * @memberof NewAtributos
     */
    'grupoAtributosId'?: number;
    /**
     * 
     * @type {number}
     * @memberof NewAtributos
     */
    'codigo'?: number;
    /**
     * 
     * @type {string}
     * @memberof NewAtributos
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewAtributos
     */
    'unidadSN'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewAtributos
     */
    'unidad'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewAtributos
     */
    'unidadAecoc'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewAtributos
     */
    'tagUOM'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewAtributos
     */
    'tipoCampo'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewAtributos
     */
    'tagAecoc'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewAtributos
     */
    'filtro'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewAtributos
     */
    'posiblesValores'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewAtributos
     */
    'posiblesValoresAecoc'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewAtributos
     */
    'categorias'?: string;
}
/**
 * (tsType: Omit<Categorias, \'id\'>, schemaOptions: { title: \'NewCategorias\', exclude: [ \'id\' ] })
 * @export
 * @interface NewCategorias
 */
export interface NewCategorias {
    /**
     * 
     * @type {number}
     * @memberof NewCategorias
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof NewCategorias
     */
    'tagAecoc'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewCategorias
     */
    'codigo'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewCategorias
     */
    'codigoAECOC'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewCategorias
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewCategorias
     */
    'padre'?: string;
}
/**
 * (tsType: Omit<Empresas, \'id\'>, schemaOptions: { title: \'NewEmpresas\', exclude: [ \'id\' ] })
 * @export
 * @interface NewEmpresas
 */
export interface NewEmpresas {
    /**
     * 
     * @type {string}
     * @memberof NewEmpresas
     */
    'codigo'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewEmpresas
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewEmpresas
     */
    'GLN'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewEmpresas
     */
    'descripcion'?: string;
}
/**
 * (tsType: Omit<Files, \'id\'>, schemaOptions: { title: \'NewFiles\', exclude: [ \'id\' ] })
 * @export
 * @interface NewFiles
 */
export interface NewFiles {
    /**
     * 
     * @type {string}
     * @memberof NewFiles
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewFiles
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewFiles
     */
    'extension'?: string;
    /**
     * 
     * @type {number}
     * @memberof NewFiles
     */
    'size'?: number;
    /**
     * 
     * @type {string}
     * @memberof NewFiles
     */
    'src'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewFiles
     */
    'hash'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewFiles
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewFiles
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewFiles
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewFiles
     */
    'alt'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewFiles
     */
    'modifiedAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof NewFiles
     */
    'userCreator'?: number;
    /**
     * 
     * @type {number}
     * @memberof NewFiles
     */
    'userModifier'?: number;
    /**
     * 
     * @type {string}
     * @memberof NewFiles
     */
    'deletedAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof NewFiles
     */
    'userDeleted'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof NewFiles
     */
    'deleted'?: boolean;
}
/**
 * (tsType: Omit<GruposAtributos, \'id\'>, schemaOptions: { title: \'NewGruposAtributos\', exclude: [ \'id\' ] })
 * @export
 * @interface NewGruposAtributos
 */
export interface NewGruposAtributos {
    /**
     * 
     * @type {number}
     * @memberof NewGruposAtributos
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof NewGruposAtributos
     */
    'codigo'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewGruposAtributos
     */
    'nombre'?: string;
}
/**
 * (tsType: Omit<Idiomas, \'id\'>, schemaOptions: { title: \'NewIdiomas\', exclude: [ \'id\' ] })
 * @export
 * @interface NewIdiomas
 */
export interface NewIdiomas {
    /**
     * 
     * @type {string}
     * @memberof NewIdiomas
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewIdiomas
     */
    'descripcion'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewIdiomas
     */
    'activoSn'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewIdiomas
     */
    'locale'?: string;
}
/**
 * (tsType: Omit<Marca, \'id\'>, schemaOptions: { title: \'NewMarca\', exclude: [ \'id\' ] })
 * @export
 * @interface NewMarca
 */
export interface NewMarca {
    /**
     * 
     * @type {string}
     * @memberof NewMarca
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewMarca
     */
    'codigo'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewMarca
     */
    'color'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewMarca
     */
    'web'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewMarca
     */
    'logo'?: string;
}
/**
 * (tsType: Omit<Mercados, \'id\'>, schemaOptions: { title: \'NewMercados\', exclude: [ \'id\' ] })
 * @export
 * @interface NewMercados
 */
export interface NewMercados {
    /**
     * 
     * @type {number}
     * @memberof NewMercados
     */
    'codigo': number;
    /**
     * 
     * @type {string}
     * @memberof NewMercados
     */
    'nombre'?: string;
}
/**
 * (tsType: Omit<Multimedia, \'id\'>, schemaOptions: { title: \'NewMultimedia\', exclude: [ \'id\' ] })
 * @export
 * @interface NewMultimedia
 */
export interface NewMultimedia {
    /**
     * 
     * @type {number}
     * @memberof NewMultimedia
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof NewMultimedia
     */
    'clave'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewMultimedia
     */
    'tipo'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewMultimedia
     */
    'categoria': string;
    /**
     * 
     * @type {string}
     * @memberof NewMultimedia
     */
    'defectosn'?: string;
}
/**
 * (tsType: Omit<PasswordChanges, \'id\'>, schemaOptions: { title: \'NewPasswordChanges\', exclude: [ \'id\' ] })
 * @export
 * @interface NewPasswordChanges
 */
export interface NewPasswordChanges {
    /**
     * 
     * @type {number}
     * @memberof NewPasswordChanges
     */
    'usersId': number;
    /**
     * 
     * @type {string}
     * @memberof NewPasswordChanges
     */
    'ipAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewPasswordChanges
     */
    'userAgent'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewPasswordChanges
     */
    'createdAt'?: string;
}
/**
 * (tsType: Omit<Permisos, \'id\'>, schemaOptions: { title: \'NewPermisos\', exclude: [ \'id\' ] })
 * @export
 * @interface NewPermisos
 */
export interface NewPermisos {
    /**
     * 
     * @type {string}
     * @memberof NewPermisos
     */
    'moduleName'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewPermisos
     */
    'controllerName'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewPermisos
     */
    'actionName'?: string;
    /**
     * 
     * @type {number}
     * @memberof NewPermisos
     */
    'rolesId'?: number;
}
/**
 * (tsType: Omit<Plantilla, \'id\'>, schemaOptions: { title: \'NewPlantilla\', exclude: [ \'id\' ] })
 * @export
 * @interface NewPlantilla
 */
export interface NewPlantilla {
    /**
     * 
     * @type {string}
     * @memberof NewPlantilla
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewPlantilla
     */
    'tabla'?: string;
    /**
     * 
     * @type {number}
     * @memberof NewPlantilla
     */
    'idEmpresa'?: number;
    /**
     * 
     * @type {string}
     * @memberof NewPlantilla
     */
    'cabecera'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewPlantilla
     */
    'descripcion'?: string;
}
/**
 * (tsType: Omit<ProductoAtributos, \'id\'>, schemaOptions: { title: \'NewProductoAtributos\', exclude: [ \'id\' ] })
 * @export
 * @interface NewProductoAtributos
 */
export interface NewProductoAtributos {
    /**
     * 
     * @type {number}
     * @memberof NewProductoAtributos
     */
    'productoId': number;
    /**
     * 
     * @type {number}
     * @memberof NewProductoAtributos
     */
    'atributoId': number;
    /**
     * 
     * @type {string}
     * @memberof NewProductoAtributos
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewProductoAtributos
     */
    'valor'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewProductoAtributos
     */
    'unidad'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewProductoAtributos
     */
    'ordenEnGrupo'?: string;
}
/**
 * (tsType: Omit<ProductoGeneral, \'id\'>, schemaOptions: { title: \'NewProductoGeneral\', exclude: [ \'id\' ] })
 * @export
 * @interface NewProductoGeneral
 */
export interface NewProductoGeneral {
    /**
     * 
     * @type {number}
     * @memberof NewProductoGeneral
     */
    'productoId': number;
    /**
     * 
     * @type {string}
     * @memberof NewProductoGeneral
     */
    'sku'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewProductoGeneral
     */
    'ean'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewProductoGeneral
     */
    'marca'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewProductoGeneral
     */
    'estadoReferencia'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewProductoGeneral
     */
    'descripcion'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewProductoGeneral
     */
    'titulo'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewProductoGeneral
     */
    'descripcionLarga'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewProductoGeneral
     */
    'palabrasClave'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewProductoGeneral
     */
    'GLN'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewProductoGeneral
     */
    'dimensiones'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewProductoGeneral
     */
    'formatoRP'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewProductoGeneral
     */
    'color'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewProductoGeneral
     */
    'mercados'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewProductoGeneral
     */
    'fechaModificacion'?: string;
}
/**
 * (tsType: Omit<ProductoMultimedia, \'id\'>, schemaOptions: { title: \'NewProductoMultimedia\', exclude: [ \'id\' ] })
 * @export
 * @interface NewProductoMultimedia
 */
export interface NewProductoMultimedia {
    /**
     * 
     * @type {number}
     * @memberof NewProductoMultimedia
     */
    'productoId': number;
    /**
     * 
     * @type {string}
     * @memberof NewProductoMultimedia
     */
    'tipo'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewProductoMultimedia
     */
    'fichero'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewProductoMultimedia
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewProductoMultimedia
     */
    'categoria'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewProductoMultimedia
     */
    'publicoSN'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewProductoMultimedia
     */
    'principalSN'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewProductoMultimedia
     */
    'formato'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewProductoMultimedia
     */
    'objetivo'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewProductoMultimedia
     */
    'tagAecoc'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewProductoMultimedia
     */
    'fechaModificacion'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewProductoMultimedia
     */
    'fechaCreacion'?: string;
}
/**
 * (tsType: Omit<Productos, \'id\'>, schemaOptions: { title: \'NewProductos\', exclude: [ \'id\' ] })
 * @export
 * @interface NewProductos
 */
export interface NewProductos {
    /**
     * 
     * @type {number}
     * @memberof NewProductos
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof NewProductos
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewProductos
     */
    'imagen'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewProductos
     */
    'categorias'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewProductos
     */
    'familias'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewProductos
     */
    'finalizado'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewProductos
     */
    'ordenAtributos'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewProductos
     */
    'finalizadoSAT'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewProductos
     */
    'enviarAecoc'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewProductos
     */
    'fechaModificacion'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewProductos
     */
    'fechaCreacion'?: string;
}
/**
 * (tsType: @loopback/repository-json-schema#Optional<Omit<Permisos, \'id\'>, \'rolesId\'>, schemaOptions: { title: \'NewRelacionRolesPermisos\', exclude: [ \'id\' ], optional: [ \'rolesId\' ] })
 * @export
 * @interface NewRelacionRolesPermisos
 */
export interface NewRelacionRolesPermisos {
    /**
     * 
     * @type {string}
     * @memberof NewRelacionRolesPermisos
     */
    'moduleName'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewRelacionRolesPermisos
     */
    'controllerName'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewRelacionRolesPermisos
     */
    'actionName'?: string;
    /**
     * 
     * @type {number}
     * @memberof NewRelacionRolesPermisos
     */
    'rolesId'?: number;
}
/**
 * (tsType: Omit<RememberTokens, \'id\'>, schemaOptions: { title: \'NewRememberTokens\', exclude: [ \'id\' ] })
 * @export
 * @interface NewRememberTokens
 */
export interface NewRememberTokens {
    /**
     * 
     * @type {number}
     * @memberof NewRememberTokens
     */
    'usersId': number;
    /**
     * 
     * @type {string}
     * @memberof NewRememberTokens
     */
    'token'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewRememberTokens
     */
    'userAgent'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewRememberTokens
     */
    'createdAt': string;
}
/**
 * (tsType: Omit<ResetPasswords, \'id\'>, schemaOptions: { title: \'NewResetPasswords\', exclude: [ \'id\' ] })
 * @export
 * @interface NewResetPasswords
 */
export interface NewResetPasswords {
    /**
     * 
     * @type {number}
     * @memberof NewResetPasswords
     */
    'usersId': number;
    /**
     * 
     * @type {string}
     * @memberof NewResetPasswords
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewResetPasswords
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof NewResetPasswords
     */
    'modifiedAt'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof NewResetPasswords
     */
    'reset'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof NewResetPasswords
     */
    'ipAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewResetPasswords
     */
    'userAgent'?: string;
}
/**
 * (tsType: Omit<Roles, \'id\'>, schemaOptions: { title: \'NewRoles\', exclude: [ \'id\' ] })
 * @export
 * @interface NewRoles
 */
export interface NewRoles {
    /**
     * 
     * @type {string}
     * @memberof NewRoles
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewRoles
     */
    'activo'?: string;
}
/**
 * (tsType: Omit<Sessions, \'id\'>, schemaOptions: { title: \'NewSessions\', exclude: [ \'id\' ] })
 * @export
 * @interface NewSessions
 */
export interface NewSessions {
    /**
     * 
     * @type {boolean}
     * @memberof NewSessions
     */
    'deleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof NewSessions
     */
    'sessionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewSessions
     */
    'hash'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewSessions
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewSessions
     */
    'modifiedAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof NewSessions
     */
    'userDeleted'?: number;
    /**
     * 
     * @type {number}
     * @memberof NewSessions
     */
    'userCreator'?: number;
    /**
     * 
     * @type {number}
     * @memberof NewSessions
     */
    'userModifier'?: number;
    /**
     * 
     * @type {string}
     * @memberof NewSessions
     */
    'deletedAt'?: string;
}
/**
 * (tsType: Omit<Settings, \'id\'>, schemaOptions: { title: \'NewSettings\', exclude: [ \'id\' ] })
 * @export
 * @interface NewSettings
 */
export interface NewSettings {
    /**
     * 
     * @type {boolean}
     * @memberof NewSettings
     */
    'deleted'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof NewSettings
     */
    'active'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof NewSettings
     */
    'hash'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewSettings
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewSettings
     */
    'modifiedAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof NewSettings
     */
    'userDeleted'?: number;
    /**
     * 
     * @type {number}
     * @memberof NewSettings
     */
    'userCreator'?: number;
    /**
     * 
     * @type {number}
     * @memberof NewSettings
     */
    'userModifier'?: number;
    /**
     * 
     * @type {string}
     * @memberof NewSettings
     */
    'deletedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewSettings
     */
    'newUser'?: string;
}
/**
 * (tsType: Omit<Situaciones, \'id\'>, schemaOptions: { title: \'NewSituaciones\', exclude: [ \'id\' ] })
 * @export
 * @interface NewSituaciones
 */
export interface NewSituaciones {
    /**
     * 
     * @type {string}
     * @memberof NewSituaciones
     */
    'nombre'?: string;
}
/**
 * (tsType: Omit<SuccessLogins, \'id\'>, schemaOptions: { title: \'NewSuccessLogins\', exclude: [ \'id\' ] })
 * @export
 * @interface NewSuccessLogins
 */
export interface NewSuccessLogins {
    /**
     * 
     * @type {number}
     * @memberof NewSuccessLogins
     */
    'usersId': number;
    /**
     * 
     * @type {string}
     * @memberof NewSuccessLogins
     */
    'ipAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewSuccessLogins
     */
    'userAgent'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewSuccessLogins
     */
    'createdAt': string;
}
/**
 * (tsType: Omit<Tablas, \'id\'>, schemaOptions: { title: \'NewTablas\', exclude: [ \'id\' ] })
 * @export
 * @interface NewTablas
 */
export interface NewTablas {
    /**
     * 
     * @type {string}
     * @memberof NewTablas
     */
    'nombreTabla'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewTablas
     */
    'campo'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewTablas
     */
    'nullable'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewTablas
     */
    'tipo'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewTablas
     */
    'isKey'?: string;
}
/**
 * (tsType: Omit<Traducciones, \'id\'>, schemaOptions: { title: \'NewTraducciones\', exclude: [ \'id\' ] })
 * @export
 * @interface NewTraducciones
 */
export interface NewTraducciones {
    /**
     * 
     * @type {string}
     * @memberof NewTraducciones
     */
    'idiomaId'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewTraducciones
     */
    'clave'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewTraducciones
     */
    'valor'?: string;
}
/**
 * (tsType: Omit<Usuarios, \'id\'>, schemaOptions: { title: \'NewUsuarios\', exclude: [ \'id\' ] })
 * @export
 * @interface NewUsuarios
 */
export interface NewUsuarios {
    /**
     * 
     * @type {number}
     * @memberof NewUsuarios
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof NewUsuarios
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewUsuarios
     */
    'mail'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewUsuarios
     */
    'activoSn'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewUsuarios
     */
    'telefono'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewUsuarios
     */
    'avatar'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewUsuarios
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewUsuarios
     */
    'role'?: string;
    /**
     * 
     * @type {number}
     * @memberof NewUsuarios
     */
    'rolesId'?: number;
}
/**
 * 
 * @export
 * @interface PasswordChanges
 */
export interface PasswordChanges {
    /**
     * 
     * @type {number}
     * @memberof PasswordChanges
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof PasswordChanges
     */
    'usersId': number;
    /**
     * 
     * @type {string}
     * @memberof PasswordChanges
     */
    'ipAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof PasswordChanges
     */
    'userAgent'?: string;
    /**
     * 
     * @type {string}
     * @memberof PasswordChanges
     */
    'createdAt'?: string;
}
/**
 * 
 * @export
 * @interface PasswordChangesFilter
 */
export interface PasswordChangesFilter {
    /**
     * 
     * @type {number}
     * @memberof PasswordChangesFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof PasswordChangesFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof PasswordChangesFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof PasswordChangesFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof PasswordChangesFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface PasswordChangesFilter1
 */
export interface PasswordChangesFilter1 {
    /**
     * 
     * @type {number}
     * @memberof PasswordChangesFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof PasswordChangesFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof PasswordChangesFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof PasswordChangesFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof PasswordChangesFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof PasswordChangesFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<PasswordChanges>, schemaOptions: { partial: true })
 * @export
 * @interface PasswordChangesPartial
 */
export interface PasswordChangesPartial {
    /**
     * 
     * @type {number}
     * @memberof PasswordChangesPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof PasswordChangesPartial
     */
    'usersId'?: number;
    /**
     * 
     * @type {string}
     * @memberof PasswordChangesPartial
     */
    'ipAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof PasswordChangesPartial
     */
    'userAgent'?: string;
    /**
     * 
     * @type {string}
     * @memberof PasswordChangesPartial
     */
    'createdAt'?: string;
}
/**
 * (tsType: PasswordChangesWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface PasswordChangesWithRelations
 */
export interface PasswordChangesWithRelations {
    /**
     * 
     * @type {number}
     * @memberof PasswordChangesWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof PasswordChangesWithRelations
     */
    'usersId': number;
    /**
     * 
     * @type {string}
     * @memberof PasswordChangesWithRelations
     */
    'ipAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof PasswordChangesWithRelations
     */
    'userAgent'?: string;
    /**
     * 
     * @type {string}
     * @memberof PasswordChangesWithRelations
     */
    'createdAt'?: string;
}
/**
 * 
 * @export
 * @interface Permisos
 */
export interface Permisos {
    /**
     * 
     * @type {number}
     * @memberof Permisos
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Permisos
     */
    'moduleName'?: string;
    /**
     * 
     * @type {string}
     * @memberof Permisos
     */
    'controllerName'?: string;
    /**
     * 
     * @type {string}
     * @memberof Permisos
     */
    'actionName'?: string;
    /**
     * 
     * @type {number}
     * @memberof Permisos
     */
    'rolesId'?: number;
}
/**
 * 
 * @export
 * @interface PermisosFilter
 */
export interface PermisosFilter {
    /**
     * 
     * @type {number}
     * @memberof PermisosFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof PermisosFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof PermisosFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof PermisosFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof PermisosFilter
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof PermisosFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface PermisosFilter1
 */
export interface PermisosFilter1 {
    /**
     * 
     * @type {number}
     * @memberof PermisosFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof PermisosFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof PermisosFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof PermisosFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof PermisosFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<Permisos>, schemaOptions: { partial: true })
 * @export
 * @interface PermisosPartial
 */
export interface PermisosPartial {
    /**
     * 
     * @type {number}
     * @memberof PermisosPartial
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PermisosPartial
     */
    'moduleName'?: string;
    /**
     * 
     * @type {string}
     * @memberof PermisosPartial
     */
    'controllerName'?: string;
    /**
     * 
     * @type {string}
     * @memberof PermisosPartial
     */
    'actionName'?: string;
    /**
     * 
     * @type {number}
     * @memberof PermisosPartial
     */
    'rolesId'?: number;
}
/**
 * (tsType: PermisosWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface PermisosWithRelations
 */
export interface PermisosWithRelations {
    /**
     * 
     * @type {number}
     * @memberof PermisosWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PermisosWithRelations
     */
    'moduleName'?: string;
    /**
     * 
     * @type {string}
     * @memberof PermisosWithRelations
     */
    'controllerName'?: string;
    /**
     * 
     * @type {string}
     * @memberof PermisosWithRelations
     */
    'actionName'?: string;
    /**
     * 
     * @type {number}
     * @memberof PermisosWithRelations
     */
    'rolesId'?: number;
}
/**
 * 
 * @export
 * @interface PingResponse
 */
export interface PingResponse {
    /**
     * 
     * @type {string}
     * @memberof PingResponse
     */
    'greeting'?: string;
    /**
     * 
     * @type {string}
     * @memberof PingResponse
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof PingResponse
     */
    'url'?: string;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof PingResponse
     */
    'headers'?: { [key: string]: object; };
}
/**
 * 
 * @export
 * @interface Plantilla
 */
export interface Plantilla {
    /**
     * 
     * @type {number}
     * @memberof Plantilla
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Plantilla
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof Plantilla
     */
    'tabla'?: string;
    /**
     * 
     * @type {number}
     * @memberof Plantilla
     */
    'idEmpresa'?: number;
    /**
     * 
     * @type {string}
     * @memberof Plantilla
     */
    'cabecera'?: string;
    /**
     * 
     * @type {string}
     * @memberof Plantilla
     */
    'descripcion'?: string;
}
/**
 * 
 * @export
 * @interface PlantillaFilter
 */
export interface PlantillaFilter {
    /**
     * 
     * @type {number}
     * @memberof PlantillaFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof PlantillaFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof PlantillaFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof PlantillaFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof PlantillaFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface PlantillaFilter1
 */
export interface PlantillaFilter1 {
    /**
     * 
     * @type {number}
     * @memberof PlantillaFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof PlantillaFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof PlantillaFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof PlantillaFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof PlantillaFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof PlantillaFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<Plantilla>, schemaOptions: { partial: true })
 * @export
 * @interface PlantillaPartial
 */
export interface PlantillaPartial {
    /**
     * 
     * @type {number}
     * @memberof PlantillaPartial
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PlantillaPartial
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof PlantillaPartial
     */
    'tabla'?: string;
    /**
     * 
     * @type {number}
     * @memberof PlantillaPartial
     */
    'idEmpresa'?: number;
    /**
     * 
     * @type {string}
     * @memberof PlantillaPartial
     */
    'cabecera'?: string;
    /**
     * 
     * @type {string}
     * @memberof PlantillaPartial
     */
    'descripcion'?: string;
}
/**
 * (tsType: PlantillaWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface PlantillaWithRelations
 */
export interface PlantillaWithRelations {
    /**
     * 
     * @type {number}
     * @memberof PlantillaWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PlantillaWithRelations
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof PlantillaWithRelations
     */
    'tabla'?: string;
    /**
     * 
     * @type {number}
     * @memberof PlantillaWithRelations
     */
    'idEmpresa'?: number;
    /**
     * 
     * @type {string}
     * @memberof PlantillaWithRelations
     */
    'cabecera'?: string;
    /**
     * 
     * @type {string}
     * @memberof PlantillaWithRelations
     */
    'descripcion'?: string;
}
/**
 * 
 * @export
 * @interface ProductoAtributos
 */
export interface ProductoAtributos {
    /**
     * 
     * @type {number}
     * @memberof ProductoAtributos
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoAtributos
     */
    'productoId': number;
    /**
     * 
     * @type {number}
     * @memberof ProductoAtributos
     */
    'atributoId': number;
    /**
     * 
     * @type {string}
     * @memberof ProductoAtributos
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoAtributos
     */
    'valor'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoAtributos
     */
    'unidad'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoAtributos
     */
    'ordenEnGrupo'?: string;
}
/**
 * 
 * @export
 * @interface ProductoAtributosFilter
 */
export interface ProductoAtributosFilter {
    /**
     * 
     * @type {number}
     * @memberof ProductoAtributosFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoAtributosFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoAtributosFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof ProductoAtributosFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof ProductoAtributosFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface ProductoAtributosFilter1
 */
export interface ProductoAtributosFilter1 {
    /**
     * 
     * @type {number}
     * @memberof ProductoAtributosFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoAtributosFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoAtributosFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof ProductoAtributosFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof ProductoAtributosFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof ProductoAtributosFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<ProductoAtributos>, schemaOptions: { partial: true })
 * @export
 * @interface ProductoAtributosPartial
 */
export interface ProductoAtributosPartial {
    /**
     * 
     * @type {number}
     * @memberof ProductoAtributosPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoAtributosPartial
     */
    'productoId'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoAtributosPartial
     */
    'atributoId'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductoAtributosPartial
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoAtributosPartial
     */
    'valor'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoAtributosPartial
     */
    'unidad'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoAtributosPartial
     */
    'ordenEnGrupo'?: string;
}
/**
 * (tsType: ProductoAtributosWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface ProductoAtributosWithRelations
 */
export interface ProductoAtributosWithRelations {
    /**
     * 
     * @type {number}
     * @memberof ProductoAtributosWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoAtributosWithRelations
     */
    'productoId': number;
    /**
     * 
     * @type {number}
     * @memberof ProductoAtributosWithRelations
     */
    'atributoId': number;
    /**
     * 
     * @type {string}
     * @memberof ProductoAtributosWithRelations
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoAtributosWithRelations
     */
    'valor'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoAtributosWithRelations
     */
    'unidad'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoAtributosWithRelations
     */
    'ordenEnGrupo'?: string;
}
/**
 * 
 * @export
 * @interface ProductoGeneral
 */
export interface ProductoGeneral {
    /**
     * 
     * @type {number}
     * @memberof ProductoGeneral
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoGeneral
     */
    'productoId': number;
    /**
     * 
     * @type {string}
     * @memberof ProductoGeneral
     */
    'sku'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoGeneral
     */
    'ean'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoGeneral
     */
    'marca'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoGeneral
     */
    'estadoReferencia'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoGeneral
     */
    'descripcion'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoGeneral
     */
    'titulo'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoGeneral
     */
    'descripcionLarga'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoGeneral
     */
    'palabrasClave'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoGeneral
     */
    'GLN'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoGeneral
     */
    'dimensiones'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoGeneral
     */
    'formatoRP'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoGeneral
     */
    'color'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoGeneral
     */
    'mercados'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoGeneral
     */
    'fechaModificacion'?: string;
}
/**
 * 
 * @export
 * @interface ProductoGeneralFilter
 */
export interface ProductoGeneralFilter {
    /**
     * 
     * @type {number}
     * @memberof ProductoGeneralFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoGeneralFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoGeneralFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof ProductoGeneralFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof ProductoGeneralFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface ProductoGeneralFilter1
 */
export interface ProductoGeneralFilter1 {
    /**
     * 
     * @type {number}
     * @memberof ProductoGeneralFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoGeneralFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoGeneralFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof ProductoGeneralFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof ProductoGeneralFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof ProductoGeneralFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<ProductoGeneral>, schemaOptions: { partial: true })
 * @export
 * @interface ProductoGeneralPartial
 */
export interface ProductoGeneralPartial {
    /**
     * 
     * @type {number}
     * @memberof ProductoGeneralPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoGeneralPartial
     */
    'productoId'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductoGeneralPartial
     */
    'sku'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoGeneralPartial
     */
    'ean'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoGeneralPartial
     */
    'marca'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoGeneralPartial
     */
    'estadoReferencia'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoGeneralPartial
     */
    'descripcion'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoGeneralPartial
     */
    'titulo'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoGeneralPartial
     */
    'descripcionLarga'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoGeneralPartial
     */
    'palabrasClave'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoGeneralPartial
     */
    'GLN'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoGeneralPartial
     */
    'dimensiones'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoGeneralPartial
     */
    'formatoRP'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoGeneralPartial
     */
    'color'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoGeneralPartial
     */
    'mercados'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoGeneralPartial
     */
    'fechaModificacion'?: string;
}
/**
 * (tsType: ProductoGeneralWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface ProductoGeneralWithRelations
 */
export interface ProductoGeneralWithRelations {
    /**
     * 
     * @type {number}
     * @memberof ProductoGeneralWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoGeneralWithRelations
     */
    'productoId': number;
    /**
     * 
     * @type {string}
     * @memberof ProductoGeneralWithRelations
     */
    'sku'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoGeneralWithRelations
     */
    'ean'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoGeneralWithRelations
     */
    'marca'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoGeneralWithRelations
     */
    'estadoReferencia'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoGeneralWithRelations
     */
    'descripcion'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoGeneralWithRelations
     */
    'titulo'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoGeneralWithRelations
     */
    'descripcionLarga'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoGeneralWithRelations
     */
    'palabrasClave'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoGeneralWithRelations
     */
    'GLN'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoGeneralWithRelations
     */
    'dimensiones'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoGeneralWithRelations
     */
    'formatoRP'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoGeneralWithRelations
     */
    'color'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoGeneralWithRelations
     */
    'mercados'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoGeneralWithRelations
     */
    'fechaModificacion'?: string;
}
/**
 * 
 * @export
 * @interface ProductoMultimedia
 */
export interface ProductoMultimedia {
    /**
     * 
     * @type {number}
     * @memberof ProductoMultimedia
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoMultimedia
     */
    'productoId': number;
    /**
     * 
     * @type {string}
     * @memberof ProductoMultimedia
     */
    'tipo'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoMultimedia
     */
    'fichero'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoMultimedia
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoMultimedia
     */
    'categoria'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoMultimedia
     */
    'publicoSN'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoMultimedia
     */
    'principalSN'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoMultimedia
     */
    'formato'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoMultimedia
     */
    'objetivo'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoMultimedia
     */
    'tagAecoc'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoMultimedia
     */
    'fechaModificacion'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoMultimedia
     */
    'fechaCreacion'?: string;
}
/**
 * 
 * @export
 * @interface ProductoMultimediaFilter
 */
export interface ProductoMultimediaFilter {
    /**
     * 
     * @type {number}
     * @memberof ProductoMultimediaFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoMultimediaFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoMultimediaFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof ProductoMultimediaFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof ProductoMultimediaFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface ProductoMultimediaFilter1
 */
export interface ProductoMultimediaFilter1 {
    /**
     * 
     * @type {number}
     * @memberof ProductoMultimediaFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoMultimediaFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoMultimediaFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof ProductoMultimediaFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof ProductoMultimediaFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof ProductoMultimediaFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<ProductoMultimedia>, schemaOptions: { partial: true })
 * @export
 * @interface ProductoMultimediaPartial
 */
export interface ProductoMultimediaPartial {
    /**
     * 
     * @type {number}
     * @memberof ProductoMultimediaPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoMultimediaPartial
     */
    'productoId'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductoMultimediaPartial
     */
    'tipo'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoMultimediaPartial
     */
    'fichero'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoMultimediaPartial
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoMultimediaPartial
     */
    'categoria'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoMultimediaPartial
     */
    'publicoSN'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoMultimediaPartial
     */
    'principalSN'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoMultimediaPartial
     */
    'formato'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoMultimediaPartial
     */
    'objetivo'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoMultimediaPartial
     */
    'tagAecoc'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoMultimediaPartial
     */
    'fechaModificacion'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoMultimediaPartial
     */
    'fechaCreacion'?: string;
}
/**
 * (tsType: ProductoMultimediaWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface ProductoMultimediaWithRelations
 */
export interface ProductoMultimediaWithRelations {
    /**
     * 
     * @type {number}
     * @memberof ProductoMultimediaWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductoMultimediaWithRelations
     */
    'productoId': number;
    /**
     * 
     * @type {string}
     * @memberof ProductoMultimediaWithRelations
     */
    'tipo'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoMultimediaWithRelations
     */
    'fichero'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoMultimediaWithRelations
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoMultimediaWithRelations
     */
    'categoria'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoMultimediaWithRelations
     */
    'publicoSN'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoMultimediaWithRelations
     */
    'principalSN'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoMultimediaWithRelations
     */
    'formato'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoMultimediaWithRelations
     */
    'objetivo'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoMultimediaWithRelations
     */
    'tagAecoc'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoMultimediaWithRelations
     */
    'fechaModificacion'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductoMultimediaWithRelations
     */
    'fechaCreacion'?: string;
}
/**
 * 
 * @export
 * @interface Productos
 */
export interface Productos {
    /**
     * 
     * @type {number}
     * @memberof Productos
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Productos
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof Productos
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof Productos
     */
    'imagen'?: string;
    /**
     * 
     * @type {string}
     * @memberof Productos
     */
    'categorias'?: string;
    /**
     * 
     * @type {string}
     * @memberof Productos
     */
    'familias'?: string;
    /**
     * 
     * @type {string}
     * @memberof Productos
     */
    'finalizado'?: string;
    /**
     * 
     * @type {string}
     * @memberof Productos
     */
    'ordenAtributos'?: string;
    /**
     * 
     * @type {string}
     * @memberof Productos
     */
    'finalizadoSAT'?: string;
    /**
     * 
     * @type {string}
     * @memberof Productos
     */
    'enviarAecoc'?: string;
    /**
     * 
     * @type {string}
     * @memberof Productos
     */
    'fechaModificacion'?: string;
    /**
     * 
     * @type {string}
     * @memberof Productos
     */
    'fechaCreacion'?: string;
}
/**
 * 
 * @export
 * @interface ProductosFilter
 */
export interface ProductosFilter {
    /**
     * 
     * @type {number}
     * @memberof ProductosFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductosFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductosFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof ProductosFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof ProductosFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface ProductosFilter1
 */
export interface ProductosFilter1 {
    /**
     * 
     * @type {number}
     * @memberof ProductosFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductosFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductosFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof ProductosFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof ProductosFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof ProductosFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<Productos>, schemaOptions: { partial: true })
 * @export
 * @interface ProductosPartial
 */
export interface ProductosPartial {
    /**
     * 
     * @type {number}
     * @memberof ProductosPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductosPartial
     */
    'empresaId'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductosPartial
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductosPartial
     */
    'imagen'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductosPartial
     */
    'categorias'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductosPartial
     */
    'familias'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductosPartial
     */
    'finalizado'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductosPartial
     */
    'ordenAtributos'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductosPartial
     */
    'finalizadoSAT'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductosPartial
     */
    'enviarAecoc'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductosPartial
     */
    'fechaModificacion'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductosPartial
     */
    'fechaCreacion'?: string;
}
/**
 * (tsType: ProductosWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface ProductosWithRelations
 */
export interface ProductosWithRelations {
    /**
     * 
     * @type {number}
     * @memberof ProductosWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductosWithRelations
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof ProductosWithRelations
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductosWithRelations
     */
    'imagen'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductosWithRelations
     */
    'categorias'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductosWithRelations
     */
    'familias'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductosWithRelations
     */
    'finalizado'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductosWithRelations
     */
    'ordenAtributos'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductosWithRelations
     */
    'finalizadoSAT'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductosWithRelations
     */
    'enviarAecoc'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductosWithRelations
     */
    'fechaModificacion'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductosWithRelations
     */
    'fechaCreacion'?: string;
}
/**
 * 
 * @export
 * @interface RememberTokens
 */
export interface RememberTokens {
    /**
     * 
     * @type {number}
     * @memberof RememberTokens
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof RememberTokens
     */
    'usersId': number;
    /**
     * 
     * @type {string}
     * @memberof RememberTokens
     */
    'token'?: string;
    /**
     * 
     * @type {string}
     * @memberof RememberTokens
     */
    'userAgent'?: string;
    /**
     * 
     * @type {string}
     * @memberof RememberTokens
     */
    'createdAt': string;
}
/**
 * 
 * @export
 * @interface RememberTokensFilter
 */
export interface RememberTokensFilter {
    /**
     * 
     * @type {number}
     * @memberof RememberTokensFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof RememberTokensFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof RememberTokensFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof RememberTokensFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof RememberTokensFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface RememberTokensFilter1
 */
export interface RememberTokensFilter1 {
    /**
     * 
     * @type {number}
     * @memberof RememberTokensFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof RememberTokensFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof RememberTokensFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof RememberTokensFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof RememberTokensFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof RememberTokensFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<RememberTokens>, schemaOptions: { partial: true })
 * @export
 * @interface RememberTokensPartial
 */
export interface RememberTokensPartial {
    /**
     * 
     * @type {number}
     * @memberof RememberTokensPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof RememberTokensPartial
     */
    'usersId'?: number;
    /**
     * 
     * @type {string}
     * @memberof RememberTokensPartial
     */
    'token'?: string;
    /**
     * 
     * @type {string}
     * @memberof RememberTokensPartial
     */
    'userAgent'?: string;
    /**
     * 
     * @type {string}
     * @memberof RememberTokensPartial
     */
    'createdAt'?: string;
}
/**
 * (tsType: RememberTokensWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface RememberTokensWithRelations
 */
export interface RememberTokensWithRelations {
    /**
     * 
     * @type {number}
     * @memberof RememberTokensWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof RememberTokensWithRelations
     */
    'usersId': number;
    /**
     * 
     * @type {string}
     * @memberof RememberTokensWithRelations
     */
    'token'?: string;
    /**
     * 
     * @type {string}
     * @memberof RememberTokensWithRelations
     */
    'userAgent'?: string;
    /**
     * 
     * @type {string}
     * @memberof RememberTokensWithRelations
     */
    'createdAt': string;
}
/**
 * 
 * @export
 * @interface ResetPasswords
 */
export interface ResetPasswords {
    /**
     * 
     * @type {number}
     * @memberof ResetPasswords
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ResetPasswords
     */
    'usersId': number;
    /**
     * 
     * @type {string}
     * @memberof ResetPasswords
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResetPasswords
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ResetPasswords
     */
    'modifiedAt'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ResetPasswords
     */
    'reset'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ResetPasswords
     */
    'ipAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResetPasswords
     */
    'userAgent'?: string;
}
/**
 * 
 * @export
 * @interface ResetPasswordsFilter
 */
export interface ResetPasswordsFilter {
    /**
     * 
     * @type {number}
     * @memberof ResetPasswordsFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof ResetPasswordsFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof ResetPasswordsFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof ResetPasswordsFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof ResetPasswordsFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface ResetPasswordsFilter1
 */
export interface ResetPasswordsFilter1 {
    /**
     * 
     * @type {number}
     * @memberof ResetPasswordsFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof ResetPasswordsFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof ResetPasswordsFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof ResetPasswordsFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof ResetPasswordsFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof ResetPasswordsFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<ResetPasswords>, schemaOptions: { partial: true })
 * @export
 * @interface ResetPasswordsPartial
 */
export interface ResetPasswordsPartial {
    /**
     * 
     * @type {number}
     * @memberof ResetPasswordsPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ResetPasswordsPartial
     */
    'usersId'?: number;
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordsPartial
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordsPartial
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordsPartial
     */
    'modifiedAt'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ResetPasswordsPartial
     */
    'reset'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordsPartial
     */
    'ipAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordsPartial
     */
    'userAgent'?: string;
}
/**
 * (tsType: ResetPasswordsWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface ResetPasswordsWithRelations
 */
export interface ResetPasswordsWithRelations {
    /**
     * 
     * @type {number}
     * @memberof ResetPasswordsWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ResetPasswordsWithRelations
     */
    'usersId': number;
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordsWithRelations
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordsWithRelations
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordsWithRelations
     */
    'modifiedAt'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ResetPasswordsWithRelations
     */
    'reset'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordsWithRelations
     */
    'ipAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordsWithRelations
     */
    'userAgent'?: string;
}
/**
 * 
 * @export
 * @interface Roles
 */
export interface Roles {
    /**
     * 
     * @type {number}
     * @memberof Roles
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Roles
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof Roles
     */
    'activo'?: string;
}
/**
 * 
 * @export
 * @interface RolesFilter
 */
export interface RolesFilter {
    /**
     * 
     * @type {number}
     * @memberof RolesFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof RolesFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof RolesFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof RolesFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof RolesFilter
     */
    'fields'?: object | Set<string>;
    /**
     * 
     * @type {Array<RolesIncludeFilterItems | string>}
     * @memberof RolesFilter
     */
    'include'?: Array<RolesIncludeFilterItems | string>;
}
/**
 * 
 * @export
 * @interface RolesFilter1
 */
export interface RolesFilter1 {
    /**
     * 
     * @type {number}
     * @memberof RolesFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof RolesFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof RolesFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof RolesFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof RolesFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof RolesFilter1
     */
    'fields'?: object | Set<string>;
    /**
     * 
     * @type {Array<RolesIncludeFilterItems | string>}
     * @memberof RolesFilter1
     */
    'include'?: Array<RolesIncludeFilterItems | string>;
}
/**
 * 
 * @export
 * @interface RolesIncludeFilterItems
 */
export interface RolesIncludeFilterItems {
    /**
     * 
     * @type {string}
     * @memberof RolesIncludeFilterItems
     */
    'relation'?: string;
    /**
     * 
     * @type {RolesScopeFilter}
     * @memberof RolesIncludeFilterItems
     */
    'scope'?: RolesScopeFilter;
}
/**
 * (tsType: Partial<Roles>, schemaOptions: { partial: true })
 * @export
 * @interface RolesPartial
 */
export interface RolesPartial {
    /**
     * 
     * @type {number}
     * @memberof RolesPartial
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof RolesPartial
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof RolesPartial
     */
    'activo'?: string;
}
/**
 * 
 * @export
 * @interface RolesScopeFilter
 */
export interface RolesScopeFilter {
    /**
     * 
     * @type {number}
     * @memberof RolesScopeFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof RolesScopeFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof RolesScopeFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof RolesScopeFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof RolesScopeFilter
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {any | Set<string>}
     * @memberof RolesScopeFilter
     */
    'fields'?: any | Set<string>;
    /**
     * 
     * @type {Array<{ [key: string]: object; }>}
     * @memberof RolesScopeFilter
     */
    'include'?: Array<{ [key: string]: object; }>;
}
/**
 * (tsType: RolesWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface RolesWithRelations
 */
export interface RolesWithRelations {
    /**
     * 
     * @type {number}
     * @memberof RolesWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof RolesWithRelations
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof RolesWithRelations
     */
    'activo'?: string;
    /**
     * 
     * @type {Array<PermisosWithRelations>}
     * @memberof RolesWithRelations
     */
    'permisos'?: Array<PermisosWithRelations>;
}
/**
 * 
 * @export
 * @interface Sessions
 */
export interface Sessions {
    /**
     * 
     * @type {boolean}
     * @memberof Sessions
     */
    'deleted'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Sessions
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Sessions
     */
    'sessionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Sessions
     */
    'hash'?: string;
    /**
     * 
     * @type {string}
     * @memberof Sessions
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Sessions
     */
    'modifiedAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof Sessions
     */
    'userDeleted'?: number;
    /**
     * 
     * @type {number}
     * @memberof Sessions
     */
    'userCreator'?: number;
    /**
     * 
     * @type {number}
     * @memberof Sessions
     */
    'userModifier'?: number;
    /**
     * 
     * @type {string}
     * @memberof Sessions
     */
    'deletedAt'?: string;
}
/**
 * 
 * @export
 * @interface SessionsFilter
 */
export interface SessionsFilter {
    /**
     * 
     * @type {number}
     * @memberof SessionsFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof SessionsFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof SessionsFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof SessionsFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof SessionsFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface SessionsFilter1
 */
export interface SessionsFilter1 {
    /**
     * 
     * @type {number}
     * @memberof SessionsFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof SessionsFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof SessionsFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof SessionsFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof SessionsFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof SessionsFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<Sessions>, schemaOptions: { partial: true })
 * @export
 * @interface SessionsPartial
 */
export interface SessionsPartial {
    /**
     * 
     * @type {boolean}
     * @memberof SessionsPartial
     */
    'deleted'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof SessionsPartial
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof SessionsPartial
     */
    'sessionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionsPartial
     */
    'hash'?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionsPartial
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionsPartial
     */
    'modifiedAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof SessionsPartial
     */
    'userDeleted'?: number;
    /**
     * 
     * @type {number}
     * @memberof SessionsPartial
     */
    'userCreator'?: number;
    /**
     * 
     * @type {number}
     * @memberof SessionsPartial
     */
    'userModifier'?: number;
    /**
     * 
     * @type {string}
     * @memberof SessionsPartial
     */
    'deletedAt'?: string;
}
/**
 * (tsType: SessionsWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface SessionsWithRelations
 */
export interface SessionsWithRelations {
    /**
     * 
     * @type {boolean}
     * @memberof SessionsWithRelations
     */
    'deleted'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof SessionsWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof SessionsWithRelations
     */
    'sessionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionsWithRelations
     */
    'hash'?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionsWithRelations
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionsWithRelations
     */
    'modifiedAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof SessionsWithRelations
     */
    'userDeleted'?: number;
    /**
     * 
     * @type {number}
     * @memberof SessionsWithRelations
     */
    'userCreator'?: number;
    /**
     * 
     * @type {number}
     * @memberof SessionsWithRelations
     */
    'userModifier'?: number;
    /**
     * 
     * @type {string}
     * @memberof SessionsWithRelations
     */
    'deletedAt'?: string;
}
/**
 * 
 * @export
 * @interface Settings
 */
export interface Settings {
    /**
     * 
     * @type {boolean}
     * @memberof Settings
     */
    'deleted'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Settings
     */
    'id'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Settings
     */
    'active'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Settings
     */
    'hash'?: string;
    /**
     * 
     * @type {string}
     * @memberof Settings
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Settings
     */
    'modifiedAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof Settings
     */
    'userDeleted'?: number;
    /**
     * 
     * @type {number}
     * @memberof Settings
     */
    'userCreator'?: number;
    /**
     * 
     * @type {number}
     * @memberof Settings
     */
    'userModifier'?: number;
    /**
     * 
     * @type {string}
     * @memberof Settings
     */
    'deletedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Settings
     */
    'newUser'?: string;
}
/**
 * 
 * @export
 * @interface SettingsFilter
 */
export interface SettingsFilter {
    /**
     * 
     * @type {number}
     * @memberof SettingsFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof SettingsFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof SettingsFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof SettingsFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof SettingsFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface SettingsFilter1
 */
export interface SettingsFilter1 {
    /**
     * 
     * @type {number}
     * @memberof SettingsFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof SettingsFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof SettingsFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof SettingsFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof SettingsFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof SettingsFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<Settings>, schemaOptions: { partial: true })
 * @export
 * @interface SettingsPartial
 */
export interface SettingsPartial {
    /**
     * 
     * @type {boolean}
     * @memberof SettingsPartial
     */
    'deleted'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof SettingsPartial
     */
    'id'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof SettingsPartial
     */
    'active'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SettingsPartial
     */
    'hash'?: string;
    /**
     * 
     * @type {string}
     * @memberof SettingsPartial
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof SettingsPartial
     */
    'modifiedAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof SettingsPartial
     */
    'userDeleted'?: number;
    /**
     * 
     * @type {number}
     * @memberof SettingsPartial
     */
    'userCreator'?: number;
    /**
     * 
     * @type {number}
     * @memberof SettingsPartial
     */
    'userModifier'?: number;
    /**
     * 
     * @type {string}
     * @memberof SettingsPartial
     */
    'deletedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof SettingsPartial
     */
    'newUser'?: string;
}
/**
 * (tsType: SettingsWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface SettingsWithRelations
 */
export interface SettingsWithRelations {
    /**
     * 
     * @type {boolean}
     * @memberof SettingsWithRelations
     */
    'deleted'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof SettingsWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof SettingsWithRelations
     */
    'active'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SettingsWithRelations
     */
    'hash'?: string;
    /**
     * 
     * @type {string}
     * @memberof SettingsWithRelations
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof SettingsWithRelations
     */
    'modifiedAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof SettingsWithRelations
     */
    'userDeleted'?: number;
    /**
     * 
     * @type {number}
     * @memberof SettingsWithRelations
     */
    'userCreator'?: number;
    /**
     * 
     * @type {number}
     * @memberof SettingsWithRelations
     */
    'userModifier'?: number;
    /**
     * 
     * @type {string}
     * @memberof SettingsWithRelations
     */
    'deletedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof SettingsWithRelations
     */
    'newUser'?: string;
}
/**
 * 
 * @export
 * @interface Situaciones
 */
export interface Situaciones {
    /**
     * 
     * @type {number}
     * @memberof Situaciones
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Situaciones
     */
    'nombre'?: string;
}
/**
 * 
 * @export
 * @interface SituacionesFilter
 */
export interface SituacionesFilter {
    /**
     * 
     * @type {number}
     * @memberof SituacionesFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof SituacionesFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof SituacionesFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof SituacionesFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof SituacionesFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface SituacionesFilter1
 */
export interface SituacionesFilter1 {
    /**
     * 
     * @type {number}
     * @memberof SituacionesFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof SituacionesFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof SituacionesFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof SituacionesFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof SituacionesFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof SituacionesFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<Situaciones>, schemaOptions: { partial: true })
 * @export
 * @interface SituacionesPartial
 */
export interface SituacionesPartial {
    /**
     * 
     * @type {number}
     * @memberof SituacionesPartial
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof SituacionesPartial
     */
    'nombre'?: string;
}
/**
 * (tsType: SituacionesWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface SituacionesWithRelations
 */
export interface SituacionesWithRelations {
    /**
     * 
     * @type {number}
     * @memberof SituacionesWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof SituacionesWithRelations
     */
    'nombre'?: string;
}
/**
 * 
 * @export
 * @interface SuccessLogins
 */
export interface SuccessLogins {
    /**
     * 
     * @type {number}
     * @memberof SuccessLogins
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof SuccessLogins
     */
    'usersId': number;
    /**
     * 
     * @type {string}
     * @memberof SuccessLogins
     */
    'ipAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof SuccessLogins
     */
    'userAgent'?: string;
    /**
     * 
     * @type {string}
     * @memberof SuccessLogins
     */
    'createdAt': string;
}
/**
 * 
 * @export
 * @interface SuccessLoginsFilter
 */
export interface SuccessLoginsFilter {
    /**
     * 
     * @type {number}
     * @memberof SuccessLoginsFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof SuccessLoginsFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof SuccessLoginsFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof SuccessLoginsFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof SuccessLoginsFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface SuccessLoginsFilter1
 */
export interface SuccessLoginsFilter1 {
    /**
     * 
     * @type {number}
     * @memberof SuccessLoginsFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof SuccessLoginsFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof SuccessLoginsFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof SuccessLoginsFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof SuccessLoginsFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof SuccessLoginsFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<SuccessLogins>, schemaOptions: { partial: true })
 * @export
 * @interface SuccessLoginsPartial
 */
export interface SuccessLoginsPartial {
    /**
     * 
     * @type {number}
     * @memberof SuccessLoginsPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof SuccessLoginsPartial
     */
    'usersId'?: number;
    /**
     * 
     * @type {string}
     * @memberof SuccessLoginsPartial
     */
    'ipAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof SuccessLoginsPartial
     */
    'userAgent'?: string;
    /**
     * 
     * @type {string}
     * @memberof SuccessLoginsPartial
     */
    'createdAt'?: string;
}
/**
 * (tsType: SuccessLoginsWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface SuccessLoginsWithRelations
 */
export interface SuccessLoginsWithRelations {
    /**
     * 
     * @type {number}
     * @memberof SuccessLoginsWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof SuccessLoginsWithRelations
     */
    'usersId': number;
    /**
     * 
     * @type {string}
     * @memberof SuccessLoginsWithRelations
     */
    'ipAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof SuccessLoginsWithRelations
     */
    'userAgent'?: string;
    /**
     * 
     * @type {string}
     * @memberof SuccessLoginsWithRelations
     */
    'createdAt': string;
}
/**
 * 
 * @export
 * @interface Tablas
 */
export interface Tablas {
    /**
     * 
     * @type {number}
     * @memberof Tablas
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Tablas
     */
    'nombreTabla'?: string;
    /**
     * 
     * @type {string}
     * @memberof Tablas
     */
    'campo'?: string;
    /**
     * 
     * @type {string}
     * @memberof Tablas
     */
    'nullable'?: string;
    /**
     * 
     * @type {string}
     * @memberof Tablas
     */
    'tipo'?: string;
    /**
     * 
     * @type {string}
     * @memberof Tablas
     */
    'isKey'?: string;
}
/**
 * 
 * @export
 * @interface TablasFilter
 */
export interface TablasFilter {
    /**
     * 
     * @type {number}
     * @memberof TablasFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof TablasFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof TablasFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof TablasFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof TablasFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface TablasFilter1
 */
export interface TablasFilter1 {
    /**
     * 
     * @type {number}
     * @memberof TablasFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof TablasFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof TablasFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof TablasFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof TablasFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof TablasFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<Tablas>, schemaOptions: { partial: true })
 * @export
 * @interface TablasPartial
 */
export interface TablasPartial {
    /**
     * 
     * @type {number}
     * @memberof TablasPartial
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TablasPartial
     */
    'nombreTabla'?: string;
    /**
     * 
     * @type {string}
     * @memberof TablasPartial
     */
    'campo'?: string;
    /**
     * 
     * @type {string}
     * @memberof TablasPartial
     */
    'nullable'?: string;
    /**
     * 
     * @type {string}
     * @memberof TablasPartial
     */
    'tipo'?: string;
    /**
     * 
     * @type {string}
     * @memberof TablasPartial
     */
    'isKey'?: string;
}
/**
 * (tsType: TablasWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface TablasWithRelations
 */
export interface TablasWithRelations {
    /**
     * 
     * @type {number}
     * @memberof TablasWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TablasWithRelations
     */
    'nombreTabla'?: string;
    /**
     * 
     * @type {string}
     * @memberof TablasWithRelations
     */
    'campo'?: string;
    /**
     * 
     * @type {string}
     * @memberof TablasWithRelations
     */
    'nullable'?: string;
    /**
     * 
     * @type {string}
     * @memberof TablasWithRelations
     */
    'tipo'?: string;
    /**
     * 
     * @type {string}
     * @memberof TablasWithRelations
     */
    'isKey'?: string;
}
/**
 * 
 * @export
 * @interface Traducciones
 */
export interface Traducciones {
    /**
     * 
     * @type {number}
     * @memberof Traducciones
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Traducciones
     */
    'idiomaId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Traducciones
     */
    'clave'?: string;
    /**
     * 
     * @type {string}
     * @memberof Traducciones
     */
    'valor'?: string;
}
/**
 * 
 * @export
 * @interface TraduccionesFilter
 */
export interface TraduccionesFilter {
    /**
     * 
     * @type {number}
     * @memberof TraduccionesFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof TraduccionesFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof TraduccionesFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof TraduccionesFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof TraduccionesFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface TraduccionesFilter1
 */
export interface TraduccionesFilter1 {
    /**
     * 
     * @type {number}
     * @memberof TraduccionesFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof TraduccionesFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof TraduccionesFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof TraduccionesFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof TraduccionesFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof TraduccionesFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<Traducciones>, schemaOptions: { partial: true })
 * @export
 * @interface TraduccionesPartial
 */
export interface TraduccionesPartial {
    /**
     * 
     * @type {number}
     * @memberof TraduccionesPartial
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TraduccionesPartial
     */
    'idiomaId'?: string;
    /**
     * 
     * @type {string}
     * @memberof TraduccionesPartial
     */
    'clave'?: string;
    /**
     * 
     * @type {string}
     * @memberof TraduccionesPartial
     */
    'valor'?: string;
}
/**
 * (tsType: TraduccionesWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface TraduccionesWithRelations
 */
export interface TraduccionesWithRelations {
    /**
     * 
     * @type {number}
     * @memberof TraduccionesWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TraduccionesWithRelations
     */
    'idiomaId'?: string;
    /**
     * 
     * @type {string}
     * @memberof TraduccionesWithRelations
     */
    'clave'?: string;
    /**
     * 
     * @type {string}
     * @memberof TraduccionesWithRelations
     */
    'valor'?: string;
}
/**
 * 
 * @export
 * @interface Usuarios
 */
export interface Usuarios {
    /**
     * 
     * @type {number}
     * @memberof Usuarios
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Usuarios
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof Usuarios
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof Usuarios
     */
    'mail'?: string;
    /**
     * 
     * @type {string}
     * @memberof Usuarios
     */
    'activoSn'?: string;
    /**
     * 
     * @type {string}
     * @memberof Usuarios
     */
    'telefono'?: string;
    /**
     * 
     * @type {string}
     * @memberof Usuarios
     */
    'avatar'?: string;
    /**
     * 
     * @type {string}
     * @memberof Usuarios
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof Usuarios
     */
    'role'?: string;
    /**
     * 
     * @type {number}
     * @memberof Usuarios
     */
    'rolesId'?: number;
}
/**
 * 
 * @export
 * @interface UsuariosFilter
 */
export interface UsuariosFilter {
    /**
     * 
     * @type {number}
     * @memberof UsuariosFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuariosFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuariosFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof UsuariosFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof UsuariosFilter
     */
    'fields'?: object | Set<string>;
    /**
     * 
     * @type {Array<UsuariosIncludeFilterItems | string>}
     * @memberof UsuariosFilter
     */
    'include'?: Array<UsuariosIncludeFilterItems | string>;
}
/**
 * 
 * @export
 * @interface UsuariosFilter1
 */
export interface UsuariosFilter1 {
    /**
     * 
     * @type {number}
     * @memberof UsuariosFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuariosFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuariosFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof UsuariosFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof UsuariosFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof UsuariosFilter1
     */
    'fields'?: object | Set<string>;
    /**
     * 
     * @type {Array<UsuariosIncludeFilterItems | string>}
     * @memberof UsuariosFilter1
     */
    'include'?: Array<UsuariosIncludeFilterItems | string>;
}
/**
 * 
 * @export
 * @interface UsuariosIncludeFilterItems
 */
export interface UsuariosIncludeFilterItems {
    /**
     * 
     * @type {string}
     * @memberof UsuariosIncludeFilterItems
     */
    'relation'?: string;
    /**
     * 
     * @type {UsuariosScopeFilter}
     * @memberof UsuariosIncludeFilterItems
     */
    'scope'?: UsuariosScopeFilter;
}
/**
 * (tsType: Partial<Usuarios>, schemaOptions: { partial: true })
 * @export
 * @interface UsuariosPartial
 */
export interface UsuariosPartial {
    /**
     * 
     * @type {number}
     * @memberof UsuariosPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuariosPartial
     */
    'empresaId'?: number;
    /**
     * 
     * @type {string}
     * @memberof UsuariosPartial
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsuariosPartial
     */
    'mail'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsuariosPartial
     */
    'activoSn'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsuariosPartial
     */
    'telefono'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsuariosPartial
     */
    'avatar'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsuariosPartial
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsuariosPartial
     */
    'role'?: string;
    /**
     * 
     * @type {number}
     * @memberof UsuariosPartial
     */
    'rolesId'?: number;
}
/**
 * 
 * @export
 * @interface UsuariosScopeFilter
 */
export interface UsuariosScopeFilter {
    /**
     * 
     * @type {number}
     * @memberof UsuariosScopeFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuariosScopeFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuariosScopeFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof UsuariosScopeFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof UsuariosScopeFilter
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {any | Set<string>}
     * @memberof UsuariosScopeFilter
     */
    'fields'?: any | Set<string>;
    /**
     * 
     * @type {Array<{ [key: string]: object; }>}
     * @memberof UsuariosScopeFilter
     */
    'include'?: Array<{ [key: string]: object; }>;
}
/**
 * (tsType: UsuariosWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface UsuariosWithRelations
 */
export interface UsuariosWithRelations {
    /**
     * 
     * @type {number}
     * @memberof UsuariosWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuariosWithRelations
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof UsuariosWithRelations
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsuariosWithRelations
     */
    'mail'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsuariosWithRelations
     */
    'activoSn'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsuariosWithRelations
     */
    'telefono'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsuariosWithRelations
     */
    'avatar'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsuariosWithRelations
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsuariosWithRelations
     */
    'role'?: string;
    /**
     * 
     * @type {number}
     * @memberof UsuariosWithRelations
     */
    'rolesId'?: number;
    /**
     * 
     * @type {RolesWithRelations}
     * @memberof UsuariosWithRelations
     */
    'roles'?: RolesWithRelations;
}

/**
 * AecocControllerApi - axios parameter creator
 * @export
 */
export const AecocControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Aecoc} [aecoc] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aecocControllerEnviarAECOC: async (aecoc?: Aecoc, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/enviarAECOC`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(aecoc, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AecocControllerApi - functional programming interface
 * @export
 */
export const AecocControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AecocControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Aecoc} [aecoc] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aecocControllerEnviarAECOC(aecoc?: Aecoc, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Aecoc>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aecocControllerEnviarAECOC(aecoc, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AecocControllerApi - factory interface
 * @export
 */
export const AecocControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AecocControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {Aecoc} [aecoc] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aecocControllerEnviarAECOC(aecoc?: Aecoc, options?: any): AxiosPromise<Aecoc> {
            return localVarFp.aecocControllerEnviarAECOC(aecoc, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AecocControllerApi - object-oriented interface
 * @export
 * @class AecocControllerApi
 * @extends {BaseAPI}
 */
export class AecocControllerApi extends BaseAPI {
    /**
     * 
     * @param {Aecoc} [aecoc] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AecocControllerApi
     */
    public aecocControllerEnviarAECOC(aecoc?: Aecoc, options?: AxiosRequestConfig) {
        return AecocControllerApiFp(this.configuration).aecocControllerEnviarAECOC(aecoc, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AtributosControllerApi - axios parameter creator
 * @export
 */
export const AtributosControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atributosControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/atributos/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewAtributos} [newAtributos] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atributosControllerCreate: async (newAtributos?: NewAtributos, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/atributos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newAtributos, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atributosControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('atributosControllerDeleteById', 'id', id)
            const localVarPath = `/atributos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AtributosFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atributosControllerFind: async (filter?: AtributosFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/atributos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {AtributosFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atributosControllerFindById: async (id: number, filter?: AtributosFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('atributosControllerFindById', 'id', id)
            const localVarPath = `/atributos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Atributos} [atributos] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atributosControllerReplaceById: async (id: number, atributos?: Atributos, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('atributosControllerReplaceById', 'id', id)
            const localVarPath = `/atributos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(atributos, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {AtributosPartial} [atributosPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atributosControllerUpdateAll: async (where?: { [key: string]: object; }, atributosPartial?: AtributosPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/atributos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(atributosPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {AtributosPartial} [atributosPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atributosControllerUpdateById: async (id: number, atributosPartial?: AtributosPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('atributosControllerUpdateById', 'id', id)
            const localVarPath = `/atributos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(atributosPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AtributosControllerApi - functional programming interface
 * @export
 */
export const AtributosControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AtributosControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async atributosControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.atributosControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewAtributos} [newAtributos] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async atributosControllerCreate(newAtributos?: NewAtributos, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Atributos>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.atributosControllerCreate(newAtributos, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async atributosControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.atributosControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {AtributosFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async atributosControllerFind(filter?: AtributosFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AtributosWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.atributosControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {AtributosFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async atributosControllerFindById(id: number, filter?: AtributosFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AtributosWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.atributosControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Atributos} [atributos] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async atributosControllerReplaceById(id: number, atributos?: Atributos, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.atributosControllerReplaceById(id, atributos, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {AtributosPartial} [atributosPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async atributosControllerUpdateAll(where?: { [key: string]: object; }, atributosPartial?: AtributosPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.atributosControllerUpdateAll(where, atributosPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {AtributosPartial} [atributosPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async atributosControllerUpdateById(id: number, atributosPartial?: AtributosPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.atributosControllerUpdateById(id, atributosPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AtributosControllerApi - factory interface
 * @export
 */
export const AtributosControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AtributosControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atributosControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.atributosControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewAtributos} [newAtributos] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atributosControllerCreate(newAtributos?: NewAtributos, options?: any): AxiosPromise<Atributos> {
            return localVarFp.atributosControllerCreate(newAtributos, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atributosControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.atributosControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AtributosFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atributosControllerFind(filter?: AtributosFilter1, options?: any): AxiosPromise<Array<AtributosWithRelations>> {
            return localVarFp.atributosControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {AtributosFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atributosControllerFindById(id: number, filter?: AtributosFilter, options?: any): AxiosPromise<AtributosWithRelations> {
            return localVarFp.atributosControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Atributos} [atributos] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atributosControllerReplaceById(id: number, atributos?: Atributos, options?: any): AxiosPromise<any> {
            return localVarFp.atributosControllerReplaceById(id, atributos, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {AtributosPartial} [atributosPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atributosControllerUpdateAll(where?: { [key: string]: object; }, atributosPartial?: AtributosPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.atributosControllerUpdateAll(where, atributosPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {AtributosPartial} [atributosPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atributosControllerUpdateById(id: number, atributosPartial?: AtributosPartial, options?: any): AxiosPromise<any> {
            return localVarFp.atributosControllerUpdateById(id, atributosPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AtributosControllerApi - object-oriented interface
 * @export
 * @class AtributosControllerApi
 * @extends {BaseAPI}
 */
export class AtributosControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AtributosControllerApi
     */
    public atributosControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return AtributosControllerApiFp(this.configuration).atributosControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewAtributos} [newAtributos] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AtributosControllerApi
     */
    public atributosControllerCreate(newAtributos?: NewAtributos, options?: AxiosRequestConfig) {
        return AtributosControllerApiFp(this.configuration).atributosControllerCreate(newAtributos, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AtributosControllerApi
     */
    public atributosControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return AtributosControllerApiFp(this.configuration).atributosControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AtributosFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AtributosControllerApi
     */
    public atributosControllerFind(filter?: AtributosFilter1, options?: AxiosRequestConfig) {
        return AtributosControllerApiFp(this.configuration).atributosControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {AtributosFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AtributosControllerApi
     */
    public atributosControllerFindById(id: number, filter?: AtributosFilter, options?: AxiosRequestConfig) {
        return AtributosControllerApiFp(this.configuration).atributosControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Atributos} [atributos] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AtributosControllerApi
     */
    public atributosControllerReplaceById(id: number, atributos?: Atributos, options?: AxiosRequestConfig) {
        return AtributosControllerApiFp(this.configuration).atributosControllerReplaceById(id, atributos, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {AtributosPartial} [atributosPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AtributosControllerApi
     */
    public atributosControllerUpdateAll(where?: { [key: string]: object; }, atributosPartial?: AtributosPartial, options?: AxiosRequestConfig) {
        return AtributosControllerApiFp(this.configuration).atributosControllerUpdateAll(where, atributosPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {AtributosPartial} [atributosPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AtributosControllerApi
     */
    public atributosControllerUpdateById(id: number, atributosPartial?: AtributosPartial, options?: AxiosRequestConfig) {
        return AtributosControllerApiFp(this.configuration).atributosControllerUpdateById(id, atributosPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AuthControllerApi - axios parameter creator
 * @export
 */
export const AuthControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {InlineObject} inlineObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin: async (inlineObject: InlineObject, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inlineObject' is not null or undefined
            assertParamExists('authControllerLogin', 'inlineObject', inlineObject)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerMe: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/usuarios/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {InlineObject1} inlineObject1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRefresh: async (inlineObject1: InlineObject1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inlineObject1' is not null or undefined
            assertParamExists('authControllerRefresh', 'inlineObject1', inlineObject1)
            const localVarPath = `/auth/refresh-token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject1, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {InlineObject4} inlineObject4 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRefreshLogin: async (inlineObject4: InlineObject4, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inlineObject4' is not null or undefined
            assertParamExists('authControllerRefreshLogin', 'inlineObject4', inlineObject4)
            const localVarPath = `/usuarios/refresh-login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject4, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Usuarios} [usuarios] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSignup: async (usuarios?: Usuarios, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/signup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usuarios, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthControllerApi - functional programming interface
 * @export
 */
export const AuthControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {InlineObject} inlineObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerLogin(inlineObject: InlineObject, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerLogin(inlineObject, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerMe(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsuariosWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerMe(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {InlineObject1} inlineObject1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerRefresh(inlineObject1: InlineObject1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerRefresh(inlineObject1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {InlineObject4} inlineObject4 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerRefreshLogin(inlineObject4: InlineObject4, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerRefreshLogin(inlineObject4, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Usuarios} [usuarios] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerSignup(usuarios?: Usuarios, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Usuarios>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerSignup(usuarios, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthControllerApi - factory interface
 * @export
 */
export const AuthControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {InlineObject} inlineObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin(inlineObject: InlineObject, options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.authControllerLogin(inlineObject, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerMe(options?: any): AxiosPromise<UsuariosWithRelations> {
            return localVarFp.authControllerMe(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {InlineObject1} inlineObject1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRefresh(inlineObject1: InlineObject1, options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.authControllerRefresh(inlineObject1, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {InlineObject4} inlineObject4 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRefreshLogin(inlineObject4: InlineObject4, options?: any): AxiosPromise<InlineResponse2002> {
            return localVarFp.authControllerRefreshLogin(inlineObject4, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Usuarios} [usuarios] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSignup(usuarios?: Usuarios, options?: any): AxiosPromise<Usuarios> {
            return localVarFp.authControllerSignup(usuarios, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthControllerApi - object-oriented interface
 * @export
 * @class AuthControllerApi
 * @extends {BaseAPI}
 */
export class AuthControllerApi extends BaseAPI {
    /**
     * 
     * @param {InlineObject} inlineObject 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApi
     */
    public authControllerLogin(inlineObject: InlineObject, options?: AxiosRequestConfig) {
        return AuthControllerApiFp(this.configuration).authControllerLogin(inlineObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApi
     */
    public authControllerMe(options?: AxiosRequestConfig) {
        return AuthControllerApiFp(this.configuration).authControllerMe(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {InlineObject1} inlineObject1 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApi
     */
    public authControllerRefresh(inlineObject1: InlineObject1, options?: AxiosRequestConfig) {
        return AuthControllerApiFp(this.configuration).authControllerRefresh(inlineObject1, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {InlineObject4} inlineObject4 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApi
     */
    public authControllerRefreshLogin(inlineObject4: InlineObject4, options?: AxiosRequestConfig) {
        return AuthControllerApiFp(this.configuration).authControllerRefreshLogin(inlineObject4, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Usuarios} [usuarios] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApi
     */
    public authControllerSignup(usuarios?: Usuarios, options?: AxiosRequestConfig) {
        return AuthControllerApiFp(this.configuration).authControllerSignup(usuarios, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CategoriasControllerApi - axios parameter creator
 * @export
 */
export const CategoriasControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriasControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/categorias/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewCategorias} [newCategorias] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriasControllerCreate: async (newCategorias?: NewCategorias, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/categorias`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newCategorias, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriasControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('categoriasControllerDeleteById', 'id', id)
            const localVarPath = `/categorias/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CategoriasFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriasControllerFind: async (filter?: CategoriasFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/categorias`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {CategoriasFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriasControllerFindById: async (id: number, filter?: CategoriasFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('categoriasControllerFindById', 'id', id)
            const localVarPath = `/categorias/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Categorias} [categorias] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriasControllerReplaceById: async (id: number, categorias?: Categorias, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('categoriasControllerReplaceById', 'id', id)
            const localVarPath = `/categorias/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(categorias, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {CategoriasPartial} [categoriasPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriasControllerUpdateAll: async (where?: { [key: string]: object; }, categoriasPartial?: CategoriasPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/categorias`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(categoriasPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {CategoriasPartial} [categoriasPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriasControllerUpdateById: async (id: number, categoriasPartial?: CategoriasPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('categoriasControllerUpdateById', 'id', id)
            const localVarPath = `/categorias/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(categoriasPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoriasControllerApi - functional programming interface
 * @export
 */
export const CategoriasControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoriasControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoriasControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoriasControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewCategorias} [newCategorias] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoriasControllerCreate(newCategorias?: NewCategorias, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Categorias>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoriasControllerCreate(newCategorias, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoriasControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoriasControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CategoriasFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoriasControllerFind(filter?: CategoriasFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CategoriasWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoriasControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {CategoriasFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoriasControllerFindById(id: number, filter?: CategoriasFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoriasWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoriasControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Categorias} [categorias] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoriasControllerReplaceById(id: number, categorias?: Categorias, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoriasControllerReplaceById(id, categorias, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {CategoriasPartial} [categoriasPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoriasControllerUpdateAll(where?: { [key: string]: object; }, categoriasPartial?: CategoriasPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoriasControllerUpdateAll(where, categoriasPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {CategoriasPartial} [categoriasPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoriasControllerUpdateById(id: number, categoriasPartial?: CategoriasPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoriasControllerUpdateById(id, categoriasPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CategoriasControllerApi - factory interface
 * @export
 */
export const CategoriasControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoriasControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriasControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.categoriasControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewCategorias} [newCategorias] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriasControllerCreate(newCategorias?: NewCategorias, options?: any): AxiosPromise<Categorias> {
            return localVarFp.categoriasControllerCreate(newCategorias, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriasControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.categoriasControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CategoriasFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriasControllerFind(filter?: CategoriasFilter1, options?: any): AxiosPromise<Array<CategoriasWithRelations>> {
            return localVarFp.categoriasControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {CategoriasFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriasControllerFindById(id: number, filter?: CategoriasFilter, options?: any): AxiosPromise<CategoriasWithRelations> {
            return localVarFp.categoriasControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Categorias} [categorias] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriasControllerReplaceById(id: number, categorias?: Categorias, options?: any): AxiosPromise<any> {
            return localVarFp.categoriasControllerReplaceById(id, categorias, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {CategoriasPartial} [categoriasPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriasControllerUpdateAll(where?: { [key: string]: object; }, categoriasPartial?: CategoriasPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.categoriasControllerUpdateAll(where, categoriasPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {CategoriasPartial} [categoriasPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriasControllerUpdateById(id: number, categoriasPartial?: CategoriasPartial, options?: any): AxiosPromise<any> {
            return localVarFp.categoriasControllerUpdateById(id, categoriasPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CategoriasControllerApi - object-oriented interface
 * @export
 * @class CategoriasControllerApi
 * @extends {BaseAPI}
 */
export class CategoriasControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriasControllerApi
     */
    public categoriasControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return CategoriasControllerApiFp(this.configuration).categoriasControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewCategorias} [newCategorias] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriasControllerApi
     */
    public categoriasControllerCreate(newCategorias?: NewCategorias, options?: AxiosRequestConfig) {
        return CategoriasControllerApiFp(this.configuration).categoriasControllerCreate(newCategorias, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriasControllerApi
     */
    public categoriasControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return CategoriasControllerApiFp(this.configuration).categoriasControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CategoriasFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriasControllerApi
     */
    public categoriasControllerFind(filter?: CategoriasFilter1, options?: AxiosRequestConfig) {
        return CategoriasControllerApiFp(this.configuration).categoriasControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {CategoriasFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriasControllerApi
     */
    public categoriasControllerFindById(id: number, filter?: CategoriasFilter, options?: AxiosRequestConfig) {
        return CategoriasControllerApiFp(this.configuration).categoriasControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Categorias} [categorias] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriasControllerApi
     */
    public categoriasControllerReplaceById(id: number, categorias?: Categorias, options?: AxiosRequestConfig) {
        return CategoriasControllerApiFp(this.configuration).categoriasControllerReplaceById(id, categorias, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {CategoriasPartial} [categoriasPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriasControllerApi
     */
    public categoriasControllerUpdateAll(where?: { [key: string]: object; }, categoriasPartial?: CategoriasPartial, options?: AxiosRequestConfig) {
        return CategoriasControllerApiFp(this.configuration).categoriasControllerUpdateAll(where, categoriasPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {CategoriasPartial} [categoriasPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriasControllerApi
     */
    public categoriasControllerUpdateById(id: number, categoriasPartial?: CategoriasPartial, options?: AxiosRequestConfig) {
        return CategoriasControllerApiFp(this.configuration).categoriasControllerUpdateById(id, categoriasPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * EmpresasControllerApi - axios parameter creator
 * @export
 */
export const EmpresasControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresasControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/empresas/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewEmpresas} [newEmpresas] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresasControllerCreate: async (newEmpresas?: NewEmpresas, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/empresas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newEmpresas, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresasControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('empresasControllerDeleteById', 'id', id)
            const localVarPath = `/empresas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EmpresasFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresasControllerFind: async (filter?: EmpresasFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/empresas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {EmpresasFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresasControllerFindById: async (id: number, filter?: EmpresasFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('empresasControllerFindById', 'id', id)
            const localVarPath = `/empresas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Empresas} [empresas] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresasControllerReplaceById: async (id: number, empresas?: Empresas, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('empresasControllerReplaceById', 'id', id)
            const localVarPath = `/empresas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(empresas, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {EmpresasPartial} [empresasPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresasControllerUpdateAll: async (where?: { [key: string]: object; }, empresasPartial?: EmpresasPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/empresas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(empresasPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {EmpresasPartial} [empresasPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresasControllerUpdateById: async (id: number, empresasPartial?: EmpresasPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('empresasControllerUpdateById', 'id', id)
            const localVarPath = `/empresas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(empresasPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmpresasControllerApi - functional programming interface
 * @export
 */
export const EmpresasControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmpresasControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async empresasControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.empresasControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewEmpresas} [newEmpresas] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async empresasControllerCreate(newEmpresas?: NewEmpresas, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Empresas>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.empresasControllerCreate(newEmpresas, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async empresasControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.empresasControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {EmpresasFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async empresasControllerFind(filter?: EmpresasFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EmpresasWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.empresasControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {EmpresasFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async empresasControllerFindById(id: number, filter?: EmpresasFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmpresasWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.empresasControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Empresas} [empresas] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async empresasControllerReplaceById(id: number, empresas?: Empresas, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.empresasControllerReplaceById(id, empresas, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {EmpresasPartial} [empresasPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async empresasControllerUpdateAll(where?: { [key: string]: object; }, empresasPartial?: EmpresasPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.empresasControllerUpdateAll(where, empresasPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {EmpresasPartial} [empresasPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async empresasControllerUpdateById(id: number, empresasPartial?: EmpresasPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.empresasControllerUpdateById(id, empresasPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmpresasControllerApi - factory interface
 * @export
 */
export const EmpresasControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmpresasControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresasControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.empresasControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewEmpresas} [newEmpresas] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresasControllerCreate(newEmpresas?: NewEmpresas, options?: any): AxiosPromise<Empresas> {
            return localVarFp.empresasControllerCreate(newEmpresas, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresasControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.empresasControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EmpresasFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresasControllerFind(filter?: EmpresasFilter1, options?: any): AxiosPromise<Array<EmpresasWithRelations>> {
            return localVarFp.empresasControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {EmpresasFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresasControllerFindById(id: number, filter?: EmpresasFilter, options?: any): AxiosPromise<EmpresasWithRelations> {
            return localVarFp.empresasControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Empresas} [empresas] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresasControllerReplaceById(id: number, empresas?: Empresas, options?: any): AxiosPromise<any> {
            return localVarFp.empresasControllerReplaceById(id, empresas, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {EmpresasPartial} [empresasPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresasControllerUpdateAll(where?: { [key: string]: object; }, empresasPartial?: EmpresasPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.empresasControllerUpdateAll(where, empresasPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {EmpresasPartial} [empresasPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresasControllerUpdateById(id: number, empresasPartial?: EmpresasPartial, options?: any): AxiosPromise<any> {
            return localVarFp.empresasControllerUpdateById(id, empresasPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EmpresasControllerApi - object-oriented interface
 * @export
 * @class EmpresasControllerApi
 * @extends {BaseAPI}
 */
export class EmpresasControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmpresasControllerApi
     */
    public empresasControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return EmpresasControllerApiFp(this.configuration).empresasControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewEmpresas} [newEmpresas] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmpresasControllerApi
     */
    public empresasControllerCreate(newEmpresas?: NewEmpresas, options?: AxiosRequestConfig) {
        return EmpresasControllerApiFp(this.configuration).empresasControllerCreate(newEmpresas, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmpresasControllerApi
     */
    public empresasControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return EmpresasControllerApiFp(this.configuration).empresasControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EmpresasFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmpresasControllerApi
     */
    public empresasControllerFind(filter?: EmpresasFilter1, options?: AxiosRequestConfig) {
        return EmpresasControllerApiFp(this.configuration).empresasControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {EmpresasFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmpresasControllerApi
     */
    public empresasControllerFindById(id: number, filter?: EmpresasFilter, options?: AxiosRequestConfig) {
        return EmpresasControllerApiFp(this.configuration).empresasControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Empresas} [empresas] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmpresasControllerApi
     */
    public empresasControllerReplaceById(id: number, empresas?: Empresas, options?: AxiosRequestConfig) {
        return EmpresasControllerApiFp(this.configuration).empresasControllerReplaceById(id, empresas, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {EmpresasPartial} [empresasPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmpresasControllerApi
     */
    public empresasControllerUpdateAll(where?: { [key: string]: object; }, empresasPartial?: EmpresasPartial, options?: AxiosRequestConfig) {
        return EmpresasControllerApiFp(this.configuration).empresasControllerUpdateAll(where, empresasPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {EmpresasPartial} [empresasPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmpresasControllerApi
     */
    public empresasControllerUpdateById(id: number, empresasPartial?: EmpresasPartial, options?: AxiosRequestConfig) {
        return EmpresasControllerApiFp(this.configuration).empresasControllerUpdateById(id, empresasPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FileDownloadControllerApi - axios parameter creator
 * @export
 */
export const FileDownloadControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} filename 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileDownloadControllerDownloadFile: async (filename: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'filename' is not null or undefined
            assertParamExists('fileDownloadControllerDownloadFile', 'filename', filename)
            const localVarPath = `/files-download/{filename}`
                .replace(`{${"filename"}}`, encodeURIComponent(String(filename)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileDownloadControllerListFiles: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/files-download`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FileDownloadControllerApi - functional programming interface
 * @export
 */
export const FileDownloadControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FileDownloadControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} filename 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fileDownloadControllerDownloadFile(filename: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fileDownloadControllerDownloadFile(filename, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fileDownloadControllerListFiles(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fileDownloadControllerListFiles(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FileDownloadControllerApi - factory interface
 * @export
 */
export const FileDownloadControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FileDownloadControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} filename 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileDownloadControllerDownloadFile(filename: string, options?: any): AxiosPromise<any> {
            return localVarFp.fileDownloadControllerDownloadFile(filename, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileDownloadControllerListFiles(options?: any): AxiosPromise<Array<string>> {
            return localVarFp.fileDownloadControllerListFiles(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FileDownloadControllerApi - object-oriented interface
 * @export
 * @class FileDownloadControllerApi
 * @extends {BaseAPI}
 */
export class FileDownloadControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} filename 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileDownloadControllerApi
     */
    public fileDownloadControllerDownloadFile(filename: string, options?: AxiosRequestConfig) {
        return FileDownloadControllerApiFp(this.configuration).fileDownloadControllerDownloadFile(filename, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileDownloadControllerApi
     */
    public fileDownloadControllerListFiles(options?: AxiosRequestConfig) {
        return FileDownloadControllerApiFp(this.configuration).fileDownloadControllerListFiles(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FileUploadControllerApi - axios parameter creator
 * @export
 */
export const FileUploadControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} folderPathDir 
         * @param {string} fileName 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileUploadControllerFileUpload: async (folderPathDir: string, fileName: string, file?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderPathDir' is not null or undefined
            assertParamExists('fileUploadControllerFileUpload', 'folderPathDir', folderPathDir)
            // verify required parameter 'fileName' is not null or undefined
            assertParamExists('fileUploadControllerFileUpload', 'fileName', fileName)
            const localVarPath = `/files-upload/{folderPathDir}/{fileName}`
                .replace(`{${"folderPathDir"}}`, encodeURIComponent(String(folderPathDir)))
                .replace(`{${"fileName"}}`, encodeURIComponent(String(fileName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} folderPathDir 
         * @param {string} fileName 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileUploadControllerImageUpload: async (folderPathDir: string, fileName: string, file?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderPathDir' is not null or undefined
            assertParamExists('fileUploadControllerImageUpload', 'folderPathDir', folderPathDir)
            // verify required parameter 'fileName' is not null or undefined
            assertParamExists('fileUploadControllerImageUpload', 'fileName', fileName)
            const localVarPath = `/images-upload/{folderPathDir}/{fileName}`
                .replace(`{${"folderPathDir"}}`, encodeURIComponent(String(folderPathDir)))
                .replace(`{${"fileName"}}`, encodeURIComponent(String(fileName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FileUploadControllerApi - functional programming interface
 * @export
 */
export const FileUploadControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FileUploadControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} folderPathDir 
         * @param {string} fileName 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fileUploadControllerFileUpload(folderPathDir: string, fileName: string, file?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fileUploadControllerFileUpload(folderPathDir, fileName, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} folderPathDir 
         * @param {string} fileName 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fileUploadControllerImageUpload(folderPathDir: string, fileName: string, file?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fileUploadControllerImageUpload(folderPathDir, fileName, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FileUploadControllerApi - factory interface
 * @export
 */
export const FileUploadControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FileUploadControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} folderPathDir 
         * @param {string} fileName 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileUploadControllerFileUpload(folderPathDir: string, fileName: string, file?: any, options?: any): AxiosPromise<object> {
            return localVarFp.fileUploadControllerFileUpload(folderPathDir, fileName, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} folderPathDir 
         * @param {string} fileName 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileUploadControllerImageUpload(folderPathDir: string, fileName: string, file?: any, options?: any): AxiosPromise<object> {
            return localVarFp.fileUploadControllerImageUpload(folderPathDir, fileName, file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FileUploadControllerApi - object-oriented interface
 * @export
 * @class FileUploadControllerApi
 * @extends {BaseAPI}
 */
export class FileUploadControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} folderPathDir 
     * @param {string} fileName 
     * @param {any} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileUploadControllerApi
     */
    public fileUploadControllerFileUpload(folderPathDir: string, fileName: string, file?: any, options?: AxiosRequestConfig) {
        return FileUploadControllerApiFp(this.configuration).fileUploadControllerFileUpload(folderPathDir, fileName, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} folderPathDir 
     * @param {string} fileName 
     * @param {any} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileUploadControllerApi
     */
    public fileUploadControllerImageUpload(folderPathDir: string, fileName: string, file?: any, options?: AxiosRequestConfig) {
        return FileUploadControllerApiFp(this.configuration).fileUploadControllerImageUpload(folderPathDir, fileName, file, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FilesControllerApi - axios parameter creator
 * @export
 */
export const FilesControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/files/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewFiles} [newFiles] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesControllerCreate: async (newFiles?: NewFiles, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/files`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newFiles, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('filesControllerDeleteById', 'id', id)
            const localVarPath = `/files/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FilesFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesControllerFind: async (filter?: FilesFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/files`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {FilesFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesControllerFindById: async (id: number, filter?: FilesFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('filesControllerFindById', 'id', id)
            const localVarPath = `/files/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Files} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesControllerReplaceById: async (id: number, files?: Files, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('filesControllerReplaceById', 'id', id)
            const localVarPath = `/files/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(files, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {FilesPartial} [filesPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesControllerUpdateAll: async (where?: { [key: string]: object; }, filesPartial?: FilesPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/files`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(filesPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {FilesPartial} [filesPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesControllerUpdateById: async (id: number, filesPartial?: FilesPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('filesControllerUpdateById', 'id', id)
            const localVarPath = `/files/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(filesPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FilesControllerApi - functional programming interface
 * @export
 */
export const FilesControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FilesControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewFiles} [newFiles] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesControllerCreate(newFiles?: NewFiles, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Files>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesControllerCreate(newFiles, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {FilesFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesControllerFind(filter?: FilesFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FilesWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {FilesFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesControllerFindById(id: number, filter?: FilesFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FilesWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Files} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesControllerReplaceById(id: number, files?: Files, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesControllerReplaceById(id, files, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {FilesPartial} [filesPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesControllerUpdateAll(where?: { [key: string]: object; }, filesPartial?: FilesPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesControllerUpdateAll(where, filesPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {FilesPartial} [filesPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesControllerUpdateById(id: number, filesPartial?: FilesPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesControllerUpdateById(id, filesPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FilesControllerApi - factory interface
 * @export
 */
export const FilesControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FilesControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.filesControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewFiles} [newFiles] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesControllerCreate(newFiles?: NewFiles, options?: any): AxiosPromise<Files> {
            return localVarFp.filesControllerCreate(newFiles, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.filesControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FilesFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesControllerFind(filter?: FilesFilter1, options?: any): AxiosPromise<Array<FilesWithRelations>> {
            return localVarFp.filesControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {FilesFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesControllerFindById(id: number, filter?: FilesFilter, options?: any): AxiosPromise<FilesWithRelations> {
            return localVarFp.filesControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Files} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesControllerReplaceById(id: number, files?: Files, options?: any): AxiosPromise<any> {
            return localVarFp.filesControllerReplaceById(id, files, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {FilesPartial} [filesPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesControllerUpdateAll(where?: { [key: string]: object; }, filesPartial?: FilesPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.filesControllerUpdateAll(where, filesPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {FilesPartial} [filesPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesControllerUpdateById(id: number, filesPartial?: FilesPartial, options?: any): AxiosPromise<any> {
            return localVarFp.filesControllerUpdateById(id, filesPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FilesControllerApi - object-oriented interface
 * @export
 * @class FilesControllerApi
 * @extends {BaseAPI}
 */
export class FilesControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesControllerApi
     */
    public filesControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return FilesControllerApiFp(this.configuration).filesControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewFiles} [newFiles] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesControllerApi
     */
    public filesControllerCreate(newFiles?: NewFiles, options?: AxiosRequestConfig) {
        return FilesControllerApiFp(this.configuration).filesControllerCreate(newFiles, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesControllerApi
     */
    public filesControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return FilesControllerApiFp(this.configuration).filesControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FilesFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesControllerApi
     */
    public filesControllerFind(filter?: FilesFilter1, options?: AxiosRequestConfig) {
        return FilesControllerApiFp(this.configuration).filesControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {FilesFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesControllerApi
     */
    public filesControllerFindById(id: number, filter?: FilesFilter, options?: AxiosRequestConfig) {
        return FilesControllerApiFp(this.configuration).filesControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Files} [files] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesControllerApi
     */
    public filesControllerReplaceById(id: number, files?: Files, options?: AxiosRequestConfig) {
        return FilesControllerApiFp(this.configuration).filesControllerReplaceById(id, files, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {FilesPartial} [filesPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesControllerApi
     */
    public filesControllerUpdateAll(where?: { [key: string]: object; }, filesPartial?: FilesPartial, options?: AxiosRequestConfig) {
        return FilesControllerApiFp(this.configuration).filesControllerUpdateAll(where, filesPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {FilesPartial} [filesPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesControllerApi
     */
    public filesControllerUpdateById(id: number, filesPartial?: FilesPartial, options?: AxiosRequestConfig) {
        return FilesControllerApiFp(this.configuration).filesControllerUpdateById(id, filesPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GruposAtributosControllerApi - axios parameter creator
 * @export
 */
export const GruposAtributosControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gruposAtributosControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/grupos-atributos/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewGruposAtributos} [newGruposAtributos] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gruposAtributosControllerCreate: async (newGruposAtributos?: NewGruposAtributos, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/grupos-atributos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newGruposAtributos, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gruposAtributosControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('gruposAtributosControllerDeleteById', 'id', id)
            const localVarPath = `/grupos-atributos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GruposAtributosFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gruposAtributosControllerFind: async (filter?: GruposAtributosFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/grupos-atributos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {GruposAtributosFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gruposAtributosControllerFindById: async (id: number, filter?: GruposAtributosFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('gruposAtributosControllerFindById', 'id', id)
            const localVarPath = `/grupos-atributos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {GruposAtributos} [gruposAtributos] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gruposAtributosControllerReplaceById: async (id: number, gruposAtributos?: GruposAtributos, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('gruposAtributosControllerReplaceById', 'id', id)
            const localVarPath = `/grupos-atributos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(gruposAtributos, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {GruposAtributosPartial} [gruposAtributosPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gruposAtributosControllerUpdateAll: async (where?: { [key: string]: object; }, gruposAtributosPartial?: GruposAtributosPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/grupos-atributos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(gruposAtributosPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {GruposAtributosPartial} [gruposAtributosPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gruposAtributosControllerUpdateById: async (id: number, gruposAtributosPartial?: GruposAtributosPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('gruposAtributosControllerUpdateById', 'id', id)
            const localVarPath = `/grupos-atributos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(gruposAtributosPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GruposAtributosControllerApi - functional programming interface
 * @export
 */
export const GruposAtributosControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GruposAtributosControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gruposAtributosControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gruposAtributosControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewGruposAtributos} [newGruposAtributos] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gruposAtributosControllerCreate(newGruposAtributos?: NewGruposAtributos, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GruposAtributos>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gruposAtributosControllerCreate(newGruposAtributos, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gruposAtributosControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gruposAtributosControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {GruposAtributosFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gruposAtributosControllerFind(filter?: GruposAtributosFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GruposAtributosWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gruposAtributosControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {GruposAtributosFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gruposAtributosControllerFindById(id: number, filter?: GruposAtributosFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GruposAtributosWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gruposAtributosControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {GruposAtributos} [gruposAtributos] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gruposAtributosControllerReplaceById(id: number, gruposAtributos?: GruposAtributos, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gruposAtributosControllerReplaceById(id, gruposAtributos, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {GruposAtributosPartial} [gruposAtributosPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gruposAtributosControllerUpdateAll(where?: { [key: string]: object; }, gruposAtributosPartial?: GruposAtributosPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gruposAtributosControllerUpdateAll(where, gruposAtributosPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {GruposAtributosPartial} [gruposAtributosPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gruposAtributosControllerUpdateById(id: number, gruposAtributosPartial?: GruposAtributosPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gruposAtributosControllerUpdateById(id, gruposAtributosPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GruposAtributosControllerApi - factory interface
 * @export
 */
export const GruposAtributosControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GruposAtributosControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gruposAtributosControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.gruposAtributosControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewGruposAtributos} [newGruposAtributos] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gruposAtributosControllerCreate(newGruposAtributos?: NewGruposAtributos, options?: any): AxiosPromise<GruposAtributos> {
            return localVarFp.gruposAtributosControllerCreate(newGruposAtributos, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gruposAtributosControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.gruposAtributosControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GruposAtributosFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gruposAtributosControllerFind(filter?: GruposAtributosFilter1, options?: any): AxiosPromise<Array<GruposAtributosWithRelations>> {
            return localVarFp.gruposAtributosControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {GruposAtributosFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gruposAtributosControllerFindById(id: number, filter?: GruposAtributosFilter, options?: any): AxiosPromise<GruposAtributosWithRelations> {
            return localVarFp.gruposAtributosControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {GruposAtributos} [gruposAtributos] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gruposAtributosControllerReplaceById(id: number, gruposAtributos?: GruposAtributos, options?: any): AxiosPromise<any> {
            return localVarFp.gruposAtributosControllerReplaceById(id, gruposAtributos, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {GruposAtributosPartial} [gruposAtributosPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gruposAtributosControllerUpdateAll(where?: { [key: string]: object; }, gruposAtributosPartial?: GruposAtributosPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.gruposAtributosControllerUpdateAll(where, gruposAtributosPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {GruposAtributosPartial} [gruposAtributosPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gruposAtributosControllerUpdateById(id: number, gruposAtributosPartial?: GruposAtributosPartial, options?: any): AxiosPromise<any> {
            return localVarFp.gruposAtributosControllerUpdateById(id, gruposAtributosPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GruposAtributosControllerApi - object-oriented interface
 * @export
 * @class GruposAtributosControllerApi
 * @extends {BaseAPI}
 */
export class GruposAtributosControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GruposAtributosControllerApi
     */
    public gruposAtributosControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return GruposAtributosControllerApiFp(this.configuration).gruposAtributosControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewGruposAtributos} [newGruposAtributos] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GruposAtributosControllerApi
     */
    public gruposAtributosControllerCreate(newGruposAtributos?: NewGruposAtributos, options?: AxiosRequestConfig) {
        return GruposAtributosControllerApiFp(this.configuration).gruposAtributosControllerCreate(newGruposAtributos, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GruposAtributosControllerApi
     */
    public gruposAtributosControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return GruposAtributosControllerApiFp(this.configuration).gruposAtributosControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GruposAtributosFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GruposAtributosControllerApi
     */
    public gruposAtributosControllerFind(filter?: GruposAtributosFilter1, options?: AxiosRequestConfig) {
        return GruposAtributosControllerApiFp(this.configuration).gruposAtributosControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {GruposAtributosFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GruposAtributosControllerApi
     */
    public gruposAtributosControllerFindById(id: number, filter?: GruposAtributosFilter, options?: AxiosRequestConfig) {
        return GruposAtributosControllerApiFp(this.configuration).gruposAtributosControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {GruposAtributos} [gruposAtributos] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GruposAtributosControllerApi
     */
    public gruposAtributosControllerReplaceById(id: number, gruposAtributos?: GruposAtributos, options?: AxiosRequestConfig) {
        return GruposAtributosControllerApiFp(this.configuration).gruposAtributosControllerReplaceById(id, gruposAtributos, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {GruposAtributosPartial} [gruposAtributosPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GruposAtributosControllerApi
     */
    public gruposAtributosControllerUpdateAll(where?: { [key: string]: object; }, gruposAtributosPartial?: GruposAtributosPartial, options?: AxiosRequestConfig) {
        return GruposAtributosControllerApiFp(this.configuration).gruposAtributosControllerUpdateAll(where, gruposAtributosPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {GruposAtributosPartial} [gruposAtributosPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GruposAtributosControllerApi
     */
    public gruposAtributosControllerUpdateById(id: number, gruposAtributosPartial?: GruposAtributosPartial, options?: AxiosRequestConfig) {
        return GruposAtributosControllerApiFp(this.configuration).gruposAtributosControllerUpdateById(id, gruposAtributosPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * IdiomasControllerApi - axios parameter creator
 * @export
 */
export const IdiomasControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomasControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/idiomas/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewIdiomas} [newIdiomas] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomasControllerCreate: async (newIdiomas?: NewIdiomas, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/idiomas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newIdiomas, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomasControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('idiomasControllerDeleteById', 'id', id)
            const localVarPath = `/idiomas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IdiomasFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomasControllerFind: async (filter?: IdiomasFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/idiomas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {IdiomasFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomasControllerFindById: async (id: number, filter?: IdiomasFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('idiomasControllerFindById', 'id', id)
            const localVarPath = `/idiomas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Idiomas} [idiomas] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomasControllerReplaceById: async (id: number, idiomas?: Idiomas, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('idiomasControllerReplaceById', 'id', id)
            const localVarPath = `/idiomas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(idiomas, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {IdiomasPartial} [idiomasPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomasControllerUpdateAll: async (where?: { [key: string]: object; }, idiomasPartial?: IdiomasPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/idiomas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(idiomasPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {IdiomasPartial} [idiomasPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomasControllerUpdateById: async (id: number, idiomasPartial?: IdiomasPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('idiomasControllerUpdateById', 'id', id)
            const localVarPath = `/idiomas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(idiomasPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IdiomasControllerApi - functional programming interface
 * @export
 */
export const IdiomasControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IdiomasControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async idiomasControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.idiomasControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewIdiomas} [newIdiomas] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async idiomasControllerCreate(newIdiomas?: NewIdiomas, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Idiomas>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.idiomasControllerCreate(newIdiomas, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async idiomasControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.idiomasControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {IdiomasFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async idiomasControllerFind(filter?: IdiomasFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IdiomasWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.idiomasControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {IdiomasFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async idiomasControllerFindById(id: number, filter?: IdiomasFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdiomasWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.idiomasControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Idiomas} [idiomas] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async idiomasControllerReplaceById(id: number, idiomas?: Idiomas, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.idiomasControllerReplaceById(id, idiomas, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {IdiomasPartial} [idiomasPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async idiomasControllerUpdateAll(where?: { [key: string]: object; }, idiomasPartial?: IdiomasPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.idiomasControllerUpdateAll(where, idiomasPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {IdiomasPartial} [idiomasPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async idiomasControllerUpdateById(id: number, idiomasPartial?: IdiomasPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.idiomasControllerUpdateById(id, idiomasPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * IdiomasControllerApi - factory interface
 * @export
 */
export const IdiomasControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IdiomasControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomasControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.idiomasControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewIdiomas} [newIdiomas] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomasControllerCreate(newIdiomas?: NewIdiomas, options?: any): AxiosPromise<Idiomas> {
            return localVarFp.idiomasControllerCreate(newIdiomas, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomasControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.idiomasControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IdiomasFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomasControllerFind(filter?: IdiomasFilter1, options?: any): AxiosPromise<Array<IdiomasWithRelations>> {
            return localVarFp.idiomasControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {IdiomasFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomasControllerFindById(id: number, filter?: IdiomasFilter, options?: any): AxiosPromise<IdiomasWithRelations> {
            return localVarFp.idiomasControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Idiomas} [idiomas] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomasControllerReplaceById(id: number, idiomas?: Idiomas, options?: any): AxiosPromise<any> {
            return localVarFp.idiomasControllerReplaceById(id, idiomas, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {IdiomasPartial} [idiomasPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomasControllerUpdateAll(where?: { [key: string]: object; }, idiomasPartial?: IdiomasPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.idiomasControllerUpdateAll(where, idiomasPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {IdiomasPartial} [idiomasPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomasControllerUpdateById(id: number, idiomasPartial?: IdiomasPartial, options?: any): AxiosPromise<any> {
            return localVarFp.idiomasControllerUpdateById(id, idiomasPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IdiomasControllerApi - object-oriented interface
 * @export
 * @class IdiomasControllerApi
 * @extends {BaseAPI}
 */
export class IdiomasControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiomasControllerApi
     */
    public idiomasControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return IdiomasControllerApiFp(this.configuration).idiomasControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewIdiomas} [newIdiomas] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiomasControllerApi
     */
    public idiomasControllerCreate(newIdiomas?: NewIdiomas, options?: AxiosRequestConfig) {
        return IdiomasControllerApiFp(this.configuration).idiomasControllerCreate(newIdiomas, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiomasControllerApi
     */
    public idiomasControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return IdiomasControllerApiFp(this.configuration).idiomasControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {IdiomasFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiomasControllerApi
     */
    public idiomasControllerFind(filter?: IdiomasFilter1, options?: AxiosRequestConfig) {
        return IdiomasControllerApiFp(this.configuration).idiomasControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {IdiomasFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiomasControllerApi
     */
    public idiomasControllerFindById(id: number, filter?: IdiomasFilter, options?: AxiosRequestConfig) {
        return IdiomasControllerApiFp(this.configuration).idiomasControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Idiomas} [idiomas] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiomasControllerApi
     */
    public idiomasControllerReplaceById(id: number, idiomas?: Idiomas, options?: AxiosRequestConfig) {
        return IdiomasControllerApiFp(this.configuration).idiomasControllerReplaceById(id, idiomas, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {IdiomasPartial} [idiomasPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiomasControllerApi
     */
    public idiomasControllerUpdateAll(where?: { [key: string]: object; }, idiomasPartial?: IdiomasPartial, options?: AxiosRequestConfig) {
        return IdiomasControllerApiFp(this.configuration).idiomasControllerUpdateAll(where, idiomasPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {IdiomasPartial} [idiomasPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiomasControllerApi
     */
    public idiomasControllerUpdateById(id: number, idiomasPartial?: IdiomasPartial, options?: AxiosRequestConfig) {
        return IdiomasControllerApiFp(this.configuration).idiomasControllerUpdateById(id, idiomasPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * InsertItemControllerApi - axios parameter creator
 * @export
 */
export const InsertItemControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} idProducto 
         * @param {string} atributos 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertItemControllerInsertItem: async (idProducto: string, atributos: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idProducto' is not null or undefined
            assertParamExists('insertItemControllerInsertItem', 'idProducto', idProducto)
            // verify required parameter 'atributos' is not null or undefined
            assertParamExists('insertItemControllerInsertItem', 'atributos', atributos)
            const localVarPath = `/insertItem/{idProducto}/{atributos}`
                .replace(`{${"idProducto"}}`, encodeURIComponent(String(idProducto)))
                .replace(`{${"atributos"}}`, encodeURIComponent(String(atributos)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InsertItemControllerApi - functional programming interface
 * @export
 */
export const InsertItemControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InsertItemControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} idProducto 
         * @param {string} atributos 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insertItemControllerInsertItem(idProducto: string, atributos: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insertItemControllerInsertItem(idProducto, atributos, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InsertItemControllerApi - factory interface
 * @export
 */
export const InsertItemControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InsertItemControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} idProducto 
         * @param {string} atributos 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertItemControllerInsertItem(idProducto: string, atributos: string, options?: any): AxiosPromise<object> {
            return localVarFp.insertItemControllerInsertItem(idProducto, atributos, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InsertItemControllerApi - object-oriented interface
 * @export
 * @class InsertItemControllerApi
 * @extends {BaseAPI}
 */
export class InsertItemControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} idProducto 
     * @param {string} atributos 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsertItemControllerApi
     */
    public insertItemControllerInsertItem(idProducto: string, atributos: string, options?: AxiosRequestConfig) {
        return InsertItemControllerApiFp(this.configuration).insertItemControllerInsertItem(idProducto, atributos, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * LogProductosControllerApi - axios parameter creator
 * @export
 */
export const LogProductosControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logProductosControllerGreet: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('logProductosControllerGreet', 'name', name)
            const localVarPath = `/greet/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logProductosControllerLog: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/log-productos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LogProductosControllerApi - functional programming interface
 * @export
 */
export const LogProductosControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LogProductosControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logProductosControllerGreet(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logProductosControllerGreet(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logProductosControllerLog(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logProductosControllerLog(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LogProductosControllerApi - factory interface
 * @export
 */
export const LogProductosControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LogProductosControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logProductosControllerGreet(name: string, options?: any): AxiosPromise<void> {
            return localVarFp.logProductosControllerGreet(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logProductosControllerLog(body?: object, options?: any): AxiosPromise<object> {
            return localVarFp.logProductosControllerLog(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LogProductosControllerApi - object-oriented interface
 * @export
 * @class LogProductosControllerApi
 * @extends {BaseAPI}
 */
export class LogProductosControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogProductosControllerApi
     */
    public logProductosControllerGreet(name: string, options?: AxiosRequestConfig) {
        return LogProductosControllerApiFp(this.configuration).logProductosControllerGreet(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogProductosControllerApi
     */
    public logProductosControllerLog(body?: object, options?: AxiosRequestConfig) {
        return LogProductosControllerApiFp(this.configuration).logProductosControllerLog(body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MarcaControllerApi - axios parameter creator
 * @export
 */
export const MarcaControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marcaControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Marca/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewMarca} [newMarca] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marcaControllerCreate: async (newMarca?: NewMarca, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Marca`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newMarca, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marcaControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('marcaControllerDeleteById', 'id', id)
            const localVarPath = `/Marca/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MarcaFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marcaControllerFind: async (filter?: MarcaFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Marca`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {MarcaFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marcaControllerFindById: async (id: number, filter?: MarcaFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('marcaControllerFindById', 'id', id)
            const localVarPath = `/Marca/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Marca} [marca] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marcaControllerReplaceById: async (id: number, marca?: Marca, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('marcaControllerReplaceById', 'id', id)
            const localVarPath = `/Marca/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(marca, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {MarcaPartial} [marcaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marcaControllerUpdateAll: async (where?: { [key: string]: object; }, marcaPartial?: MarcaPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Marca`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(marcaPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {MarcaPartial} [marcaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marcaControllerUpdateById: async (id: number, marcaPartial?: MarcaPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('marcaControllerUpdateById', 'id', id)
            const localVarPath = `/Marca/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(marcaPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MarcaControllerApi - functional programming interface
 * @export
 */
export const MarcaControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MarcaControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marcaControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marcaControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewMarca} [newMarca] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marcaControllerCreate(newMarca?: NewMarca, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Marca>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marcaControllerCreate(newMarca, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marcaControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marcaControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {MarcaFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marcaControllerFind(filter?: MarcaFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MarcaWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marcaControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {MarcaFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marcaControllerFindById(id: number, filter?: MarcaFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MarcaWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marcaControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Marca} [marca] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marcaControllerReplaceById(id: number, marca?: Marca, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marcaControllerReplaceById(id, marca, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {MarcaPartial} [marcaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marcaControllerUpdateAll(where?: { [key: string]: object; }, marcaPartial?: MarcaPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marcaControllerUpdateAll(where, marcaPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {MarcaPartial} [marcaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marcaControllerUpdateById(id: number, marcaPartial?: MarcaPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marcaControllerUpdateById(id, marcaPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MarcaControllerApi - factory interface
 * @export
 */
export const MarcaControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MarcaControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marcaControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.marcaControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewMarca} [newMarca] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marcaControllerCreate(newMarca?: NewMarca, options?: any): AxiosPromise<Marca> {
            return localVarFp.marcaControllerCreate(newMarca, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marcaControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.marcaControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MarcaFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marcaControllerFind(filter?: MarcaFilter1, options?: any): AxiosPromise<Array<MarcaWithRelations>> {
            return localVarFp.marcaControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {MarcaFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marcaControllerFindById(id: number, filter?: MarcaFilter, options?: any): AxiosPromise<MarcaWithRelations> {
            return localVarFp.marcaControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Marca} [marca] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marcaControllerReplaceById(id: number, marca?: Marca, options?: any): AxiosPromise<any> {
            return localVarFp.marcaControllerReplaceById(id, marca, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {MarcaPartial} [marcaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marcaControllerUpdateAll(where?: { [key: string]: object; }, marcaPartial?: MarcaPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.marcaControllerUpdateAll(where, marcaPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {MarcaPartial} [marcaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marcaControllerUpdateById(id: number, marcaPartial?: MarcaPartial, options?: any): AxiosPromise<any> {
            return localVarFp.marcaControllerUpdateById(id, marcaPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MarcaControllerApi - object-oriented interface
 * @export
 * @class MarcaControllerApi
 * @extends {BaseAPI}
 */
export class MarcaControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarcaControllerApi
     */
    public marcaControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return MarcaControllerApiFp(this.configuration).marcaControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewMarca} [newMarca] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarcaControllerApi
     */
    public marcaControllerCreate(newMarca?: NewMarca, options?: AxiosRequestConfig) {
        return MarcaControllerApiFp(this.configuration).marcaControllerCreate(newMarca, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarcaControllerApi
     */
    public marcaControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return MarcaControllerApiFp(this.configuration).marcaControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MarcaFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarcaControllerApi
     */
    public marcaControllerFind(filter?: MarcaFilter1, options?: AxiosRequestConfig) {
        return MarcaControllerApiFp(this.configuration).marcaControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {MarcaFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarcaControllerApi
     */
    public marcaControllerFindById(id: number, filter?: MarcaFilter, options?: AxiosRequestConfig) {
        return MarcaControllerApiFp(this.configuration).marcaControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Marca} [marca] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarcaControllerApi
     */
    public marcaControllerReplaceById(id: number, marca?: Marca, options?: AxiosRequestConfig) {
        return MarcaControllerApiFp(this.configuration).marcaControllerReplaceById(id, marca, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {MarcaPartial} [marcaPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarcaControllerApi
     */
    public marcaControllerUpdateAll(where?: { [key: string]: object; }, marcaPartial?: MarcaPartial, options?: AxiosRequestConfig) {
        return MarcaControllerApiFp(this.configuration).marcaControllerUpdateAll(where, marcaPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {MarcaPartial} [marcaPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarcaControllerApi
     */
    public marcaControllerUpdateById(id: number, marcaPartial?: MarcaPartial, options?: AxiosRequestConfig) {
        return MarcaControllerApiFp(this.configuration).marcaControllerUpdateById(id, marcaPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MercadosControllerApi - axios parameter creator
 * @export
 */
export const MercadosControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mercadosControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Mercados/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewMercados} [newMercados] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mercadosControllerCreate: async (newMercados?: NewMercados, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Mercados`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newMercados, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mercadosControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mercadosControllerDeleteById', 'id', id)
            const localVarPath = `/Mercados/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MercadosFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mercadosControllerFind: async (filter?: MercadosFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Mercados`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {MercadosFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mercadosControllerFindById: async (id: number, filter?: MercadosFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mercadosControllerFindById', 'id', id)
            const localVarPath = `/Mercados/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Mercados} [mercados] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mercadosControllerReplaceById: async (id: number, mercados?: Mercados, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mercadosControllerReplaceById', 'id', id)
            const localVarPath = `/Mercados/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mercados, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {MercadosPartial} [mercadosPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mercadosControllerUpdateById: async (id: number, mercadosPartial?: MercadosPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mercadosControllerUpdateById', 'id', id)
            const localVarPath = `/Mercados/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mercadosPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MercadosControllerApi - functional programming interface
 * @export
 */
export const MercadosControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MercadosControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mercadosControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mercadosControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewMercados} [newMercados] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mercadosControllerCreate(newMercados?: NewMercados, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Mercados>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mercadosControllerCreate(newMercados, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mercadosControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mercadosControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {MercadosFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mercadosControllerFind(filter?: MercadosFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MercadosWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mercadosControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {MercadosFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mercadosControllerFindById(id: number, filter?: MercadosFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MercadosWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mercadosControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Mercados} [mercados] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mercadosControllerReplaceById(id: number, mercados?: Mercados, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mercadosControllerReplaceById(id, mercados, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {MercadosPartial} [mercadosPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mercadosControllerUpdateById(id: number, mercadosPartial?: MercadosPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mercadosControllerUpdateById(id, mercadosPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MercadosControllerApi - factory interface
 * @export
 */
export const MercadosControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MercadosControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mercadosControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.mercadosControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewMercados} [newMercados] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mercadosControllerCreate(newMercados?: NewMercados, options?: any): AxiosPromise<Mercados> {
            return localVarFp.mercadosControllerCreate(newMercados, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mercadosControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.mercadosControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MercadosFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mercadosControllerFind(filter?: MercadosFilter1, options?: any): AxiosPromise<Array<MercadosWithRelations>> {
            return localVarFp.mercadosControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {MercadosFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mercadosControllerFindById(id: number, filter?: MercadosFilter, options?: any): AxiosPromise<MercadosWithRelations> {
            return localVarFp.mercadosControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Mercados} [mercados] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mercadosControllerReplaceById(id: number, mercados?: Mercados, options?: any): AxiosPromise<any> {
            return localVarFp.mercadosControllerReplaceById(id, mercados, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {MercadosPartial} [mercadosPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mercadosControllerUpdateById(id: number, mercadosPartial?: MercadosPartial, options?: any): AxiosPromise<any> {
            return localVarFp.mercadosControllerUpdateById(id, mercadosPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MercadosControllerApi - object-oriented interface
 * @export
 * @class MercadosControllerApi
 * @extends {BaseAPI}
 */
export class MercadosControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MercadosControllerApi
     */
    public mercadosControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return MercadosControllerApiFp(this.configuration).mercadosControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewMercados} [newMercados] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MercadosControllerApi
     */
    public mercadosControllerCreate(newMercados?: NewMercados, options?: AxiosRequestConfig) {
        return MercadosControllerApiFp(this.configuration).mercadosControllerCreate(newMercados, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MercadosControllerApi
     */
    public mercadosControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return MercadosControllerApiFp(this.configuration).mercadosControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MercadosFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MercadosControllerApi
     */
    public mercadosControllerFind(filter?: MercadosFilter1, options?: AxiosRequestConfig) {
        return MercadosControllerApiFp(this.configuration).mercadosControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {MercadosFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MercadosControllerApi
     */
    public mercadosControllerFindById(id: number, filter?: MercadosFilter, options?: AxiosRequestConfig) {
        return MercadosControllerApiFp(this.configuration).mercadosControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Mercados} [mercados] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MercadosControllerApi
     */
    public mercadosControllerReplaceById(id: number, mercados?: Mercados, options?: AxiosRequestConfig) {
        return MercadosControllerApiFp(this.configuration).mercadosControllerReplaceById(id, mercados, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {MercadosPartial} [mercadosPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MercadosControllerApi
     */
    public mercadosControllerUpdateById(id: number, mercadosPartial?: MercadosPartial, options?: AxiosRequestConfig) {
        return MercadosControllerApiFp(this.configuration).mercadosControllerUpdateById(id, mercadosPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MultimediaControllerApi - axios parameter creator
 * @export
 */
export const MultimediaControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        multimediaControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/multimedias/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewMultimedia} [newMultimedia] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        multimediaControllerCreate: async (newMultimedia?: NewMultimedia, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/multimedias`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newMultimedia, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        multimediaControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('multimediaControllerDeleteById', 'id', id)
            const localVarPath = `/multimedias/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MultimediaFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        multimediaControllerFind: async (filter?: MultimediaFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/multimedias`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {MultimediaFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        multimediaControllerFindById: async (id: number, filter?: MultimediaFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('multimediaControllerFindById', 'id', id)
            const localVarPath = `/multimedias/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Multimedia} [multimedia] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        multimediaControllerReplaceById: async (id: number, multimedia?: Multimedia, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('multimediaControllerReplaceById', 'id', id)
            const localVarPath = `/multimedias/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(multimedia, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {MultimediaPartial} [multimediaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        multimediaControllerUpdateAll: async (where?: { [key: string]: object; }, multimediaPartial?: MultimediaPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/multimedias`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(multimediaPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {MultimediaPartial} [multimediaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        multimediaControllerUpdateById: async (id: number, multimediaPartial?: MultimediaPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('multimediaControllerUpdateById', 'id', id)
            const localVarPath = `/multimedias/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(multimediaPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MultimediaControllerApi - functional programming interface
 * @export
 */
export const MultimediaControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MultimediaControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async multimediaControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.multimediaControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewMultimedia} [newMultimedia] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async multimediaControllerCreate(newMultimedia?: NewMultimedia, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Multimedia>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.multimediaControllerCreate(newMultimedia, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async multimediaControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.multimediaControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {MultimediaFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async multimediaControllerFind(filter?: MultimediaFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MultimediaWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.multimediaControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {MultimediaFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async multimediaControllerFindById(id: number, filter?: MultimediaFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MultimediaWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.multimediaControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Multimedia} [multimedia] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async multimediaControllerReplaceById(id: number, multimedia?: Multimedia, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.multimediaControllerReplaceById(id, multimedia, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {MultimediaPartial} [multimediaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async multimediaControllerUpdateAll(where?: { [key: string]: object; }, multimediaPartial?: MultimediaPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.multimediaControllerUpdateAll(where, multimediaPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {MultimediaPartial} [multimediaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async multimediaControllerUpdateById(id: number, multimediaPartial?: MultimediaPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.multimediaControllerUpdateById(id, multimediaPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MultimediaControllerApi - factory interface
 * @export
 */
export const MultimediaControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MultimediaControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        multimediaControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.multimediaControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewMultimedia} [newMultimedia] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        multimediaControllerCreate(newMultimedia?: NewMultimedia, options?: any): AxiosPromise<Multimedia> {
            return localVarFp.multimediaControllerCreate(newMultimedia, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        multimediaControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.multimediaControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MultimediaFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        multimediaControllerFind(filter?: MultimediaFilter1, options?: any): AxiosPromise<Array<MultimediaWithRelations>> {
            return localVarFp.multimediaControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {MultimediaFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        multimediaControllerFindById(id: number, filter?: MultimediaFilter, options?: any): AxiosPromise<MultimediaWithRelations> {
            return localVarFp.multimediaControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Multimedia} [multimedia] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        multimediaControllerReplaceById(id: number, multimedia?: Multimedia, options?: any): AxiosPromise<any> {
            return localVarFp.multimediaControllerReplaceById(id, multimedia, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {MultimediaPartial} [multimediaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        multimediaControllerUpdateAll(where?: { [key: string]: object; }, multimediaPartial?: MultimediaPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.multimediaControllerUpdateAll(where, multimediaPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {MultimediaPartial} [multimediaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        multimediaControllerUpdateById(id: number, multimediaPartial?: MultimediaPartial, options?: any): AxiosPromise<any> {
            return localVarFp.multimediaControllerUpdateById(id, multimediaPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MultimediaControllerApi - object-oriented interface
 * @export
 * @class MultimediaControllerApi
 * @extends {BaseAPI}
 */
export class MultimediaControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MultimediaControllerApi
     */
    public multimediaControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return MultimediaControllerApiFp(this.configuration).multimediaControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewMultimedia} [newMultimedia] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MultimediaControllerApi
     */
    public multimediaControllerCreate(newMultimedia?: NewMultimedia, options?: AxiosRequestConfig) {
        return MultimediaControllerApiFp(this.configuration).multimediaControllerCreate(newMultimedia, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MultimediaControllerApi
     */
    public multimediaControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return MultimediaControllerApiFp(this.configuration).multimediaControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MultimediaFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MultimediaControllerApi
     */
    public multimediaControllerFind(filter?: MultimediaFilter1, options?: AxiosRequestConfig) {
        return MultimediaControllerApiFp(this.configuration).multimediaControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {MultimediaFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MultimediaControllerApi
     */
    public multimediaControllerFindById(id: number, filter?: MultimediaFilter, options?: AxiosRequestConfig) {
        return MultimediaControllerApiFp(this.configuration).multimediaControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Multimedia} [multimedia] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MultimediaControllerApi
     */
    public multimediaControllerReplaceById(id: number, multimedia?: Multimedia, options?: AxiosRequestConfig) {
        return MultimediaControllerApiFp(this.configuration).multimediaControllerReplaceById(id, multimedia, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {MultimediaPartial} [multimediaPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MultimediaControllerApi
     */
    public multimediaControllerUpdateAll(where?: { [key: string]: object; }, multimediaPartial?: MultimediaPartial, options?: AxiosRequestConfig) {
        return MultimediaControllerApiFp(this.configuration).multimediaControllerUpdateAll(where, multimediaPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {MultimediaPartial} [multimediaPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MultimediaControllerApi
     */
    public multimediaControllerUpdateById(id: number, multimediaPartial?: MultimediaPartial, options?: AxiosRequestConfig) {
        return MultimediaControllerApiFp(this.configuration).multimediaControllerUpdateById(id, multimediaPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PasswordChangesControllerApi - axios parameter creator
 * @export
 */
export const PasswordChangesControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passwordChangesControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/password-changes/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewPasswordChanges} [newPasswordChanges] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passwordChangesControllerCreate: async (newPasswordChanges?: NewPasswordChanges, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/password-changes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newPasswordChanges, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passwordChangesControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('passwordChangesControllerDeleteById', 'id', id)
            const localVarPath = `/password-changes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PasswordChangesFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passwordChangesControllerFind: async (filter?: PasswordChangesFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/password-changes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {PasswordChangesFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passwordChangesControllerFindById: async (id: number, filter?: PasswordChangesFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('passwordChangesControllerFindById', 'id', id)
            const localVarPath = `/password-changes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {PasswordChanges} [passwordChanges] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passwordChangesControllerReplaceById: async (id: number, passwordChanges?: PasswordChanges, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('passwordChangesControllerReplaceById', 'id', id)
            const localVarPath = `/password-changes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(passwordChanges, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {PasswordChangesPartial} [passwordChangesPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passwordChangesControllerUpdateAll: async (where?: { [key: string]: object; }, passwordChangesPartial?: PasswordChangesPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/password-changes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(passwordChangesPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {PasswordChangesPartial} [passwordChangesPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passwordChangesControllerUpdateById: async (id: number, passwordChangesPartial?: PasswordChangesPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('passwordChangesControllerUpdateById', 'id', id)
            const localVarPath = `/password-changes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(passwordChangesPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PasswordChangesControllerApi - functional programming interface
 * @export
 */
export const PasswordChangesControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PasswordChangesControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async passwordChangesControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.passwordChangesControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewPasswordChanges} [newPasswordChanges] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async passwordChangesControllerCreate(newPasswordChanges?: NewPasswordChanges, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PasswordChanges>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.passwordChangesControllerCreate(newPasswordChanges, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async passwordChangesControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.passwordChangesControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PasswordChangesFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async passwordChangesControllerFind(filter?: PasswordChangesFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PasswordChangesWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.passwordChangesControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {PasswordChangesFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async passwordChangesControllerFindById(id: number, filter?: PasswordChangesFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PasswordChangesWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.passwordChangesControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {PasswordChanges} [passwordChanges] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async passwordChangesControllerReplaceById(id: number, passwordChanges?: PasswordChanges, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.passwordChangesControllerReplaceById(id, passwordChanges, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {PasswordChangesPartial} [passwordChangesPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async passwordChangesControllerUpdateAll(where?: { [key: string]: object; }, passwordChangesPartial?: PasswordChangesPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.passwordChangesControllerUpdateAll(where, passwordChangesPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {PasswordChangesPartial} [passwordChangesPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async passwordChangesControllerUpdateById(id: number, passwordChangesPartial?: PasswordChangesPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.passwordChangesControllerUpdateById(id, passwordChangesPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PasswordChangesControllerApi - factory interface
 * @export
 */
export const PasswordChangesControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PasswordChangesControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passwordChangesControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.passwordChangesControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewPasswordChanges} [newPasswordChanges] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passwordChangesControllerCreate(newPasswordChanges?: NewPasswordChanges, options?: any): AxiosPromise<PasswordChanges> {
            return localVarFp.passwordChangesControllerCreate(newPasswordChanges, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passwordChangesControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.passwordChangesControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PasswordChangesFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passwordChangesControllerFind(filter?: PasswordChangesFilter1, options?: any): AxiosPromise<Array<PasswordChangesWithRelations>> {
            return localVarFp.passwordChangesControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {PasswordChangesFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passwordChangesControllerFindById(id: number, filter?: PasswordChangesFilter, options?: any): AxiosPromise<PasswordChangesWithRelations> {
            return localVarFp.passwordChangesControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {PasswordChanges} [passwordChanges] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passwordChangesControllerReplaceById(id: number, passwordChanges?: PasswordChanges, options?: any): AxiosPromise<any> {
            return localVarFp.passwordChangesControllerReplaceById(id, passwordChanges, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {PasswordChangesPartial} [passwordChangesPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passwordChangesControllerUpdateAll(where?: { [key: string]: object; }, passwordChangesPartial?: PasswordChangesPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.passwordChangesControllerUpdateAll(where, passwordChangesPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {PasswordChangesPartial} [passwordChangesPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passwordChangesControllerUpdateById(id: number, passwordChangesPartial?: PasswordChangesPartial, options?: any): AxiosPromise<any> {
            return localVarFp.passwordChangesControllerUpdateById(id, passwordChangesPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PasswordChangesControllerApi - object-oriented interface
 * @export
 * @class PasswordChangesControllerApi
 * @extends {BaseAPI}
 */
export class PasswordChangesControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordChangesControllerApi
     */
    public passwordChangesControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return PasswordChangesControllerApiFp(this.configuration).passwordChangesControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewPasswordChanges} [newPasswordChanges] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordChangesControllerApi
     */
    public passwordChangesControllerCreate(newPasswordChanges?: NewPasswordChanges, options?: AxiosRequestConfig) {
        return PasswordChangesControllerApiFp(this.configuration).passwordChangesControllerCreate(newPasswordChanges, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordChangesControllerApi
     */
    public passwordChangesControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return PasswordChangesControllerApiFp(this.configuration).passwordChangesControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PasswordChangesFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordChangesControllerApi
     */
    public passwordChangesControllerFind(filter?: PasswordChangesFilter1, options?: AxiosRequestConfig) {
        return PasswordChangesControllerApiFp(this.configuration).passwordChangesControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {PasswordChangesFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordChangesControllerApi
     */
    public passwordChangesControllerFindById(id: number, filter?: PasswordChangesFilter, options?: AxiosRequestConfig) {
        return PasswordChangesControllerApiFp(this.configuration).passwordChangesControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {PasswordChanges} [passwordChanges] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordChangesControllerApi
     */
    public passwordChangesControllerReplaceById(id: number, passwordChanges?: PasswordChanges, options?: AxiosRequestConfig) {
        return PasswordChangesControllerApiFp(this.configuration).passwordChangesControllerReplaceById(id, passwordChanges, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {PasswordChangesPartial} [passwordChangesPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordChangesControllerApi
     */
    public passwordChangesControllerUpdateAll(where?: { [key: string]: object; }, passwordChangesPartial?: PasswordChangesPartial, options?: AxiosRequestConfig) {
        return PasswordChangesControllerApiFp(this.configuration).passwordChangesControllerUpdateAll(where, passwordChangesPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {PasswordChangesPartial} [passwordChangesPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordChangesControllerApi
     */
    public passwordChangesControllerUpdateById(id: number, passwordChangesPartial?: PasswordChangesPartial, options?: AxiosRequestConfig) {
        return PasswordChangesControllerApiFp(this.configuration).passwordChangesControllerUpdateById(id, passwordChangesPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PermisosControllerApi - axios parameter creator
 * @export
 */
export const PermisosControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisosControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/permisos/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewPermisos} [newPermisos] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisosControllerCreate: async (newPermisos?: NewPermisos, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/permisos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newPermisos, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisosControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('permisosControllerDeleteById', 'id', id)
            const localVarPath = `/permisos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PermisosFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisosControllerFind: async (filter?: PermisosFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/permisos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {PermisosFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisosControllerFindById: async (id: number, filter?: PermisosFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('permisosControllerFindById', 'id', id)
            const localVarPath = `/permisos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PermisosFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisosControllerGetPermissionsMatrix: async (filter?: PermisosFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/permisos/matrix`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Permisos} [permisos] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisosControllerReplaceById: async (id: number, permisos?: Permisos, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('permisosControllerReplaceById', 'id', id)
            const localVarPath = `/permisos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(permisos, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {PermisosPartial} [permisosPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisosControllerUpdateAll: async (where?: { [key: string]: object; }, permisosPartial?: PermisosPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/permisos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(permisosPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {PermisosPartial} [permisosPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisosControllerUpdateById: async (id: number, permisosPartial?: PermisosPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('permisosControllerUpdateById', 'id', id)
            const localVarPath = `/permisos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(permisosPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PermisosControllerApi - functional programming interface
 * @export
 */
export const PermisosControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PermisosControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async permisosControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.permisosControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewPermisos} [newPermisos] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async permisosControllerCreate(newPermisos?: NewPermisos, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Permisos>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.permisosControllerCreate(newPermisos, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async permisosControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.permisosControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PermisosFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async permisosControllerFind(filter?: PermisosFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PermisosWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.permisosControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {PermisosFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async permisosControllerFindById(id: number, filter?: PermisosFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PermisosWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.permisosControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PermisosFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async permisosControllerGetPermissionsMatrix(filter?: PermisosFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RolesWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.permisosControllerGetPermissionsMatrix(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Permisos} [permisos] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async permisosControllerReplaceById(id: number, permisos?: Permisos, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.permisosControllerReplaceById(id, permisos, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {PermisosPartial} [permisosPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async permisosControllerUpdateAll(where?: { [key: string]: object; }, permisosPartial?: PermisosPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.permisosControllerUpdateAll(where, permisosPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {PermisosPartial} [permisosPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async permisosControllerUpdateById(id: number, permisosPartial?: PermisosPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.permisosControllerUpdateById(id, permisosPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PermisosControllerApi - factory interface
 * @export
 */
export const PermisosControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PermisosControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisosControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.permisosControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewPermisos} [newPermisos] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisosControllerCreate(newPermisos?: NewPermisos, options?: any): AxiosPromise<Permisos> {
            return localVarFp.permisosControllerCreate(newPermisos, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisosControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.permisosControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PermisosFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisosControllerFind(filter?: PermisosFilter, options?: any): AxiosPromise<Array<PermisosWithRelations>> {
            return localVarFp.permisosControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {PermisosFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisosControllerFindById(id: number, filter?: PermisosFilter1, options?: any): AxiosPromise<PermisosWithRelations> {
            return localVarFp.permisosControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PermisosFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisosControllerGetPermissionsMatrix(filter?: PermisosFilter, options?: any): AxiosPromise<Array<RolesWithRelations>> {
            return localVarFp.permisosControllerGetPermissionsMatrix(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Permisos} [permisos] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisosControllerReplaceById(id: number, permisos?: Permisos, options?: any): AxiosPromise<any> {
            return localVarFp.permisosControllerReplaceById(id, permisos, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {PermisosPartial} [permisosPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisosControllerUpdateAll(where?: { [key: string]: object; }, permisosPartial?: PermisosPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.permisosControllerUpdateAll(where, permisosPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {PermisosPartial} [permisosPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisosControllerUpdateById(id: number, permisosPartial?: PermisosPartial, options?: any): AxiosPromise<any> {
            return localVarFp.permisosControllerUpdateById(id, permisosPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PermisosControllerApi - object-oriented interface
 * @export
 * @class PermisosControllerApi
 * @extends {BaseAPI}
 */
export class PermisosControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermisosControllerApi
     */
    public permisosControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return PermisosControllerApiFp(this.configuration).permisosControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewPermisos} [newPermisos] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermisosControllerApi
     */
    public permisosControllerCreate(newPermisos?: NewPermisos, options?: AxiosRequestConfig) {
        return PermisosControllerApiFp(this.configuration).permisosControllerCreate(newPermisos, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermisosControllerApi
     */
    public permisosControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return PermisosControllerApiFp(this.configuration).permisosControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PermisosFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermisosControllerApi
     */
    public permisosControllerFind(filter?: PermisosFilter, options?: AxiosRequestConfig) {
        return PermisosControllerApiFp(this.configuration).permisosControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {PermisosFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermisosControllerApi
     */
    public permisosControllerFindById(id: number, filter?: PermisosFilter1, options?: AxiosRequestConfig) {
        return PermisosControllerApiFp(this.configuration).permisosControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PermisosFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermisosControllerApi
     */
    public permisosControllerGetPermissionsMatrix(filter?: PermisosFilter, options?: AxiosRequestConfig) {
        return PermisosControllerApiFp(this.configuration).permisosControllerGetPermissionsMatrix(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Permisos} [permisos] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermisosControllerApi
     */
    public permisosControllerReplaceById(id: number, permisos?: Permisos, options?: AxiosRequestConfig) {
        return PermisosControllerApiFp(this.configuration).permisosControllerReplaceById(id, permisos, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {PermisosPartial} [permisosPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermisosControllerApi
     */
    public permisosControllerUpdateAll(where?: { [key: string]: object; }, permisosPartial?: PermisosPartial, options?: AxiosRequestConfig) {
        return PermisosControllerApiFp(this.configuration).permisosControllerUpdateAll(where, permisosPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {PermisosPartial} [permisosPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermisosControllerApi
     */
    public permisosControllerUpdateById(id: number, permisosPartial?: PermisosPartial, options?: AxiosRequestConfig) {
        return PermisosControllerApiFp(this.configuration).permisosControllerUpdateById(id, permisosPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PingControllerApi - axios parameter creator
 * @export
 */
export const PingControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingControllerPing: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ping`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PingControllerApi - functional programming interface
 * @export
 */
export const PingControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PingControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pingControllerPing(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pingControllerPing(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PingControllerApi - factory interface
 * @export
 */
export const PingControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PingControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingControllerPing(options?: any): AxiosPromise<PingResponse> {
            return localVarFp.pingControllerPing(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PingControllerApi - object-oriented interface
 * @export
 * @class PingControllerApi
 * @extends {BaseAPI}
 */
export class PingControllerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PingControllerApi
     */
    public pingControllerPing(options?: AxiosRequestConfig) {
        return PingControllerApiFp(this.configuration).pingControllerPing(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PlantillaControllerApi - axios parameter creator
 * @export
 */
export const PlantillaControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Plantilla/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewPlantilla} [newPlantilla] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaControllerCreate: async (newPlantilla?: NewPlantilla, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Plantilla`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newPlantilla, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('plantillaControllerDeleteById', 'id', id)
            const localVarPath = `/Plantilla/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PlantillaFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaControllerFind: async (filter?: PlantillaFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Plantilla`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {PlantillaFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaControllerFindById: async (id: number, filter?: PlantillaFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('plantillaControllerFindById', 'id', id)
            const localVarPath = `/Plantilla/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Plantilla} [plantilla] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaControllerReplaceById: async (id: number, plantilla?: Plantilla, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('plantillaControllerReplaceById', 'id', id)
            const localVarPath = `/Plantilla/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(plantilla, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {PlantillaPartial} [plantillaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaControllerUpdateAll: async (where?: { [key: string]: object; }, plantillaPartial?: PlantillaPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Plantilla`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(plantillaPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {PlantillaPartial} [plantillaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaControllerUpdateById: async (id: number, plantillaPartial?: PlantillaPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('plantillaControllerUpdateById', 'id', id)
            const localVarPath = `/Plantilla/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(plantillaPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PlantillaControllerApi - functional programming interface
 * @export
 */
export const PlantillaControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PlantillaControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async plantillaControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.plantillaControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewPlantilla} [newPlantilla] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async plantillaControllerCreate(newPlantilla?: NewPlantilla, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Plantilla>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.plantillaControllerCreate(newPlantilla, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async plantillaControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.plantillaControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PlantillaFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async plantillaControllerFind(filter?: PlantillaFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PlantillaWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.plantillaControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {PlantillaFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async plantillaControllerFindById(id: number, filter?: PlantillaFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlantillaWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.plantillaControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Plantilla} [plantilla] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async plantillaControllerReplaceById(id: number, plantilla?: Plantilla, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.plantillaControllerReplaceById(id, plantilla, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {PlantillaPartial} [plantillaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async plantillaControllerUpdateAll(where?: { [key: string]: object; }, plantillaPartial?: PlantillaPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.plantillaControllerUpdateAll(where, plantillaPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {PlantillaPartial} [plantillaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async plantillaControllerUpdateById(id: number, plantillaPartial?: PlantillaPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.plantillaControllerUpdateById(id, plantillaPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PlantillaControllerApi - factory interface
 * @export
 */
export const PlantillaControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PlantillaControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.plantillaControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewPlantilla} [newPlantilla] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaControllerCreate(newPlantilla?: NewPlantilla, options?: any): AxiosPromise<Plantilla> {
            return localVarFp.plantillaControllerCreate(newPlantilla, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.plantillaControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PlantillaFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaControllerFind(filter?: PlantillaFilter1, options?: any): AxiosPromise<Array<PlantillaWithRelations>> {
            return localVarFp.plantillaControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {PlantillaFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaControllerFindById(id: number, filter?: PlantillaFilter, options?: any): AxiosPromise<PlantillaWithRelations> {
            return localVarFp.plantillaControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Plantilla} [plantilla] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaControllerReplaceById(id: number, plantilla?: Plantilla, options?: any): AxiosPromise<any> {
            return localVarFp.plantillaControllerReplaceById(id, plantilla, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {PlantillaPartial} [plantillaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaControllerUpdateAll(where?: { [key: string]: object; }, plantillaPartial?: PlantillaPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.plantillaControllerUpdateAll(where, plantillaPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {PlantillaPartial} [plantillaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaControllerUpdateById(id: number, plantillaPartial?: PlantillaPartial, options?: any): AxiosPromise<any> {
            return localVarFp.plantillaControllerUpdateById(id, plantillaPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PlantillaControllerApi - object-oriented interface
 * @export
 * @class PlantillaControllerApi
 * @extends {BaseAPI}
 */
export class PlantillaControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlantillaControllerApi
     */
    public plantillaControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return PlantillaControllerApiFp(this.configuration).plantillaControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewPlantilla} [newPlantilla] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlantillaControllerApi
     */
    public plantillaControllerCreate(newPlantilla?: NewPlantilla, options?: AxiosRequestConfig) {
        return PlantillaControllerApiFp(this.configuration).plantillaControllerCreate(newPlantilla, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlantillaControllerApi
     */
    public plantillaControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return PlantillaControllerApiFp(this.configuration).plantillaControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PlantillaFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlantillaControllerApi
     */
    public plantillaControllerFind(filter?: PlantillaFilter1, options?: AxiosRequestConfig) {
        return PlantillaControllerApiFp(this.configuration).plantillaControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {PlantillaFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlantillaControllerApi
     */
    public plantillaControllerFindById(id: number, filter?: PlantillaFilter, options?: AxiosRequestConfig) {
        return PlantillaControllerApiFp(this.configuration).plantillaControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Plantilla} [plantilla] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlantillaControllerApi
     */
    public plantillaControllerReplaceById(id: number, plantilla?: Plantilla, options?: AxiosRequestConfig) {
        return PlantillaControllerApiFp(this.configuration).plantillaControllerReplaceById(id, plantilla, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {PlantillaPartial} [plantillaPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlantillaControllerApi
     */
    public plantillaControllerUpdateAll(where?: { [key: string]: object; }, plantillaPartial?: PlantillaPartial, options?: AxiosRequestConfig) {
        return PlantillaControllerApiFp(this.configuration).plantillaControllerUpdateAll(where, plantillaPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {PlantillaPartial} [plantillaPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlantillaControllerApi
     */
    public plantillaControllerUpdateById(id: number, plantillaPartial?: PlantillaPartial, options?: AxiosRequestConfig) {
        return PlantillaControllerApiFp(this.configuration).plantillaControllerUpdateById(id, plantillaPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductoAtributosControllerApi - axios parameter creator
 * @export
 */
export const ProductoAtributosControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoAtributosControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/producto-atributos/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewProductoAtributos} [newProductoAtributos] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoAtributosControllerCreate: async (newProductoAtributos?: NewProductoAtributos, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/producto-atributos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newProductoAtributos, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoAtributosControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productoAtributosControllerDeleteById', 'id', id)
            const localVarPath = `/producto-atributos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProductoAtributosFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoAtributosControllerFind: async (filter?: ProductoAtributosFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/producto-atributos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoAtributosFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoAtributosControllerFindById: async (id: number, filter?: ProductoAtributosFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productoAtributosControllerFindById', 'id', id)
            const localVarPath = `/producto-atributos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoAtributos} [productoAtributos] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoAtributosControllerReplaceById: async (id: number, productoAtributos?: ProductoAtributos, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productoAtributosControllerReplaceById', 'id', id)
            const localVarPath = `/producto-atributos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productoAtributos, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {ProductoAtributosPartial} [productoAtributosPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoAtributosControllerUpdateAll: async (where?: { [key: string]: object; }, productoAtributosPartial?: ProductoAtributosPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/producto-atributos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productoAtributosPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoAtributosPartial} [productoAtributosPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoAtributosControllerUpdateById: async (id: number, productoAtributosPartial?: ProductoAtributosPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productoAtributosControllerUpdateById', 'id', id)
            const localVarPath = `/producto-atributos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productoAtributosPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductoAtributosControllerApi - functional programming interface
 * @export
 */
export const ProductoAtributosControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductoAtributosControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoAtributosControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoAtributosControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewProductoAtributos} [newProductoAtributos] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoAtributosControllerCreate(newProductoAtributos?: NewProductoAtributos, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductoAtributos>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoAtributosControllerCreate(newProductoAtributos, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoAtributosControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoAtributosControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ProductoAtributosFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoAtributosControllerFind(filter?: ProductoAtributosFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductoAtributosWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoAtributosControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoAtributosFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoAtributosControllerFindById(id: number, filter?: ProductoAtributosFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductoAtributosWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoAtributosControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoAtributos} [productoAtributos] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoAtributosControllerReplaceById(id: number, productoAtributos?: ProductoAtributos, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoAtributosControllerReplaceById(id, productoAtributos, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {ProductoAtributosPartial} [productoAtributosPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoAtributosControllerUpdateAll(where?: { [key: string]: object; }, productoAtributosPartial?: ProductoAtributosPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoAtributosControllerUpdateAll(where, productoAtributosPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoAtributosPartial} [productoAtributosPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoAtributosControllerUpdateById(id: number, productoAtributosPartial?: ProductoAtributosPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoAtributosControllerUpdateById(id, productoAtributosPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductoAtributosControllerApi - factory interface
 * @export
 */
export const ProductoAtributosControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductoAtributosControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoAtributosControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.productoAtributosControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewProductoAtributos} [newProductoAtributos] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoAtributosControllerCreate(newProductoAtributos?: NewProductoAtributos, options?: any): AxiosPromise<ProductoAtributos> {
            return localVarFp.productoAtributosControllerCreate(newProductoAtributos, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoAtributosControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.productoAtributosControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProductoAtributosFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoAtributosControllerFind(filter?: ProductoAtributosFilter1, options?: any): AxiosPromise<Array<ProductoAtributosWithRelations>> {
            return localVarFp.productoAtributosControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoAtributosFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoAtributosControllerFindById(id: number, filter?: ProductoAtributosFilter, options?: any): AxiosPromise<ProductoAtributosWithRelations> {
            return localVarFp.productoAtributosControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoAtributos} [productoAtributos] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoAtributosControllerReplaceById(id: number, productoAtributos?: ProductoAtributos, options?: any): AxiosPromise<any> {
            return localVarFp.productoAtributosControllerReplaceById(id, productoAtributos, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {ProductoAtributosPartial} [productoAtributosPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoAtributosControllerUpdateAll(where?: { [key: string]: object; }, productoAtributosPartial?: ProductoAtributosPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.productoAtributosControllerUpdateAll(where, productoAtributosPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoAtributosPartial} [productoAtributosPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoAtributosControllerUpdateById(id: number, productoAtributosPartial?: ProductoAtributosPartial, options?: any): AxiosPromise<any> {
            return localVarFp.productoAtributosControllerUpdateById(id, productoAtributosPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductoAtributosControllerApi - object-oriented interface
 * @export
 * @class ProductoAtributosControllerApi
 * @extends {BaseAPI}
 */
export class ProductoAtributosControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoAtributosControllerApi
     */
    public productoAtributosControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return ProductoAtributosControllerApiFp(this.configuration).productoAtributosControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewProductoAtributos} [newProductoAtributos] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoAtributosControllerApi
     */
    public productoAtributosControllerCreate(newProductoAtributos?: NewProductoAtributos, options?: AxiosRequestConfig) {
        return ProductoAtributosControllerApiFp(this.configuration).productoAtributosControllerCreate(newProductoAtributos, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoAtributosControllerApi
     */
    public productoAtributosControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return ProductoAtributosControllerApiFp(this.configuration).productoAtributosControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProductoAtributosFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoAtributosControllerApi
     */
    public productoAtributosControllerFind(filter?: ProductoAtributosFilter1, options?: AxiosRequestConfig) {
        return ProductoAtributosControllerApiFp(this.configuration).productoAtributosControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ProductoAtributosFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoAtributosControllerApi
     */
    public productoAtributosControllerFindById(id: number, filter?: ProductoAtributosFilter, options?: AxiosRequestConfig) {
        return ProductoAtributosControllerApiFp(this.configuration).productoAtributosControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ProductoAtributos} [productoAtributos] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoAtributosControllerApi
     */
    public productoAtributosControllerReplaceById(id: number, productoAtributos?: ProductoAtributos, options?: AxiosRequestConfig) {
        return ProductoAtributosControllerApiFp(this.configuration).productoAtributosControllerReplaceById(id, productoAtributos, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {ProductoAtributosPartial} [productoAtributosPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoAtributosControllerApi
     */
    public productoAtributosControllerUpdateAll(where?: { [key: string]: object; }, productoAtributosPartial?: ProductoAtributosPartial, options?: AxiosRequestConfig) {
        return ProductoAtributosControllerApiFp(this.configuration).productoAtributosControllerUpdateAll(where, productoAtributosPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ProductoAtributosPartial} [productoAtributosPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoAtributosControllerApi
     */
    public productoAtributosControllerUpdateById(id: number, productoAtributosPartial?: ProductoAtributosPartial, options?: AxiosRequestConfig) {
        return ProductoAtributosControllerApiFp(this.configuration).productoAtributosControllerUpdateById(id, productoAtributosPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductoDataControllerApi - axios parameter creator
 * @export
 */
export const ProductoDataControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoDataControllerFind: async (identifier: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            assertParamExists('productoDataControllerFind', 'identifier', identifier)
            const localVarPath = `/producto-data/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductoDataControllerApi - functional programming interface
 * @export
 */
export const ProductoDataControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductoDataControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoDataControllerFind(identifier: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Productos>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoDataControllerFind(identifier, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductoDataControllerApi - factory interface
 * @export
 */
export const ProductoDataControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductoDataControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoDataControllerFind(identifier: string, options?: any): AxiosPromise<Productos> {
            return localVarFp.productoDataControllerFind(identifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductoDataControllerApi - object-oriented interface
 * @export
 * @class ProductoDataControllerApi
 * @extends {BaseAPI}
 */
export class ProductoDataControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoDataControllerApi
     */
    public productoDataControllerFind(identifier: string, options?: AxiosRequestConfig) {
        return ProductoDataControllerApiFp(this.configuration).productoDataControllerFind(identifier, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductoGeneralControllerApi - axios parameter creator
 * @export
 */
export const ProductoGeneralControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoGeneralControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/producto-generals/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewProductoGeneral} [newProductoGeneral] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoGeneralControllerCreate: async (newProductoGeneral?: NewProductoGeneral, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/producto-generals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newProductoGeneral, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoGeneralControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productoGeneralControllerDeleteById', 'id', id)
            const localVarPath = `/producto-generals/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProductoGeneralFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoGeneralControllerFind: async (filter?: ProductoGeneralFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/producto-generals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoGeneralFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoGeneralControllerFindById: async (id: number, filter?: ProductoGeneralFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productoGeneralControllerFindById', 'id', id)
            const localVarPath = `/producto-generals/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoGeneral} [productoGeneral] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoGeneralControllerReplaceById: async (id: number, productoGeneral?: ProductoGeneral, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productoGeneralControllerReplaceById', 'id', id)
            const localVarPath = `/producto-generals/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productoGeneral, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {ProductoGeneralPartial} [productoGeneralPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoGeneralControllerUpdateAll: async (where?: { [key: string]: object; }, productoGeneralPartial?: ProductoGeneralPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/producto-generals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productoGeneralPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoGeneralPartial} [productoGeneralPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoGeneralControllerUpdateById: async (id: number, productoGeneralPartial?: ProductoGeneralPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productoGeneralControllerUpdateById', 'id', id)
            const localVarPath = `/producto-generals/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productoGeneralPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductoGeneralControllerApi - functional programming interface
 * @export
 */
export const ProductoGeneralControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductoGeneralControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoGeneralControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoGeneralControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewProductoGeneral} [newProductoGeneral] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoGeneralControllerCreate(newProductoGeneral?: NewProductoGeneral, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductoGeneral>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoGeneralControllerCreate(newProductoGeneral, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoGeneralControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoGeneralControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ProductoGeneralFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoGeneralControllerFind(filter?: ProductoGeneralFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductoGeneralWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoGeneralControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoGeneralFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoGeneralControllerFindById(id: number, filter?: ProductoGeneralFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductoGeneralWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoGeneralControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoGeneral} [productoGeneral] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoGeneralControllerReplaceById(id: number, productoGeneral?: ProductoGeneral, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoGeneralControllerReplaceById(id, productoGeneral, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {ProductoGeneralPartial} [productoGeneralPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoGeneralControllerUpdateAll(where?: { [key: string]: object; }, productoGeneralPartial?: ProductoGeneralPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoGeneralControllerUpdateAll(where, productoGeneralPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoGeneralPartial} [productoGeneralPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoGeneralControllerUpdateById(id: number, productoGeneralPartial?: ProductoGeneralPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoGeneralControllerUpdateById(id, productoGeneralPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductoGeneralControllerApi - factory interface
 * @export
 */
export const ProductoGeneralControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductoGeneralControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoGeneralControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.productoGeneralControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewProductoGeneral} [newProductoGeneral] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoGeneralControllerCreate(newProductoGeneral?: NewProductoGeneral, options?: any): AxiosPromise<ProductoGeneral> {
            return localVarFp.productoGeneralControllerCreate(newProductoGeneral, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoGeneralControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.productoGeneralControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProductoGeneralFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoGeneralControllerFind(filter?: ProductoGeneralFilter1, options?: any): AxiosPromise<Array<ProductoGeneralWithRelations>> {
            return localVarFp.productoGeneralControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoGeneralFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoGeneralControllerFindById(id: number, filter?: ProductoGeneralFilter, options?: any): AxiosPromise<ProductoGeneralWithRelations> {
            return localVarFp.productoGeneralControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoGeneral} [productoGeneral] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoGeneralControllerReplaceById(id: number, productoGeneral?: ProductoGeneral, options?: any): AxiosPromise<any> {
            return localVarFp.productoGeneralControllerReplaceById(id, productoGeneral, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {ProductoGeneralPartial} [productoGeneralPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoGeneralControllerUpdateAll(where?: { [key: string]: object; }, productoGeneralPartial?: ProductoGeneralPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.productoGeneralControllerUpdateAll(where, productoGeneralPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoGeneralPartial} [productoGeneralPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoGeneralControllerUpdateById(id: number, productoGeneralPartial?: ProductoGeneralPartial, options?: any): AxiosPromise<any> {
            return localVarFp.productoGeneralControllerUpdateById(id, productoGeneralPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductoGeneralControllerApi - object-oriented interface
 * @export
 * @class ProductoGeneralControllerApi
 * @extends {BaseAPI}
 */
export class ProductoGeneralControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoGeneralControllerApi
     */
    public productoGeneralControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return ProductoGeneralControllerApiFp(this.configuration).productoGeneralControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewProductoGeneral} [newProductoGeneral] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoGeneralControllerApi
     */
    public productoGeneralControllerCreate(newProductoGeneral?: NewProductoGeneral, options?: AxiosRequestConfig) {
        return ProductoGeneralControllerApiFp(this.configuration).productoGeneralControllerCreate(newProductoGeneral, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoGeneralControllerApi
     */
    public productoGeneralControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return ProductoGeneralControllerApiFp(this.configuration).productoGeneralControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProductoGeneralFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoGeneralControllerApi
     */
    public productoGeneralControllerFind(filter?: ProductoGeneralFilter1, options?: AxiosRequestConfig) {
        return ProductoGeneralControllerApiFp(this.configuration).productoGeneralControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ProductoGeneralFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoGeneralControllerApi
     */
    public productoGeneralControllerFindById(id: number, filter?: ProductoGeneralFilter, options?: AxiosRequestConfig) {
        return ProductoGeneralControllerApiFp(this.configuration).productoGeneralControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ProductoGeneral} [productoGeneral] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoGeneralControllerApi
     */
    public productoGeneralControllerReplaceById(id: number, productoGeneral?: ProductoGeneral, options?: AxiosRequestConfig) {
        return ProductoGeneralControllerApiFp(this.configuration).productoGeneralControllerReplaceById(id, productoGeneral, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {ProductoGeneralPartial} [productoGeneralPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoGeneralControllerApi
     */
    public productoGeneralControllerUpdateAll(where?: { [key: string]: object; }, productoGeneralPartial?: ProductoGeneralPartial, options?: AxiosRequestConfig) {
        return ProductoGeneralControllerApiFp(this.configuration).productoGeneralControllerUpdateAll(where, productoGeneralPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ProductoGeneralPartial} [productoGeneralPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoGeneralControllerApi
     */
    public productoGeneralControllerUpdateById(id: number, productoGeneralPartial?: ProductoGeneralPartial, options?: AxiosRequestConfig) {
        return ProductoGeneralControllerApiFp(this.configuration).productoGeneralControllerUpdateById(id, productoGeneralPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductoMultimediaControllerApi - axios parameter creator
 * @export
 */
export const ProductoMultimediaControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoMultimediaControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/producto-multimedias/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewProductoMultimedia} [newProductoMultimedia] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoMultimediaControllerCreate: async (newProductoMultimedia?: NewProductoMultimedia, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/producto-multimedias`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newProductoMultimedia, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoMultimediaControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productoMultimediaControllerDeleteById', 'id', id)
            const localVarPath = `/producto-multimedias/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProductoMultimediaFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoMultimediaControllerFind: async (filter?: ProductoMultimediaFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/producto-multimedias`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoMultimediaFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoMultimediaControllerFindById: async (id: number, filter?: ProductoMultimediaFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productoMultimediaControllerFindById', 'id', id)
            const localVarPath = `/producto-multimedias/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoMultimedia} [productoMultimedia] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoMultimediaControllerReplaceById: async (id: number, productoMultimedia?: ProductoMultimedia, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productoMultimediaControllerReplaceById', 'id', id)
            const localVarPath = `/producto-multimedias/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productoMultimedia, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {ProductoMultimediaPartial} [productoMultimediaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoMultimediaControllerUpdateAll: async (where?: { [key: string]: object; }, productoMultimediaPartial?: ProductoMultimediaPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/producto-multimedias`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productoMultimediaPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoMultimediaPartial} [productoMultimediaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoMultimediaControllerUpdateById: async (id: number, productoMultimediaPartial?: ProductoMultimediaPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productoMultimediaControllerUpdateById', 'id', id)
            const localVarPath = `/producto-multimedias/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productoMultimediaPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductoMultimediaControllerApi - functional programming interface
 * @export
 */
export const ProductoMultimediaControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductoMultimediaControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoMultimediaControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoMultimediaControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewProductoMultimedia} [newProductoMultimedia] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoMultimediaControllerCreate(newProductoMultimedia?: NewProductoMultimedia, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductoMultimedia>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoMultimediaControllerCreate(newProductoMultimedia, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoMultimediaControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoMultimediaControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ProductoMultimediaFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoMultimediaControllerFind(filter?: ProductoMultimediaFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductoMultimediaWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoMultimediaControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoMultimediaFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoMultimediaControllerFindById(id: number, filter?: ProductoMultimediaFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductoMultimediaWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoMultimediaControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoMultimedia} [productoMultimedia] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoMultimediaControllerReplaceById(id: number, productoMultimedia?: ProductoMultimedia, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoMultimediaControllerReplaceById(id, productoMultimedia, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {ProductoMultimediaPartial} [productoMultimediaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoMultimediaControllerUpdateAll(where?: { [key: string]: object; }, productoMultimediaPartial?: ProductoMultimediaPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoMultimediaControllerUpdateAll(where, productoMultimediaPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoMultimediaPartial} [productoMultimediaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoMultimediaControllerUpdateById(id: number, productoMultimediaPartial?: ProductoMultimediaPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoMultimediaControllerUpdateById(id, productoMultimediaPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductoMultimediaControllerApi - factory interface
 * @export
 */
export const ProductoMultimediaControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductoMultimediaControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoMultimediaControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.productoMultimediaControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewProductoMultimedia} [newProductoMultimedia] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoMultimediaControllerCreate(newProductoMultimedia?: NewProductoMultimedia, options?: any): AxiosPromise<ProductoMultimedia> {
            return localVarFp.productoMultimediaControllerCreate(newProductoMultimedia, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoMultimediaControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.productoMultimediaControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProductoMultimediaFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoMultimediaControllerFind(filter?: ProductoMultimediaFilter1, options?: any): AxiosPromise<Array<ProductoMultimediaWithRelations>> {
            return localVarFp.productoMultimediaControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoMultimediaFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoMultimediaControllerFindById(id: number, filter?: ProductoMultimediaFilter, options?: any): AxiosPromise<ProductoMultimediaWithRelations> {
            return localVarFp.productoMultimediaControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoMultimedia} [productoMultimedia] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoMultimediaControllerReplaceById(id: number, productoMultimedia?: ProductoMultimedia, options?: any): AxiosPromise<any> {
            return localVarFp.productoMultimediaControllerReplaceById(id, productoMultimedia, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {ProductoMultimediaPartial} [productoMultimediaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoMultimediaControllerUpdateAll(where?: { [key: string]: object; }, productoMultimediaPartial?: ProductoMultimediaPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.productoMultimediaControllerUpdateAll(where, productoMultimediaPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductoMultimediaPartial} [productoMultimediaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoMultimediaControllerUpdateById(id: number, productoMultimediaPartial?: ProductoMultimediaPartial, options?: any): AxiosPromise<any> {
            return localVarFp.productoMultimediaControllerUpdateById(id, productoMultimediaPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductoMultimediaControllerApi - object-oriented interface
 * @export
 * @class ProductoMultimediaControllerApi
 * @extends {BaseAPI}
 */
export class ProductoMultimediaControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoMultimediaControllerApi
     */
    public productoMultimediaControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return ProductoMultimediaControllerApiFp(this.configuration).productoMultimediaControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewProductoMultimedia} [newProductoMultimedia] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoMultimediaControllerApi
     */
    public productoMultimediaControllerCreate(newProductoMultimedia?: NewProductoMultimedia, options?: AxiosRequestConfig) {
        return ProductoMultimediaControllerApiFp(this.configuration).productoMultimediaControllerCreate(newProductoMultimedia, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoMultimediaControllerApi
     */
    public productoMultimediaControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return ProductoMultimediaControllerApiFp(this.configuration).productoMultimediaControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProductoMultimediaFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoMultimediaControllerApi
     */
    public productoMultimediaControllerFind(filter?: ProductoMultimediaFilter1, options?: AxiosRequestConfig) {
        return ProductoMultimediaControllerApiFp(this.configuration).productoMultimediaControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ProductoMultimediaFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoMultimediaControllerApi
     */
    public productoMultimediaControllerFindById(id: number, filter?: ProductoMultimediaFilter, options?: AxiosRequestConfig) {
        return ProductoMultimediaControllerApiFp(this.configuration).productoMultimediaControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ProductoMultimedia} [productoMultimedia] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoMultimediaControllerApi
     */
    public productoMultimediaControllerReplaceById(id: number, productoMultimedia?: ProductoMultimedia, options?: AxiosRequestConfig) {
        return ProductoMultimediaControllerApiFp(this.configuration).productoMultimediaControllerReplaceById(id, productoMultimedia, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {ProductoMultimediaPartial} [productoMultimediaPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoMultimediaControllerApi
     */
    public productoMultimediaControllerUpdateAll(where?: { [key: string]: object; }, productoMultimediaPartial?: ProductoMultimediaPartial, options?: AxiosRequestConfig) {
        return ProductoMultimediaControllerApiFp(this.configuration).productoMultimediaControllerUpdateAll(where, productoMultimediaPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ProductoMultimediaPartial} [productoMultimediaPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductoMultimediaControllerApi
     */
    public productoMultimediaControllerUpdateById(id: number, productoMultimediaPartial?: ProductoMultimediaPartial, options?: AxiosRequestConfig) {
        return ProductoMultimediaControllerApiFp(this.configuration).productoMultimediaControllerUpdateById(id, productoMultimediaPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductosControllerApi - axios parameter creator
 * @export
 */
export const ProductosControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productosControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/productos/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewProductos} [newProductos] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productosControllerCreate: async (newProductos?: NewProductos, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/productos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newProductos, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productosControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productosControllerDeleteById', 'id', id)
            const localVarPath = `/productos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProductosFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productosControllerFind: async (filter?: ProductosFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/productos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductosFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productosControllerFindById: async (id: number, filter?: ProductosFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productosControllerFindById', 'id', id)
            const localVarPath = `/productos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productosControllerGetNextId: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/productos/getNextId`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Productos} [productos] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productosControllerReplaceById: async (id: number, productos?: Productos, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productosControllerReplaceById', 'id', id)
            const localVarPath = `/productos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productos, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {ProductosPartial} [productosPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productosControllerUpdateAll: async (where?: { [key: string]: object; }, productosPartial?: ProductosPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/productos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productosPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductosPartial} [productosPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productosControllerUpdateById: async (id: number, productosPartial?: ProductosPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productosControllerUpdateById', 'id', id)
            const localVarPath = `/productos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productosPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductosControllerApi - functional programming interface
 * @export
 */
export const ProductosControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductosControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productosControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productosControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewProductos} [newProductos] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productosControllerCreate(newProductos?: NewProductos, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Productos>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productosControllerCreate(newProductos, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productosControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productosControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ProductosFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productosControllerFind(filter?: ProductosFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductosWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productosControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductosFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productosControllerFindById(id: number, filter?: ProductosFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductosWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productosControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productosControllerGetNextId(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productosControllerGetNextId(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Productos} [productos] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productosControllerReplaceById(id: number, productos?: Productos, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productosControllerReplaceById(id, productos, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {ProductosPartial} [productosPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productosControllerUpdateAll(where?: { [key: string]: object; }, productosPartial?: ProductosPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productosControllerUpdateAll(where, productosPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductosPartial} [productosPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productosControllerUpdateById(id: number, productosPartial?: ProductosPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productosControllerUpdateById(id, productosPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductosControllerApi - factory interface
 * @export
 */
export const ProductosControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductosControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productosControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.productosControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewProductos} [newProductos] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productosControllerCreate(newProductos?: NewProductos, options?: any): AxiosPromise<Productos> {
            return localVarFp.productosControllerCreate(newProductos, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productosControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.productosControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProductosFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productosControllerFind(filter?: ProductosFilter1, options?: any): AxiosPromise<Array<ProductosWithRelations>> {
            return localVarFp.productosControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductosFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productosControllerFindById(id: number, filter?: ProductosFilter, options?: any): AxiosPromise<ProductosWithRelations> {
            return localVarFp.productosControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productosControllerGetNextId(options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.productosControllerGetNextId(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Productos} [productos] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productosControllerReplaceById(id: number, productos?: Productos, options?: any): AxiosPromise<any> {
            return localVarFp.productosControllerReplaceById(id, productos, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {ProductosPartial} [productosPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productosControllerUpdateAll(where?: { [key: string]: object; }, productosPartial?: ProductosPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.productosControllerUpdateAll(where, productosPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductosPartial} [productosPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productosControllerUpdateById(id: number, productosPartial?: ProductosPartial, options?: any): AxiosPromise<any> {
            return localVarFp.productosControllerUpdateById(id, productosPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductosControllerApi - object-oriented interface
 * @export
 * @class ProductosControllerApi
 * @extends {BaseAPI}
 */
export class ProductosControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductosControllerApi
     */
    public productosControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return ProductosControllerApiFp(this.configuration).productosControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewProductos} [newProductos] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductosControllerApi
     */
    public productosControllerCreate(newProductos?: NewProductos, options?: AxiosRequestConfig) {
        return ProductosControllerApiFp(this.configuration).productosControllerCreate(newProductos, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductosControllerApi
     */
    public productosControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return ProductosControllerApiFp(this.configuration).productosControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProductosFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductosControllerApi
     */
    public productosControllerFind(filter?: ProductosFilter1, options?: AxiosRequestConfig) {
        return ProductosControllerApiFp(this.configuration).productosControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ProductosFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductosControllerApi
     */
    public productosControllerFindById(id: number, filter?: ProductosFilter, options?: AxiosRequestConfig) {
        return ProductosControllerApiFp(this.configuration).productosControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductosControllerApi
     */
    public productosControllerGetNextId(options?: AxiosRequestConfig) {
        return ProductosControllerApiFp(this.configuration).productosControllerGetNextId(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Productos} [productos] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductosControllerApi
     */
    public productosControllerReplaceById(id: number, productos?: Productos, options?: AxiosRequestConfig) {
        return ProductosControllerApiFp(this.configuration).productosControllerReplaceById(id, productos, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {ProductosPartial} [productosPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductosControllerApi
     */
    public productosControllerUpdateAll(where?: { [key: string]: object; }, productosPartial?: ProductosPartial, options?: AxiosRequestConfig) {
        return ProductosControllerApiFp(this.configuration).productosControllerUpdateAll(where, productosPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ProductosPartial} [productosPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductosControllerApi
     */
    public productosControllerUpdateById(id: number, productosPartial?: ProductosPartial, options?: AxiosRequestConfig) {
        return ProductosControllerApiFp(this.configuration).productosControllerUpdateById(id, productosPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RelacionRolPermisosControllerApi - axios parameter creator
 * @export
 */
export const RelacionRolPermisosControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {NewRelacionRolesPermisos} [newRelacionRolesPermisos] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        relacionRolPermisosControllerCreate: async (id: number, newRelacionRolesPermisos?: NewRelacionRolesPermisos, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('relacionRolPermisosControllerCreate', 'id', id)
            const localVarPath = `/roles/{id}/permisos`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newRelacionRolesPermisos, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        relacionRolPermisosControllerDelete: async (id: number, where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('relacionRolPermisosControllerDelete', 'id', id)
            const localVarPath = `/roles/{id}/permisos`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {{ [key: string]: object; }} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        relacionRolPermisosControllerFind: async (id: number, filter?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('relacionRolPermisosControllerFind', 'id', id)
            const localVarPath = `/roles/{id}/permisos`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {{ [key: string]: object; }} [where] 
         * @param {PermisosPartial} [permisosPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        relacionRolPermisosControllerPatch: async (id: number, where?: { [key: string]: object; }, permisosPartial?: PermisosPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('relacionRolPermisosControllerPatch', 'id', id)
            const localVarPath = `/roles/{id}/permisos`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(permisosPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RelacionRolPermisosControllerApi - functional programming interface
 * @export
 */
export const RelacionRolPermisosControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RelacionRolPermisosControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {NewRelacionRolesPermisos} [newRelacionRolesPermisos] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async relacionRolPermisosControllerCreate(id: number, newRelacionRolesPermisos?: NewRelacionRolesPermisos, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Permisos>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.relacionRolPermisosControllerCreate(id, newRelacionRolesPermisos, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async relacionRolPermisosControllerDelete(id: number, where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.relacionRolPermisosControllerDelete(id, where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {{ [key: string]: object; }} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async relacionRolPermisosControllerFind(id: number, filter?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Permisos>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.relacionRolPermisosControllerFind(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {{ [key: string]: object; }} [where] 
         * @param {PermisosPartial} [permisosPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async relacionRolPermisosControllerPatch(id: number, where?: { [key: string]: object; }, permisosPartial?: PermisosPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.relacionRolPermisosControllerPatch(id, where, permisosPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RelacionRolPermisosControllerApi - factory interface
 * @export
 */
export const RelacionRolPermisosControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RelacionRolPermisosControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {NewRelacionRolesPermisos} [newRelacionRolesPermisos] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        relacionRolPermisosControllerCreate(id: number, newRelacionRolesPermisos?: NewRelacionRolesPermisos, options?: any): AxiosPromise<Permisos> {
            return localVarFp.relacionRolPermisosControllerCreate(id, newRelacionRolesPermisos, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        relacionRolPermisosControllerDelete(id: number, where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.relacionRolPermisosControllerDelete(id, where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {{ [key: string]: object; }} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        relacionRolPermisosControllerFind(id: number, filter?: { [key: string]: object; }, options?: any): AxiosPromise<Array<Permisos>> {
            return localVarFp.relacionRolPermisosControllerFind(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {{ [key: string]: object; }} [where] 
         * @param {PermisosPartial} [permisosPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        relacionRolPermisosControllerPatch(id: number, where?: { [key: string]: object; }, permisosPartial?: PermisosPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.relacionRolPermisosControllerPatch(id, where, permisosPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RelacionRolPermisosControllerApi - object-oriented interface
 * @export
 * @class RelacionRolPermisosControllerApi
 * @extends {BaseAPI}
 */
export class RelacionRolPermisosControllerApi extends BaseAPI {
    /**
     * 
     * @param {number} id 
     * @param {NewRelacionRolesPermisos} [newRelacionRolesPermisos] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelacionRolPermisosControllerApi
     */
    public relacionRolPermisosControllerCreate(id: number, newRelacionRolesPermisos?: NewRelacionRolesPermisos, options?: AxiosRequestConfig) {
        return RelacionRolPermisosControllerApiFp(this.configuration).relacionRolPermisosControllerCreate(id, newRelacionRolesPermisos, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelacionRolPermisosControllerApi
     */
    public relacionRolPermisosControllerDelete(id: number, where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return RelacionRolPermisosControllerApiFp(this.configuration).relacionRolPermisosControllerDelete(id, where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {{ [key: string]: object; }} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelacionRolPermisosControllerApi
     */
    public relacionRolPermisosControllerFind(id: number, filter?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return RelacionRolPermisosControllerApiFp(this.configuration).relacionRolPermisosControllerFind(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {{ [key: string]: object; }} [where] 
     * @param {PermisosPartial} [permisosPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelacionRolPermisosControllerApi
     */
    public relacionRolPermisosControllerPatch(id: number, where?: { [key: string]: object; }, permisosPartial?: PermisosPartial, options?: AxiosRequestConfig) {
        return RelacionRolPermisosControllerApiFp(this.configuration).relacionRolPermisosControllerPatch(id, where, permisosPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RememberTokensControllerApi - axios parameter creator
 * @export
 */
export const RememberTokensControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rememberTokensControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/remember-tokens/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewRememberTokens} [newRememberTokens] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rememberTokensControllerCreate: async (newRememberTokens?: NewRememberTokens, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/remember-tokens`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newRememberTokens, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rememberTokensControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rememberTokensControllerDeleteById', 'id', id)
            const localVarPath = `/remember-tokens/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RememberTokensFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rememberTokensControllerFind: async (filter?: RememberTokensFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/remember-tokens`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {RememberTokensFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rememberTokensControllerFindById: async (id: number, filter?: RememberTokensFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rememberTokensControllerFindById', 'id', id)
            const localVarPath = `/remember-tokens/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {RememberTokens} [rememberTokens] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rememberTokensControllerReplaceById: async (id: number, rememberTokens?: RememberTokens, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rememberTokensControllerReplaceById', 'id', id)
            const localVarPath = `/remember-tokens/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(rememberTokens, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {RememberTokensPartial} [rememberTokensPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rememberTokensControllerUpdateAll: async (where?: { [key: string]: object; }, rememberTokensPartial?: RememberTokensPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/remember-tokens`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(rememberTokensPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {RememberTokensPartial} [rememberTokensPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rememberTokensControllerUpdateById: async (id: number, rememberTokensPartial?: RememberTokensPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rememberTokensControllerUpdateById', 'id', id)
            const localVarPath = `/remember-tokens/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(rememberTokensPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RememberTokensControllerApi - functional programming interface
 * @export
 */
export const RememberTokensControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RememberTokensControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rememberTokensControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rememberTokensControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewRememberTokens} [newRememberTokens] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rememberTokensControllerCreate(newRememberTokens?: NewRememberTokens, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RememberTokens>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rememberTokensControllerCreate(newRememberTokens, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rememberTokensControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rememberTokensControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RememberTokensFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rememberTokensControllerFind(filter?: RememberTokensFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RememberTokensWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rememberTokensControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {RememberTokensFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rememberTokensControllerFindById(id: number, filter?: RememberTokensFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RememberTokensWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rememberTokensControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {RememberTokens} [rememberTokens] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rememberTokensControllerReplaceById(id: number, rememberTokens?: RememberTokens, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rememberTokensControllerReplaceById(id, rememberTokens, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {RememberTokensPartial} [rememberTokensPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rememberTokensControllerUpdateAll(where?: { [key: string]: object; }, rememberTokensPartial?: RememberTokensPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rememberTokensControllerUpdateAll(where, rememberTokensPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {RememberTokensPartial} [rememberTokensPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rememberTokensControllerUpdateById(id: number, rememberTokensPartial?: RememberTokensPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rememberTokensControllerUpdateById(id, rememberTokensPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RememberTokensControllerApi - factory interface
 * @export
 */
export const RememberTokensControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RememberTokensControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rememberTokensControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.rememberTokensControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewRememberTokens} [newRememberTokens] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rememberTokensControllerCreate(newRememberTokens?: NewRememberTokens, options?: any): AxiosPromise<RememberTokens> {
            return localVarFp.rememberTokensControllerCreate(newRememberTokens, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rememberTokensControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.rememberTokensControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RememberTokensFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rememberTokensControllerFind(filter?: RememberTokensFilter1, options?: any): AxiosPromise<Array<RememberTokensWithRelations>> {
            return localVarFp.rememberTokensControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {RememberTokensFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rememberTokensControllerFindById(id: number, filter?: RememberTokensFilter, options?: any): AxiosPromise<RememberTokensWithRelations> {
            return localVarFp.rememberTokensControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {RememberTokens} [rememberTokens] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rememberTokensControllerReplaceById(id: number, rememberTokens?: RememberTokens, options?: any): AxiosPromise<any> {
            return localVarFp.rememberTokensControllerReplaceById(id, rememberTokens, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {RememberTokensPartial} [rememberTokensPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rememberTokensControllerUpdateAll(where?: { [key: string]: object; }, rememberTokensPartial?: RememberTokensPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.rememberTokensControllerUpdateAll(where, rememberTokensPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {RememberTokensPartial} [rememberTokensPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rememberTokensControllerUpdateById(id: number, rememberTokensPartial?: RememberTokensPartial, options?: any): AxiosPromise<any> {
            return localVarFp.rememberTokensControllerUpdateById(id, rememberTokensPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RememberTokensControllerApi - object-oriented interface
 * @export
 * @class RememberTokensControllerApi
 * @extends {BaseAPI}
 */
export class RememberTokensControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RememberTokensControllerApi
     */
    public rememberTokensControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return RememberTokensControllerApiFp(this.configuration).rememberTokensControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewRememberTokens} [newRememberTokens] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RememberTokensControllerApi
     */
    public rememberTokensControllerCreate(newRememberTokens?: NewRememberTokens, options?: AxiosRequestConfig) {
        return RememberTokensControllerApiFp(this.configuration).rememberTokensControllerCreate(newRememberTokens, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RememberTokensControllerApi
     */
    public rememberTokensControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return RememberTokensControllerApiFp(this.configuration).rememberTokensControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RememberTokensFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RememberTokensControllerApi
     */
    public rememberTokensControllerFind(filter?: RememberTokensFilter1, options?: AxiosRequestConfig) {
        return RememberTokensControllerApiFp(this.configuration).rememberTokensControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {RememberTokensFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RememberTokensControllerApi
     */
    public rememberTokensControllerFindById(id: number, filter?: RememberTokensFilter, options?: AxiosRequestConfig) {
        return RememberTokensControllerApiFp(this.configuration).rememberTokensControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {RememberTokens} [rememberTokens] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RememberTokensControllerApi
     */
    public rememberTokensControllerReplaceById(id: number, rememberTokens?: RememberTokens, options?: AxiosRequestConfig) {
        return RememberTokensControllerApiFp(this.configuration).rememberTokensControllerReplaceById(id, rememberTokens, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {RememberTokensPartial} [rememberTokensPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RememberTokensControllerApi
     */
    public rememberTokensControllerUpdateAll(where?: { [key: string]: object; }, rememberTokensPartial?: RememberTokensPartial, options?: AxiosRequestConfig) {
        return RememberTokensControllerApiFp(this.configuration).rememberTokensControllerUpdateAll(where, rememberTokensPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {RememberTokensPartial} [rememberTokensPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RememberTokensControllerApi
     */
    public rememberTokensControllerUpdateById(id: number, rememberTokensPartial?: RememberTokensPartial, options?: AxiosRequestConfig) {
        return RememberTokensControllerApiFp(this.configuration).rememberTokensControllerUpdateById(id, rememberTokensPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ResetPasswordsControllerApi - axios parameter creator
 * @export
 */
export const ResetPasswordsControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPasswordsControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/reset-passwords/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewResetPasswords} [newResetPasswords] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPasswordsControllerCreate: async (newResetPasswords?: NewResetPasswords, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/reset-passwords`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newResetPasswords, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPasswordsControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('resetPasswordsControllerDeleteById', 'id', id)
            const localVarPath = `/reset-passwords/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ResetPasswordsFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPasswordsControllerFind: async (filter?: ResetPasswordsFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/reset-passwords`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ResetPasswordsFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPasswordsControllerFindById: async (id: number, filter?: ResetPasswordsFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('resetPasswordsControllerFindById', 'id', id)
            const localVarPath = `/reset-passwords/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ResetPasswords} [resetPasswords] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPasswordsControllerReplaceById: async (id: number, resetPasswords?: ResetPasswords, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('resetPasswordsControllerReplaceById', 'id', id)
            const localVarPath = `/reset-passwords/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resetPasswords, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {ResetPasswordsPartial} [resetPasswordsPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPasswordsControllerUpdateAll: async (where?: { [key: string]: object; }, resetPasswordsPartial?: ResetPasswordsPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/reset-passwords`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resetPasswordsPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ResetPasswordsPartial} [resetPasswordsPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPasswordsControllerUpdateById: async (id: number, resetPasswordsPartial?: ResetPasswordsPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('resetPasswordsControllerUpdateById', 'id', id)
            const localVarPath = `/reset-passwords/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resetPasswordsPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ResetPasswordsControllerApi - functional programming interface
 * @export
 */
export const ResetPasswordsControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ResetPasswordsControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetPasswordsControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetPasswordsControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewResetPasswords} [newResetPasswords] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetPasswordsControllerCreate(newResetPasswords?: NewResetPasswords, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResetPasswords>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetPasswordsControllerCreate(newResetPasswords, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetPasswordsControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetPasswordsControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ResetPasswordsFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetPasswordsControllerFind(filter?: ResetPasswordsFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ResetPasswordsWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetPasswordsControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ResetPasswordsFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetPasswordsControllerFindById(id: number, filter?: ResetPasswordsFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResetPasswordsWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetPasswordsControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ResetPasswords} [resetPasswords] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetPasswordsControllerReplaceById(id: number, resetPasswords?: ResetPasswords, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetPasswordsControllerReplaceById(id, resetPasswords, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {ResetPasswordsPartial} [resetPasswordsPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetPasswordsControllerUpdateAll(where?: { [key: string]: object; }, resetPasswordsPartial?: ResetPasswordsPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetPasswordsControllerUpdateAll(where, resetPasswordsPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ResetPasswordsPartial} [resetPasswordsPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetPasswordsControllerUpdateById(id: number, resetPasswordsPartial?: ResetPasswordsPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetPasswordsControllerUpdateById(id, resetPasswordsPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ResetPasswordsControllerApi - factory interface
 * @export
 */
export const ResetPasswordsControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ResetPasswordsControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPasswordsControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.resetPasswordsControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewResetPasswords} [newResetPasswords] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPasswordsControllerCreate(newResetPasswords?: NewResetPasswords, options?: any): AxiosPromise<ResetPasswords> {
            return localVarFp.resetPasswordsControllerCreate(newResetPasswords, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPasswordsControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.resetPasswordsControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ResetPasswordsFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPasswordsControllerFind(filter?: ResetPasswordsFilter1, options?: any): AxiosPromise<Array<ResetPasswordsWithRelations>> {
            return localVarFp.resetPasswordsControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ResetPasswordsFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPasswordsControllerFindById(id: number, filter?: ResetPasswordsFilter, options?: any): AxiosPromise<ResetPasswordsWithRelations> {
            return localVarFp.resetPasswordsControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ResetPasswords} [resetPasswords] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPasswordsControllerReplaceById(id: number, resetPasswords?: ResetPasswords, options?: any): AxiosPromise<any> {
            return localVarFp.resetPasswordsControllerReplaceById(id, resetPasswords, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {ResetPasswordsPartial} [resetPasswordsPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPasswordsControllerUpdateAll(where?: { [key: string]: object; }, resetPasswordsPartial?: ResetPasswordsPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.resetPasswordsControllerUpdateAll(where, resetPasswordsPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ResetPasswordsPartial} [resetPasswordsPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPasswordsControllerUpdateById(id: number, resetPasswordsPartial?: ResetPasswordsPartial, options?: any): AxiosPromise<any> {
            return localVarFp.resetPasswordsControllerUpdateById(id, resetPasswordsPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ResetPasswordsControllerApi - object-oriented interface
 * @export
 * @class ResetPasswordsControllerApi
 * @extends {BaseAPI}
 */
export class ResetPasswordsControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResetPasswordsControllerApi
     */
    public resetPasswordsControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return ResetPasswordsControllerApiFp(this.configuration).resetPasswordsControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewResetPasswords} [newResetPasswords] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResetPasswordsControllerApi
     */
    public resetPasswordsControllerCreate(newResetPasswords?: NewResetPasswords, options?: AxiosRequestConfig) {
        return ResetPasswordsControllerApiFp(this.configuration).resetPasswordsControllerCreate(newResetPasswords, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResetPasswordsControllerApi
     */
    public resetPasswordsControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return ResetPasswordsControllerApiFp(this.configuration).resetPasswordsControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ResetPasswordsFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResetPasswordsControllerApi
     */
    public resetPasswordsControllerFind(filter?: ResetPasswordsFilter1, options?: AxiosRequestConfig) {
        return ResetPasswordsControllerApiFp(this.configuration).resetPasswordsControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ResetPasswordsFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResetPasswordsControllerApi
     */
    public resetPasswordsControllerFindById(id: number, filter?: ResetPasswordsFilter, options?: AxiosRequestConfig) {
        return ResetPasswordsControllerApiFp(this.configuration).resetPasswordsControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ResetPasswords} [resetPasswords] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResetPasswordsControllerApi
     */
    public resetPasswordsControllerReplaceById(id: number, resetPasswords?: ResetPasswords, options?: AxiosRequestConfig) {
        return ResetPasswordsControllerApiFp(this.configuration).resetPasswordsControllerReplaceById(id, resetPasswords, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {ResetPasswordsPartial} [resetPasswordsPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResetPasswordsControllerApi
     */
    public resetPasswordsControllerUpdateAll(where?: { [key: string]: object; }, resetPasswordsPartial?: ResetPasswordsPartial, options?: AxiosRequestConfig) {
        return ResetPasswordsControllerApiFp(this.configuration).resetPasswordsControllerUpdateAll(where, resetPasswordsPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ResetPasswordsPartial} [resetPasswordsPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResetPasswordsControllerApi
     */
    public resetPasswordsControllerUpdateById(id: number, resetPasswordsPartial?: ResetPasswordsPartial, options?: AxiosRequestConfig) {
        return ResetPasswordsControllerApiFp(this.configuration).resetPasswordsControllerUpdateById(id, resetPasswordsPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RolesControllerApi - axios parameter creator
 * @export
 */
export const RolesControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/roles/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewRoles} [newRoles] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerCreate: async (newRoles?: NewRoles, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newRoles, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rolesControllerDeleteById', 'id', id)
            const localVarPath = `/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RolesFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerFind: async (filter?: RolesFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {RolesFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerFindById: async (id: number, filter?: RolesFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rolesControllerFindById', 'id', id)
            const localVarPath = `/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Roles} [roles] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerReplaceById: async (id: number, roles?: Roles, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rolesControllerReplaceById', 'id', id)
            const localVarPath = `/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(roles, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {RolesPartial} [rolesPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerUpdateAll: async (where?: { [key: string]: object; }, rolesPartial?: RolesPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(rolesPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {RolesPartial} [rolesPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerUpdateById: async (id: number, rolesPartial?: RolesPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rolesControllerUpdateById', 'id', id)
            const localVarPath = `/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(rolesPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RolesControllerApi - functional programming interface
 * @export
 */
export const RolesControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RolesControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolesControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewRoles} [newRoles] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesControllerCreate(newRoles?: NewRoles, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Roles>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolesControllerCreate(newRoles, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolesControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RolesFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesControllerFind(filter?: RolesFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RolesWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolesControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {RolesFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesControllerFindById(id: number, filter?: RolesFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RolesWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolesControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Roles} [roles] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesControllerReplaceById(id: number, roles?: Roles, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolesControllerReplaceById(id, roles, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {RolesPartial} [rolesPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesControllerUpdateAll(where?: { [key: string]: object; }, rolesPartial?: RolesPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolesControllerUpdateAll(where, rolesPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {RolesPartial} [rolesPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesControllerUpdateById(id: number, rolesPartial?: RolesPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolesControllerUpdateById(id, rolesPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RolesControllerApi - factory interface
 * @export
 */
export const RolesControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RolesControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.rolesControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewRoles} [newRoles] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerCreate(newRoles?: NewRoles, options?: any): AxiosPromise<Roles> {
            return localVarFp.rolesControllerCreate(newRoles, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.rolesControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RolesFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerFind(filter?: RolesFilter1, options?: any): AxiosPromise<Array<RolesWithRelations>> {
            return localVarFp.rolesControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {RolesFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerFindById(id: number, filter?: RolesFilter, options?: any): AxiosPromise<RolesWithRelations> {
            return localVarFp.rolesControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Roles} [roles] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerReplaceById(id: number, roles?: Roles, options?: any): AxiosPromise<any> {
            return localVarFp.rolesControllerReplaceById(id, roles, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {RolesPartial} [rolesPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerUpdateAll(where?: { [key: string]: object; }, rolesPartial?: RolesPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.rolesControllerUpdateAll(where, rolesPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {RolesPartial} [rolesPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerUpdateById(id: number, rolesPartial?: RolesPartial, options?: any): AxiosPromise<any> {
            return localVarFp.rolesControllerUpdateById(id, rolesPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RolesControllerApi - object-oriented interface
 * @export
 * @class RolesControllerApi
 * @extends {BaseAPI}
 */
export class RolesControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesControllerApi
     */
    public rolesControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return RolesControllerApiFp(this.configuration).rolesControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewRoles} [newRoles] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesControllerApi
     */
    public rolesControllerCreate(newRoles?: NewRoles, options?: AxiosRequestConfig) {
        return RolesControllerApiFp(this.configuration).rolesControllerCreate(newRoles, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesControllerApi
     */
    public rolesControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return RolesControllerApiFp(this.configuration).rolesControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RolesFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesControllerApi
     */
    public rolesControllerFind(filter?: RolesFilter1, options?: AxiosRequestConfig) {
        return RolesControllerApiFp(this.configuration).rolesControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {RolesFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesControllerApi
     */
    public rolesControllerFindById(id: number, filter?: RolesFilter, options?: AxiosRequestConfig) {
        return RolesControllerApiFp(this.configuration).rolesControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Roles} [roles] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesControllerApi
     */
    public rolesControllerReplaceById(id: number, roles?: Roles, options?: AxiosRequestConfig) {
        return RolesControllerApiFp(this.configuration).rolesControllerReplaceById(id, roles, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {RolesPartial} [rolesPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesControllerApi
     */
    public rolesControllerUpdateAll(where?: { [key: string]: object; }, rolesPartial?: RolesPartial, options?: AxiosRequestConfig) {
        return RolesControllerApiFp(this.configuration).rolesControllerUpdateAll(where, rolesPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {RolesPartial} [rolesPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesControllerApi
     */
    public rolesControllerUpdateById(id: number, rolesPartial?: RolesPartial, options?: AxiosRequestConfig) {
        return RolesControllerApiFp(this.configuration).rolesControllerUpdateById(id, rolesPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SessionsControllerApi - axios parameter creator
 * @export
 */
export const SessionsControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sessions/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewSessions} [newSessions] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsControllerCreate: async (newSessions?: NewSessions, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sessions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newSessions, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('sessionsControllerDeleteById', 'id', id)
            const localVarPath = `/sessions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SessionsFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsControllerFind: async (filter?: SessionsFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sessions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {SessionsFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsControllerFindById: async (id: number, filter?: SessionsFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('sessionsControllerFindById', 'id', id)
            const localVarPath = `/sessions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Sessions} [sessions] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsControllerReplaceById: async (id: number, sessions?: Sessions, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('sessionsControllerReplaceById', 'id', id)
            const localVarPath = `/sessions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sessions, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {SessionsPartial} [sessionsPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsControllerUpdateAll: async (where?: { [key: string]: object; }, sessionsPartial?: SessionsPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sessions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sessionsPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {SessionsPartial} [sessionsPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsControllerUpdateById: async (id: number, sessionsPartial?: SessionsPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('sessionsControllerUpdateById', 'id', id)
            const localVarPath = `/sessions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sessionsPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SessionsControllerApi - functional programming interface
 * @export
 */
export const SessionsControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SessionsControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sessionsControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sessionsControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewSessions} [newSessions] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sessionsControllerCreate(newSessions?: NewSessions, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Sessions>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sessionsControllerCreate(newSessions, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sessionsControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sessionsControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SessionsFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sessionsControllerFind(filter?: SessionsFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SessionsWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sessionsControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {SessionsFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sessionsControllerFindById(id: number, filter?: SessionsFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SessionsWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sessionsControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Sessions} [sessions] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sessionsControllerReplaceById(id: number, sessions?: Sessions, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sessionsControllerReplaceById(id, sessions, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {SessionsPartial} [sessionsPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sessionsControllerUpdateAll(where?: { [key: string]: object; }, sessionsPartial?: SessionsPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sessionsControllerUpdateAll(where, sessionsPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {SessionsPartial} [sessionsPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sessionsControllerUpdateById(id: number, sessionsPartial?: SessionsPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sessionsControllerUpdateById(id, sessionsPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SessionsControllerApi - factory interface
 * @export
 */
export const SessionsControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SessionsControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.sessionsControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewSessions} [newSessions] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsControllerCreate(newSessions?: NewSessions, options?: any): AxiosPromise<Sessions> {
            return localVarFp.sessionsControllerCreate(newSessions, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.sessionsControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SessionsFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsControllerFind(filter?: SessionsFilter1, options?: any): AxiosPromise<Array<SessionsWithRelations>> {
            return localVarFp.sessionsControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {SessionsFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsControllerFindById(id: number, filter?: SessionsFilter, options?: any): AxiosPromise<SessionsWithRelations> {
            return localVarFp.sessionsControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Sessions} [sessions] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsControllerReplaceById(id: number, sessions?: Sessions, options?: any): AxiosPromise<any> {
            return localVarFp.sessionsControllerReplaceById(id, sessions, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {SessionsPartial} [sessionsPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsControllerUpdateAll(where?: { [key: string]: object; }, sessionsPartial?: SessionsPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.sessionsControllerUpdateAll(where, sessionsPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {SessionsPartial} [sessionsPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsControllerUpdateById(id: number, sessionsPartial?: SessionsPartial, options?: any): AxiosPromise<any> {
            return localVarFp.sessionsControllerUpdateById(id, sessionsPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SessionsControllerApi - object-oriented interface
 * @export
 * @class SessionsControllerApi
 * @extends {BaseAPI}
 */
export class SessionsControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsControllerApi
     */
    public sessionsControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return SessionsControllerApiFp(this.configuration).sessionsControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewSessions} [newSessions] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsControllerApi
     */
    public sessionsControllerCreate(newSessions?: NewSessions, options?: AxiosRequestConfig) {
        return SessionsControllerApiFp(this.configuration).sessionsControllerCreate(newSessions, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsControllerApi
     */
    public sessionsControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return SessionsControllerApiFp(this.configuration).sessionsControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SessionsFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsControllerApi
     */
    public sessionsControllerFind(filter?: SessionsFilter1, options?: AxiosRequestConfig) {
        return SessionsControllerApiFp(this.configuration).sessionsControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {SessionsFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsControllerApi
     */
    public sessionsControllerFindById(id: number, filter?: SessionsFilter, options?: AxiosRequestConfig) {
        return SessionsControllerApiFp(this.configuration).sessionsControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Sessions} [sessions] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsControllerApi
     */
    public sessionsControllerReplaceById(id: number, sessions?: Sessions, options?: AxiosRequestConfig) {
        return SessionsControllerApiFp(this.configuration).sessionsControllerReplaceById(id, sessions, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {SessionsPartial} [sessionsPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsControllerApi
     */
    public sessionsControllerUpdateAll(where?: { [key: string]: object; }, sessionsPartial?: SessionsPartial, options?: AxiosRequestConfig) {
        return SessionsControllerApiFp(this.configuration).sessionsControllerUpdateAll(where, sessionsPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {SessionsPartial} [sessionsPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsControllerApi
     */
    public sessionsControllerUpdateById(id: number, sessionsPartial?: SessionsPartial, options?: AxiosRequestConfig) {
        return SessionsControllerApiFp(this.configuration).sessionsControllerUpdateById(id, sessionsPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SettingsControllerApi - axios parameter creator
 * @export
 */
export const SettingsControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/settings/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewSettings} [newSettings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsControllerCreate: async (newSettings?: NewSettings, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newSettings, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('settingsControllerDeleteById', 'id', id)
            const localVarPath = `/settings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SettingsFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsControllerFind: async (filter?: SettingsFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {SettingsFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsControllerFindById: async (id: number, filter?: SettingsFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('settingsControllerFindById', 'id', id)
            const localVarPath = `/settings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Settings} [settings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsControllerReplaceById: async (id: number, settings?: Settings, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('settingsControllerReplaceById', 'id', id)
            const localVarPath = `/settings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(settings, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {SettingsPartial} [settingsPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsControllerUpdateAll: async (where?: { [key: string]: object; }, settingsPartial?: SettingsPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(settingsPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {SettingsPartial} [settingsPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsControllerUpdateById: async (id: number, settingsPartial?: SettingsPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('settingsControllerUpdateById', 'id', id)
            const localVarPath = `/settings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(settingsPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SettingsControllerApi - functional programming interface
 * @export
 */
export const SettingsControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SettingsControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async settingsControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.settingsControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewSettings} [newSettings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async settingsControllerCreate(newSettings?: NewSettings, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Settings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.settingsControllerCreate(newSettings, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async settingsControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.settingsControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SettingsFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async settingsControllerFind(filter?: SettingsFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SettingsWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.settingsControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {SettingsFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async settingsControllerFindById(id: number, filter?: SettingsFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SettingsWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.settingsControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Settings} [settings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async settingsControllerReplaceById(id: number, settings?: Settings, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.settingsControllerReplaceById(id, settings, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {SettingsPartial} [settingsPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async settingsControllerUpdateAll(where?: { [key: string]: object; }, settingsPartial?: SettingsPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.settingsControllerUpdateAll(where, settingsPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {SettingsPartial} [settingsPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async settingsControllerUpdateById(id: number, settingsPartial?: SettingsPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.settingsControllerUpdateById(id, settingsPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SettingsControllerApi - factory interface
 * @export
 */
export const SettingsControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SettingsControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.settingsControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewSettings} [newSettings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsControllerCreate(newSettings?: NewSettings, options?: any): AxiosPromise<Settings> {
            return localVarFp.settingsControllerCreate(newSettings, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.settingsControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SettingsFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsControllerFind(filter?: SettingsFilter1, options?: any): AxiosPromise<Array<SettingsWithRelations>> {
            return localVarFp.settingsControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {SettingsFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsControllerFindById(id: number, filter?: SettingsFilter, options?: any): AxiosPromise<SettingsWithRelations> {
            return localVarFp.settingsControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Settings} [settings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsControllerReplaceById(id: number, settings?: Settings, options?: any): AxiosPromise<any> {
            return localVarFp.settingsControllerReplaceById(id, settings, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {SettingsPartial} [settingsPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsControllerUpdateAll(where?: { [key: string]: object; }, settingsPartial?: SettingsPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.settingsControllerUpdateAll(where, settingsPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {SettingsPartial} [settingsPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsControllerUpdateById(id: number, settingsPartial?: SettingsPartial, options?: any): AxiosPromise<any> {
            return localVarFp.settingsControllerUpdateById(id, settingsPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SettingsControllerApi - object-oriented interface
 * @export
 * @class SettingsControllerApi
 * @extends {BaseAPI}
 */
export class SettingsControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsControllerApi
     */
    public settingsControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return SettingsControllerApiFp(this.configuration).settingsControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewSettings} [newSettings] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsControllerApi
     */
    public settingsControllerCreate(newSettings?: NewSettings, options?: AxiosRequestConfig) {
        return SettingsControllerApiFp(this.configuration).settingsControllerCreate(newSettings, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsControllerApi
     */
    public settingsControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return SettingsControllerApiFp(this.configuration).settingsControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SettingsFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsControllerApi
     */
    public settingsControllerFind(filter?: SettingsFilter1, options?: AxiosRequestConfig) {
        return SettingsControllerApiFp(this.configuration).settingsControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {SettingsFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsControllerApi
     */
    public settingsControllerFindById(id: number, filter?: SettingsFilter, options?: AxiosRequestConfig) {
        return SettingsControllerApiFp(this.configuration).settingsControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Settings} [settings] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsControllerApi
     */
    public settingsControllerReplaceById(id: number, settings?: Settings, options?: AxiosRequestConfig) {
        return SettingsControllerApiFp(this.configuration).settingsControllerReplaceById(id, settings, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {SettingsPartial} [settingsPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsControllerApi
     */
    public settingsControllerUpdateAll(where?: { [key: string]: object; }, settingsPartial?: SettingsPartial, options?: AxiosRequestConfig) {
        return SettingsControllerApiFp(this.configuration).settingsControllerUpdateAll(where, settingsPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {SettingsPartial} [settingsPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsControllerApi
     */
    public settingsControllerUpdateById(id: number, settingsPartial?: SettingsPartial, options?: AxiosRequestConfig) {
        return SettingsControllerApiFp(this.configuration).settingsControllerUpdateById(id, settingsPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SituacionesControllerApi - axios parameter creator
 * @export
 */
export const SituacionesControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        situacionesControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Situaciones/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewSituaciones} [newSituaciones] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        situacionesControllerCreate: async (newSituaciones?: NewSituaciones, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Situaciones`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newSituaciones, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        situacionesControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('situacionesControllerDeleteById', 'id', id)
            const localVarPath = `/Situaciones/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SituacionesFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        situacionesControllerFind: async (filter?: SituacionesFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Situaciones`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {SituacionesFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        situacionesControllerFindById: async (id: number, filter?: SituacionesFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('situacionesControllerFindById', 'id', id)
            const localVarPath = `/Situaciones/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Situaciones} [situaciones] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        situacionesControllerReplaceById: async (id: number, situaciones?: Situaciones, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('situacionesControllerReplaceById', 'id', id)
            const localVarPath = `/Situaciones/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(situaciones, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {SituacionesPartial} [situacionesPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        situacionesControllerUpdateAll: async (where?: { [key: string]: object; }, situacionesPartial?: SituacionesPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Situaciones`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(situacionesPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {SituacionesPartial} [situacionesPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        situacionesControllerUpdateById: async (id: number, situacionesPartial?: SituacionesPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('situacionesControllerUpdateById', 'id', id)
            const localVarPath = `/Situaciones/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(situacionesPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SituacionesControllerApi - functional programming interface
 * @export
 */
export const SituacionesControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SituacionesControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async situacionesControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.situacionesControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewSituaciones} [newSituaciones] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async situacionesControllerCreate(newSituaciones?: NewSituaciones, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Situaciones>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.situacionesControllerCreate(newSituaciones, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async situacionesControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.situacionesControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SituacionesFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async situacionesControllerFind(filter?: SituacionesFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SituacionesWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.situacionesControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {SituacionesFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async situacionesControllerFindById(id: number, filter?: SituacionesFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SituacionesWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.situacionesControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Situaciones} [situaciones] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async situacionesControllerReplaceById(id: number, situaciones?: Situaciones, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.situacionesControllerReplaceById(id, situaciones, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {SituacionesPartial} [situacionesPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async situacionesControllerUpdateAll(where?: { [key: string]: object; }, situacionesPartial?: SituacionesPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.situacionesControllerUpdateAll(where, situacionesPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {SituacionesPartial} [situacionesPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async situacionesControllerUpdateById(id: number, situacionesPartial?: SituacionesPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.situacionesControllerUpdateById(id, situacionesPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SituacionesControllerApi - factory interface
 * @export
 */
export const SituacionesControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SituacionesControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        situacionesControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.situacionesControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewSituaciones} [newSituaciones] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        situacionesControllerCreate(newSituaciones?: NewSituaciones, options?: any): AxiosPromise<Situaciones> {
            return localVarFp.situacionesControllerCreate(newSituaciones, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        situacionesControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.situacionesControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SituacionesFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        situacionesControllerFind(filter?: SituacionesFilter1, options?: any): AxiosPromise<Array<SituacionesWithRelations>> {
            return localVarFp.situacionesControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {SituacionesFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        situacionesControllerFindById(id: number, filter?: SituacionesFilter, options?: any): AxiosPromise<SituacionesWithRelations> {
            return localVarFp.situacionesControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Situaciones} [situaciones] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        situacionesControllerReplaceById(id: number, situaciones?: Situaciones, options?: any): AxiosPromise<any> {
            return localVarFp.situacionesControllerReplaceById(id, situaciones, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {SituacionesPartial} [situacionesPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        situacionesControllerUpdateAll(where?: { [key: string]: object; }, situacionesPartial?: SituacionesPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.situacionesControllerUpdateAll(where, situacionesPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {SituacionesPartial} [situacionesPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        situacionesControllerUpdateById(id: number, situacionesPartial?: SituacionesPartial, options?: any): AxiosPromise<any> {
            return localVarFp.situacionesControllerUpdateById(id, situacionesPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SituacionesControllerApi - object-oriented interface
 * @export
 * @class SituacionesControllerApi
 * @extends {BaseAPI}
 */
export class SituacionesControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SituacionesControllerApi
     */
    public situacionesControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return SituacionesControllerApiFp(this.configuration).situacionesControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewSituaciones} [newSituaciones] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SituacionesControllerApi
     */
    public situacionesControllerCreate(newSituaciones?: NewSituaciones, options?: AxiosRequestConfig) {
        return SituacionesControllerApiFp(this.configuration).situacionesControllerCreate(newSituaciones, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SituacionesControllerApi
     */
    public situacionesControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return SituacionesControllerApiFp(this.configuration).situacionesControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SituacionesFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SituacionesControllerApi
     */
    public situacionesControllerFind(filter?: SituacionesFilter1, options?: AxiosRequestConfig) {
        return SituacionesControllerApiFp(this.configuration).situacionesControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {SituacionesFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SituacionesControllerApi
     */
    public situacionesControllerFindById(id: number, filter?: SituacionesFilter, options?: AxiosRequestConfig) {
        return SituacionesControllerApiFp(this.configuration).situacionesControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Situaciones} [situaciones] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SituacionesControllerApi
     */
    public situacionesControllerReplaceById(id: number, situaciones?: Situaciones, options?: AxiosRequestConfig) {
        return SituacionesControllerApiFp(this.configuration).situacionesControllerReplaceById(id, situaciones, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {SituacionesPartial} [situacionesPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SituacionesControllerApi
     */
    public situacionesControllerUpdateAll(where?: { [key: string]: object; }, situacionesPartial?: SituacionesPartial, options?: AxiosRequestConfig) {
        return SituacionesControllerApiFp(this.configuration).situacionesControllerUpdateAll(where, situacionesPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {SituacionesPartial} [situacionesPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SituacionesControllerApi
     */
    public situacionesControllerUpdateById(id: number, situacionesPartial?: SituacionesPartial, options?: AxiosRequestConfig) {
        return SituacionesControllerApiFp(this.configuration).situacionesControllerUpdateById(id, situacionesPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SuccessLoginsControllerApi - axios parameter creator
 * @export
 */
export const SuccessLoginsControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        successLoginsControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/success-logins/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewSuccessLogins} [newSuccessLogins] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        successLoginsControllerCreate: async (newSuccessLogins?: NewSuccessLogins, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/success-logins`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newSuccessLogins, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        successLoginsControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('successLoginsControllerDeleteById', 'id', id)
            const localVarPath = `/success-logins/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SuccessLoginsFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        successLoginsControllerFind: async (filter?: SuccessLoginsFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/success-logins`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {SuccessLoginsFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        successLoginsControllerFindById: async (id: number, filter?: SuccessLoginsFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('successLoginsControllerFindById', 'id', id)
            const localVarPath = `/success-logins/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {SuccessLogins} [successLogins] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        successLoginsControllerReplaceById: async (id: number, successLogins?: SuccessLogins, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('successLoginsControllerReplaceById', 'id', id)
            const localVarPath = `/success-logins/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(successLogins, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {SuccessLoginsPartial} [successLoginsPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        successLoginsControllerUpdateAll: async (where?: { [key: string]: object; }, successLoginsPartial?: SuccessLoginsPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/success-logins`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(successLoginsPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {SuccessLoginsPartial} [successLoginsPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        successLoginsControllerUpdateById: async (id: number, successLoginsPartial?: SuccessLoginsPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('successLoginsControllerUpdateById', 'id', id)
            const localVarPath = `/success-logins/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(successLoginsPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SuccessLoginsControllerApi - functional programming interface
 * @export
 */
export const SuccessLoginsControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SuccessLoginsControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async successLoginsControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.successLoginsControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewSuccessLogins} [newSuccessLogins] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async successLoginsControllerCreate(newSuccessLogins?: NewSuccessLogins, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessLogins>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.successLoginsControllerCreate(newSuccessLogins, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async successLoginsControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.successLoginsControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SuccessLoginsFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async successLoginsControllerFind(filter?: SuccessLoginsFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SuccessLoginsWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.successLoginsControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {SuccessLoginsFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async successLoginsControllerFindById(id: number, filter?: SuccessLoginsFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessLoginsWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.successLoginsControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {SuccessLogins} [successLogins] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async successLoginsControllerReplaceById(id: number, successLogins?: SuccessLogins, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.successLoginsControllerReplaceById(id, successLogins, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {SuccessLoginsPartial} [successLoginsPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async successLoginsControllerUpdateAll(where?: { [key: string]: object; }, successLoginsPartial?: SuccessLoginsPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.successLoginsControllerUpdateAll(where, successLoginsPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {SuccessLoginsPartial} [successLoginsPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async successLoginsControllerUpdateById(id: number, successLoginsPartial?: SuccessLoginsPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.successLoginsControllerUpdateById(id, successLoginsPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SuccessLoginsControllerApi - factory interface
 * @export
 */
export const SuccessLoginsControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SuccessLoginsControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        successLoginsControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.successLoginsControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewSuccessLogins} [newSuccessLogins] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        successLoginsControllerCreate(newSuccessLogins?: NewSuccessLogins, options?: any): AxiosPromise<SuccessLogins> {
            return localVarFp.successLoginsControllerCreate(newSuccessLogins, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        successLoginsControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.successLoginsControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SuccessLoginsFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        successLoginsControllerFind(filter?: SuccessLoginsFilter1, options?: any): AxiosPromise<Array<SuccessLoginsWithRelations>> {
            return localVarFp.successLoginsControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {SuccessLoginsFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        successLoginsControllerFindById(id: number, filter?: SuccessLoginsFilter, options?: any): AxiosPromise<SuccessLoginsWithRelations> {
            return localVarFp.successLoginsControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {SuccessLogins} [successLogins] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        successLoginsControllerReplaceById(id: number, successLogins?: SuccessLogins, options?: any): AxiosPromise<any> {
            return localVarFp.successLoginsControllerReplaceById(id, successLogins, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {SuccessLoginsPartial} [successLoginsPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        successLoginsControllerUpdateAll(where?: { [key: string]: object; }, successLoginsPartial?: SuccessLoginsPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.successLoginsControllerUpdateAll(where, successLoginsPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {SuccessLoginsPartial} [successLoginsPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        successLoginsControllerUpdateById(id: number, successLoginsPartial?: SuccessLoginsPartial, options?: any): AxiosPromise<any> {
            return localVarFp.successLoginsControllerUpdateById(id, successLoginsPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SuccessLoginsControllerApi - object-oriented interface
 * @export
 * @class SuccessLoginsControllerApi
 * @extends {BaseAPI}
 */
export class SuccessLoginsControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuccessLoginsControllerApi
     */
    public successLoginsControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return SuccessLoginsControllerApiFp(this.configuration).successLoginsControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewSuccessLogins} [newSuccessLogins] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuccessLoginsControllerApi
     */
    public successLoginsControllerCreate(newSuccessLogins?: NewSuccessLogins, options?: AxiosRequestConfig) {
        return SuccessLoginsControllerApiFp(this.configuration).successLoginsControllerCreate(newSuccessLogins, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuccessLoginsControllerApi
     */
    public successLoginsControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return SuccessLoginsControllerApiFp(this.configuration).successLoginsControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SuccessLoginsFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuccessLoginsControllerApi
     */
    public successLoginsControllerFind(filter?: SuccessLoginsFilter1, options?: AxiosRequestConfig) {
        return SuccessLoginsControllerApiFp(this.configuration).successLoginsControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {SuccessLoginsFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuccessLoginsControllerApi
     */
    public successLoginsControllerFindById(id: number, filter?: SuccessLoginsFilter, options?: AxiosRequestConfig) {
        return SuccessLoginsControllerApiFp(this.configuration).successLoginsControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {SuccessLogins} [successLogins] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuccessLoginsControllerApi
     */
    public successLoginsControllerReplaceById(id: number, successLogins?: SuccessLogins, options?: AxiosRequestConfig) {
        return SuccessLoginsControllerApiFp(this.configuration).successLoginsControllerReplaceById(id, successLogins, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {SuccessLoginsPartial} [successLoginsPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuccessLoginsControllerApi
     */
    public successLoginsControllerUpdateAll(where?: { [key: string]: object; }, successLoginsPartial?: SuccessLoginsPartial, options?: AxiosRequestConfig) {
        return SuccessLoginsControllerApiFp(this.configuration).successLoginsControllerUpdateAll(where, successLoginsPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {SuccessLoginsPartial} [successLoginsPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuccessLoginsControllerApi
     */
    public successLoginsControllerUpdateById(id: number, successLoginsPartial?: SuccessLoginsPartial, options?: AxiosRequestConfig) {
        return SuccessLoginsControllerApiFp(this.configuration).successLoginsControllerUpdateById(id, successLoginsPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TablasControllerApi - axios parameter creator
 * @export
 */
export const TablasControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablasControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Tablas/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewTablas} [newTablas] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablasControllerCreate: async (newTablas?: NewTablas, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Tablas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newTablas, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablasControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tablasControllerDeleteById', 'id', id)
            const localVarPath = `/Tablas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TablasFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablasControllerFind: async (filter?: TablasFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Tablas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TablasFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablasControllerFindById: async (id: number, filter?: TablasFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tablasControllerFindById', 'id', id)
            const localVarPath = `/Tablas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Tablas} [tablas] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablasControllerReplaceById: async (id: number, tablas?: Tablas, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tablasControllerReplaceById', 'id', id)
            const localVarPath = `/Tablas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tablas, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {TablasPartial} [tablasPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablasControllerUpdateAll: async (where?: { [key: string]: object; }, tablasPartial?: TablasPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Tablas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tablasPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TablasPartial} [tablasPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablasControllerUpdateById: async (id: number, tablasPartial?: TablasPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tablasControllerUpdateById', 'id', id)
            const localVarPath = `/Tablas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tablasPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TablasControllerApi - functional programming interface
 * @export
 */
export const TablasControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TablasControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tablasControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tablasControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewTablas} [newTablas] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tablasControllerCreate(newTablas?: NewTablas, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tablas>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tablasControllerCreate(newTablas, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tablasControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tablasControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {TablasFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tablasControllerFind(filter?: TablasFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TablasWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tablasControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {TablasFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tablasControllerFindById(id: number, filter?: TablasFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TablasWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tablasControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Tablas} [tablas] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tablasControllerReplaceById(id: number, tablas?: Tablas, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tablasControllerReplaceById(id, tablas, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {TablasPartial} [tablasPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tablasControllerUpdateAll(where?: { [key: string]: object; }, tablasPartial?: TablasPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tablasControllerUpdateAll(where, tablasPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {TablasPartial} [tablasPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tablasControllerUpdateById(id: number, tablasPartial?: TablasPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tablasControllerUpdateById(id, tablasPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TablasControllerApi - factory interface
 * @export
 */
export const TablasControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TablasControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablasControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.tablasControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewTablas} [newTablas] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablasControllerCreate(newTablas?: NewTablas, options?: any): AxiosPromise<Tablas> {
            return localVarFp.tablasControllerCreate(newTablas, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablasControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.tablasControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TablasFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablasControllerFind(filter?: TablasFilter1, options?: any): AxiosPromise<Array<TablasWithRelations>> {
            return localVarFp.tablasControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {TablasFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablasControllerFindById(id: number, filter?: TablasFilter, options?: any): AxiosPromise<TablasWithRelations> {
            return localVarFp.tablasControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Tablas} [tablas] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablasControllerReplaceById(id: number, tablas?: Tablas, options?: any): AxiosPromise<any> {
            return localVarFp.tablasControllerReplaceById(id, tablas, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {TablasPartial} [tablasPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablasControllerUpdateAll(where?: { [key: string]: object; }, tablasPartial?: TablasPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.tablasControllerUpdateAll(where, tablasPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {TablasPartial} [tablasPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablasControllerUpdateById(id: number, tablasPartial?: TablasPartial, options?: any): AxiosPromise<any> {
            return localVarFp.tablasControllerUpdateById(id, tablasPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TablasControllerApi - object-oriented interface
 * @export
 * @class TablasControllerApi
 * @extends {BaseAPI}
 */
export class TablasControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TablasControllerApi
     */
    public tablasControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return TablasControllerApiFp(this.configuration).tablasControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewTablas} [newTablas] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TablasControllerApi
     */
    public tablasControllerCreate(newTablas?: NewTablas, options?: AxiosRequestConfig) {
        return TablasControllerApiFp(this.configuration).tablasControllerCreate(newTablas, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TablasControllerApi
     */
    public tablasControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return TablasControllerApiFp(this.configuration).tablasControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TablasFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TablasControllerApi
     */
    public tablasControllerFind(filter?: TablasFilter1, options?: AxiosRequestConfig) {
        return TablasControllerApiFp(this.configuration).tablasControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {TablasFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TablasControllerApi
     */
    public tablasControllerFindById(id: number, filter?: TablasFilter, options?: AxiosRequestConfig) {
        return TablasControllerApiFp(this.configuration).tablasControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Tablas} [tablas] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TablasControllerApi
     */
    public tablasControllerReplaceById(id: number, tablas?: Tablas, options?: AxiosRequestConfig) {
        return TablasControllerApiFp(this.configuration).tablasControllerReplaceById(id, tablas, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {TablasPartial} [tablasPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TablasControllerApi
     */
    public tablasControllerUpdateAll(where?: { [key: string]: object; }, tablasPartial?: TablasPartial, options?: AxiosRequestConfig) {
        return TablasControllerApiFp(this.configuration).tablasControllerUpdateAll(where, tablasPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {TablasPartial} [tablasPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TablasControllerApi
     */
    public tablasControllerUpdateById(id: number, tablasPartial?: TablasPartial, options?: AxiosRequestConfig) {
        return TablasControllerApiFp(this.configuration).tablasControllerUpdateById(id, tablasPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TraduccionesControllerApi - axios parameter creator
 * @export
 */
export const TraduccionesControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionesControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/traducciones/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewTraducciones} [newTraducciones] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionesControllerCreate: async (newTraducciones?: NewTraducciones, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/traducciones`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newTraducciones, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionesControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('traduccionesControllerDeleteById', 'id', id)
            const localVarPath = `/traducciones/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TraduccionesFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionesControllerFind: async (filter?: TraduccionesFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/traducciones`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TraduccionesFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionesControllerFindById: async (id: number, filter?: TraduccionesFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('traduccionesControllerFindById', 'id', id)
            const localVarPath = `/traducciones/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Traducciones} [traducciones] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionesControllerReplaceById: async (id: number, traducciones?: Traducciones, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('traduccionesControllerReplaceById', 'id', id)
            const localVarPath = `/traducciones/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(traducciones, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {TraduccionesPartial} [traduccionesPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionesControllerUpdateAll: async (where?: { [key: string]: object; }, traduccionesPartial?: TraduccionesPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/traducciones`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(traduccionesPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TraduccionesPartial} [traduccionesPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionesControllerUpdateById: async (id: number, traduccionesPartial?: TraduccionesPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('traduccionesControllerUpdateById', 'id', id)
            const localVarPath = `/traducciones/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(traduccionesPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TraduccionesControllerApi - functional programming interface
 * @export
 */
export const TraduccionesControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TraduccionesControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async traduccionesControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.traduccionesControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewTraducciones} [newTraducciones] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async traduccionesControllerCreate(newTraducciones?: NewTraducciones, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Traducciones>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.traduccionesControllerCreate(newTraducciones, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async traduccionesControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.traduccionesControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {TraduccionesFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async traduccionesControllerFind(filter?: TraduccionesFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TraduccionesWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.traduccionesControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {TraduccionesFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async traduccionesControllerFindById(id: number, filter?: TraduccionesFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TraduccionesWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.traduccionesControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Traducciones} [traducciones] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async traduccionesControllerReplaceById(id: number, traducciones?: Traducciones, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.traduccionesControllerReplaceById(id, traducciones, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {TraduccionesPartial} [traduccionesPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async traduccionesControllerUpdateAll(where?: { [key: string]: object; }, traduccionesPartial?: TraduccionesPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.traduccionesControllerUpdateAll(where, traduccionesPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {TraduccionesPartial} [traduccionesPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async traduccionesControllerUpdateById(id: number, traduccionesPartial?: TraduccionesPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.traduccionesControllerUpdateById(id, traduccionesPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TraduccionesControllerApi - factory interface
 * @export
 */
export const TraduccionesControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TraduccionesControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionesControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.traduccionesControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewTraducciones} [newTraducciones] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionesControllerCreate(newTraducciones?: NewTraducciones, options?: any): AxiosPromise<Traducciones> {
            return localVarFp.traduccionesControllerCreate(newTraducciones, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionesControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.traduccionesControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TraduccionesFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionesControllerFind(filter?: TraduccionesFilter1, options?: any): AxiosPromise<Array<TraduccionesWithRelations>> {
            return localVarFp.traduccionesControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {TraduccionesFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionesControllerFindById(id: number, filter?: TraduccionesFilter, options?: any): AxiosPromise<TraduccionesWithRelations> {
            return localVarFp.traduccionesControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Traducciones} [traducciones] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionesControllerReplaceById(id: number, traducciones?: Traducciones, options?: any): AxiosPromise<any> {
            return localVarFp.traduccionesControllerReplaceById(id, traducciones, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {TraduccionesPartial} [traduccionesPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionesControllerUpdateAll(where?: { [key: string]: object; }, traduccionesPartial?: TraduccionesPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.traduccionesControllerUpdateAll(where, traduccionesPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {TraduccionesPartial} [traduccionesPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionesControllerUpdateById(id: number, traduccionesPartial?: TraduccionesPartial, options?: any): AxiosPromise<any> {
            return localVarFp.traduccionesControllerUpdateById(id, traduccionesPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TraduccionesControllerApi - object-oriented interface
 * @export
 * @class TraduccionesControllerApi
 * @extends {BaseAPI}
 */
export class TraduccionesControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraduccionesControllerApi
     */
    public traduccionesControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return TraduccionesControllerApiFp(this.configuration).traduccionesControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewTraducciones} [newTraducciones] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraduccionesControllerApi
     */
    public traduccionesControllerCreate(newTraducciones?: NewTraducciones, options?: AxiosRequestConfig) {
        return TraduccionesControllerApiFp(this.configuration).traduccionesControllerCreate(newTraducciones, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraduccionesControllerApi
     */
    public traduccionesControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return TraduccionesControllerApiFp(this.configuration).traduccionesControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TraduccionesFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraduccionesControllerApi
     */
    public traduccionesControllerFind(filter?: TraduccionesFilter1, options?: AxiosRequestConfig) {
        return TraduccionesControllerApiFp(this.configuration).traduccionesControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {TraduccionesFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraduccionesControllerApi
     */
    public traduccionesControllerFindById(id: number, filter?: TraduccionesFilter, options?: AxiosRequestConfig) {
        return TraduccionesControllerApiFp(this.configuration).traduccionesControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Traducciones} [traducciones] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraduccionesControllerApi
     */
    public traduccionesControllerReplaceById(id: number, traducciones?: Traducciones, options?: AxiosRequestConfig) {
        return TraduccionesControllerApiFp(this.configuration).traduccionesControllerReplaceById(id, traducciones, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {TraduccionesPartial} [traduccionesPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraduccionesControllerApi
     */
    public traduccionesControllerUpdateAll(where?: { [key: string]: object; }, traduccionesPartial?: TraduccionesPartial, options?: AxiosRequestConfig) {
        return TraduccionesControllerApiFp(this.configuration).traduccionesControllerUpdateAll(where, traduccionesPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {TraduccionesPartial} [traduccionesPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraduccionesControllerApi
     */
    public traduccionesControllerUpdateById(id: number, traduccionesPartial?: TraduccionesPartial, options?: AxiosRequestConfig) {
        return TraduccionesControllerApiFp(this.configuration).traduccionesControllerUpdateById(id, traduccionesPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TwFunctionsControllerApi - axios parameter creator
 * @export
 */
export const TwFunctionsControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {InsertItem} [insertItem] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        twFunctionsControllerInsertItem: async (insertItem?: InsertItem, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/InsertItem`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(insertItem, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        twFunctionsControllerNewEANCode: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('twFunctionsControllerNewEANCode', 'code', code)
            const localVarPath = `/NewEANCode/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TwFunctionsControllerApi - functional programming interface
 * @export
 */
export const TwFunctionsControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TwFunctionsControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {InsertItem} [insertItem] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async twFunctionsControllerInsertItem(insertItem?: InsertItem, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InsertItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.twFunctionsControllerInsertItem(insertItem, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async twFunctionsControllerNewEANCode(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.twFunctionsControllerNewEANCode(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TwFunctionsControllerApi - factory interface
 * @export
 */
export const TwFunctionsControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TwFunctionsControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {InsertItem} [insertItem] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        twFunctionsControllerInsertItem(insertItem?: InsertItem, options?: any): AxiosPromise<InsertItem> {
            return localVarFp.twFunctionsControllerInsertItem(insertItem, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        twFunctionsControllerNewEANCode(code: string, options?: any): AxiosPromise<any> {
            return localVarFp.twFunctionsControllerNewEANCode(code, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TwFunctionsControllerApi - object-oriented interface
 * @export
 * @class TwFunctionsControllerApi
 * @extends {BaseAPI}
 */
export class TwFunctionsControllerApi extends BaseAPI {
    /**
     * 
     * @param {InsertItem} [insertItem] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TwFunctionsControllerApi
     */
    public twFunctionsControllerInsertItem(insertItem?: InsertItem, options?: AxiosRequestConfig) {
        return TwFunctionsControllerApiFp(this.configuration).twFunctionsControllerInsertItem(insertItem, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} code 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TwFunctionsControllerApi
     */
    public twFunctionsControllerNewEANCode(code: string, options?: AxiosRequestConfig) {
        return TwFunctionsControllerApiFp(this.configuration).twFunctionsControllerNewEANCode(code, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsuariosControllerApi - axios parameter creator
 * @export
 */
export const UsuariosControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/usuarios/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewUsuarios} [newUsuarios] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerCreate: async (newUsuarios?: NewUsuarios, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/usuarios`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newUsuarios, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usuariosControllerDeleteById', 'id', id)
            const localVarPath = `/usuarios/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UsuariosFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerFind: async (filter?: UsuariosFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/usuarios`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuariosFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerFindById: async (id: number, filter?: UsuariosFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usuariosControllerFindById', 'id', id)
            const localVarPath = `/usuarios/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Usuarios} [usuarios] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerReplaceById: async (id: number, usuarios?: Usuarios, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usuariosControllerReplaceById', 'id', id)
            const localVarPath = `/usuarios/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usuarios, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuariosPartial} [usuariosPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerUpdateById: async (id: number, usuariosPartial?: UsuariosPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usuariosControllerUpdateById', 'id', id)
            const localVarPath = `/usuarios/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usuariosPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsuariosControllerApi - functional programming interface
 * @export
 */
export const UsuariosControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsuariosControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuariosControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuariosControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewUsuarios} [newUsuarios] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuariosControllerCreate(newUsuarios?: NewUsuarios, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Usuarios>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuariosControllerCreate(newUsuarios, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuariosControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuariosControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UsuariosFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuariosControllerFind(filter?: UsuariosFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UsuariosWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuariosControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuariosFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuariosControllerFindById(id: number, filter?: UsuariosFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsuariosWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuariosControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Usuarios} [usuarios] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuariosControllerReplaceById(id: number, usuarios?: Usuarios, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuariosControllerReplaceById(id, usuarios, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuariosPartial} [usuariosPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuariosControllerUpdateById(id: number, usuariosPartial?: UsuariosPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuariosControllerUpdateById(id, usuariosPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsuariosControllerApi - factory interface
 * @export
 */
export const UsuariosControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsuariosControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.usuariosControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewUsuarios} [newUsuarios] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerCreate(newUsuarios?: NewUsuarios, options?: any): AxiosPromise<Usuarios> {
            return localVarFp.usuariosControllerCreate(newUsuarios, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.usuariosControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UsuariosFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerFind(filter?: UsuariosFilter1, options?: any): AxiosPromise<Array<UsuariosWithRelations>> {
            return localVarFp.usuariosControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuariosFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerFindById(id: number, filter?: UsuariosFilter, options?: any): AxiosPromise<UsuariosWithRelations> {
            return localVarFp.usuariosControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Usuarios} [usuarios] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerReplaceById(id: number, usuarios?: Usuarios, options?: any): AxiosPromise<any> {
            return localVarFp.usuariosControllerReplaceById(id, usuarios, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuariosPartial} [usuariosPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerUpdateById(id: number, usuariosPartial?: UsuariosPartial, options?: any): AxiosPromise<any> {
            return localVarFp.usuariosControllerUpdateById(id, usuariosPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsuariosControllerApi - object-oriented interface
 * @export
 * @class UsuariosControllerApi
 * @extends {BaseAPI}
 */
export class UsuariosControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuariosControllerApi
     */
    public usuariosControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return UsuariosControllerApiFp(this.configuration).usuariosControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewUsuarios} [newUsuarios] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuariosControllerApi
     */
    public usuariosControllerCreate(newUsuarios?: NewUsuarios, options?: AxiosRequestConfig) {
        return UsuariosControllerApiFp(this.configuration).usuariosControllerCreate(newUsuarios, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuariosControllerApi
     */
    public usuariosControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return UsuariosControllerApiFp(this.configuration).usuariosControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UsuariosFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuariosControllerApi
     */
    public usuariosControllerFind(filter?: UsuariosFilter1, options?: AxiosRequestConfig) {
        return UsuariosControllerApiFp(this.configuration).usuariosControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UsuariosFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuariosControllerApi
     */
    public usuariosControllerFindById(id: number, filter?: UsuariosFilter, options?: AxiosRequestConfig) {
        return UsuariosControllerApiFp(this.configuration).usuariosControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Usuarios} [usuarios] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuariosControllerApi
     */
    public usuariosControllerReplaceById(id: number, usuarios?: Usuarios, options?: AxiosRequestConfig) {
        return UsuariosControllerApiFp(this.configuration).usuariosControllerReplaceById(id, usuarios, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UsuariosPartial} [usuariosPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuariosControllerApi
     */
    public usuariosControllerUpdateById(id: number, usuariosPartial?: UsuariosPartial, options?: AxiosRequestConfig) {
        return UsuariosControllerApiFp(this.configuration).usuariosControllerUpdateById(id, usuariosPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsuariosRolesControllerApi - axios parameter creator
 * @export
 */
export const UsuariosRolesControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosRolesControllerGetRoles: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usuariosRolesControllerGetRoles', 'id', id)
            const localVarPath = `/usuarios/{id}/roles`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsuariosRolesControllerApi - functional programming interface
 * @export
 */
export const UsuariosRolesControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsuariosRolesControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuariosRolesControllerGetRoles(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Roles>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuariosRolesControllerGetRoles(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsuariosRolesControllerApi - factory interface
 * @export
 */
export const UsuariosRolesControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsuariosRolesControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosRolesControllerGetRoles(id: number, options?: any): AxiosPromise<Array<Roles>> {
            return localVarFp.usuariosRolesControllerGetRoles(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsuariosRolesControllerApi - object-oriented interface
 * @export
 * @class UsuariosRolesControllerApi
 * @extends {BaseAPI}
 */
export class UsuariosRolesControllerApi extends BaseAPI {
    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuariosRolesControllerApi
     */
    public usuariosRolesControllerGetRoles(id: number, options?: AxiosRequestConfig) {
        return UsuariosRolesControllerApiFp(this.configuration).usuariosRolesControllerGetRoles(id, options).then((request) => request(this.axios, this.basePath));
    }
}


