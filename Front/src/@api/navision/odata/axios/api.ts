/* tslint:disable */
/* eslint-disable */
/**
 * OData Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ErrorError
 */
export interface ErrorError {
    /**
     * 
     * @type {string}
     * @memberof ErrorError
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof ErrorError
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    'value'?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     * 
     * @type {Array<MicrosoftNAVSalesOrderHeader>}
     * @memberof InlineResponse2001
     */
    'value'?: Array<MicrosoftNAVSalesOrderHeader>;
}
/**
 * 
 * @export
 * @interface InlineResponse20010
 */
export interface InlineResponse20010 {
    /**
     * 
     * @type {Array<MicrosoftNAVShiptoAddress>}
     * @memberof InlineResponse20010
     */
    'value'?: Array<MicrosoftNAVShiptoAddress>;
}
/**
 * 
 * @export
 * @interface InlineResponse20011
 */
export interface InlineResponse20011 {
    /**
     * 
     * @type {Array<MicrosoftNAVSalesQuoteHeader>}
     * @memberof InlineResponse20011
     */
    'value'?: Array<MicrosoftNAVSalesQuoteHeader>;
}
/**
 * 
 * @export
 * @interface InlineResponse20012
 */
export interface InlineResponse20012 {
    /**
     * 
     * @type {Array<MicrosoftNAVSalesQuoteLine>}
     * @memberof InlineResponse20012
     */
    'value'?: Array<MicrosoftNAVSalesQuoteLine>;
}
/**
 * 
 * @export
 * @interface InlineResponse20013
 */
export interface InlineResponse20013 {
    /**
     * 
     * @type {Array<MicrosoftNAVQuerySalesOrderHeader>}
     * @memberof InlineResponse20013
     */
    'value'?: Array<MicrosoftNAVQuerySalesOrderHeader>;
}
/**
 * 
 * @export
 * @interface InlineResponse20014
 */
export interface InlineResponse20014 {
    /**
     * 
     * @type {Array<MicrosoftNAVQuerySalesInvoice>}
     * @memberof InlineResponse20014
     */
    'value'?: Array<MicrosoftNAVQuerySalesInvoice>;
}
/**
 * 
 * @export
 * @interface InlineResponse20015
 */
export interface InlineResponse20015 {
    /**
     * 
     * @type {Array<MicrosoftNAVQuerySalesCrMemo>}
     * @memberof InlineResponse20015
     */
    'value'?: Array<MicrosoftNAVQuerySalesCrMemo>;
}
/**
 * 
 * @export
 * @interface InlineResponse20016
 */
export interface InlineResponse20016 {
    /**
     * 
     * @type {Array<MicrosoftNAVQuerySalesShipment>}
     * @memberof InlineResponse20016
     */
    'value'?: Array<MicrosoftNAVQuerySalesShipment>;
}
/**
 * 
 * @export
 * @interface InlineResponse20017
 */
export interface InlineResponse20017 {
    /**
     * 
     * @type {Array<MicrosoftNAVQueryCustomer>}
     * @memberof InlineResponse20017
     */
    'value'?: Array<MicrosoftNAVQueryCustomer>;
}
/**
 * 
 * @export
 * @interface InlineResponse20018
 */
export interface InlineResponse20018 {
    /**
     * 
     * @type {Array<MicrosoftNAVQueryAttributes>}
     * @memberof InlineResponse20018
     */
    'value'?: Array<MicrosoftNAVQueryAttributes>;
}
/**
 * 
 * @export
 * @interface InlineResponse20019
 */
export interface InlineResponse20019 {
    /**
     * 
     * @type {Array<MicrosoftNAVQueryAttributesValues>}
     * @memberof InlineResponse20019
     */
    'value'?: Array<MicrosoftNAVQueryAttributesValues>;
}
/**
 * 
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
    /**
     * 
     * @type {Array<MicrosoftNAVSalesOrderLine>}
     * @memberof InlineResponse2002
     */
    'value'?: Array<MicrosoftNAVSalesOrderLine>;
}
/**
 * 
 * @export
 * @interface InlineResponse20020
 */
export interface InlineResponse20020 {
    /**
     * 
     * @type {Array<MicrosoftNAVQueryItemAttributes>}
     * @memberof InlineResponse20020
     */
    'value'?: Array<MicrosoftNAVQueryItemAttributes>;
}
/**
 * 
 * @export
 * @interface InlineResponse20021
 */
export interface InlineResponse20021 {
    /**
     * 
     * @type {Array<MicrosoftNAVQueryCategoryAttributes>}
     * @memberof InlineResponse20021
     */
    'value'?: Array<MicrosoftNAVQueryCategoryAttributes>;
}
/**
 * 
 * @export
 * @interface InlineResponse20022
 */
export interface InlineResponse20022 {
    /**
     * 
     * @type {Array<MicrosoftNAVQueryItems>}
     * @memberof InlineResponse20022
     */
    'value'?: Array<MicrosoftNAVQueryItems>;
}
/**
 * 
 * @export
 * @interface InlineResponse20023
 */
export interface InlineResponse20023 {
    /**
     * 
     * @type {Array<MicrosoftNAVCompany>}
     * @memberof InlineResponse20023
     */
    'value'?: Array<MicrosoftNAVCompany>;
}
/**
 * 
 * @export
 * @interface InlineResponse20024
 */
export interface InlineResponse20024 {
    /**
     * 
     * @type {Array<MicrosoftNAVSubscriptions>}
     * @memberof InlineResponse20024
     */
    'value'?: Array<MicrosoftNAVSubscriptions>;
}
/**
 * 
 * @export
 * @interface InlineResponse20025
 */
export interface InlineResponse20025 {
    /**
     * 
     * @type {Array<MicrosoftNAVQueryCategories>}
     * @memberof InlineResponse20025
     */
    'value'?: Array<MicrosoftNAVQueryCategories>;
}
/**
 * 
 * @export
 * @interface InlineResponse2003
 */
export interface InlineResponse2003 {
    /**
     * 
     * @type {Array<MicrosoftNAVSalesInvoiceHeader>}
     * @memberof InlineResponse2003
     */
    'value'?: Array<MicrosoftNAVSalesInvoiceHeader>;
}
/**
 * 
 * @export
 * @interface InlineResponse2004
 */
export interface InlineResponse2004 {
    /**
     * 
     * @type {Array<MicrosoftNAVSalesInvoiceLine>}
     * @memberof InlineResponse2004
     */
    'value'?: Array<MicrosoftNAVSalesInvoiceLine>;
}
/**
 * 
 * @export
 * @interface InlineResponse2005
 */
export interface InlineResponse2005 {
    /**
     * 
     * @type {Array<MicrosoftNAVSalesShipmentHeader>}
     * @memberof InlineResponse2005
     */
    'value'?: Array<MicrosoftNAVSalesShipmentHeader>;
}
/**
 * 
 * @export
 * @interface InlineResponse2006
 */
export interface InlineResponse2006 {
    /**
     * 
     * @type {Array<MicrosoftNAVSalesShipmentLine>}
     * @memberof InlineResponse2006
     */
    'value'?: Array<MicrosoftNAVSalesShipmentLine>;
}
/**
 * 
 * @export
 * @interface InlineResponse2007
 */
export interface InlineResponse2007 {
    /**
     * 
     * @type {Array<MicrosoftNAVSalesCrMemoHeader>}
     * @memberof InlineResponse2007
     */
    'value'?: Array<MicrosoftNAVSalesCrMemoHeader>;
}
/**
 * 
 * @export
 * @interface InlineResponse2008
 */
export interface InlineResponse2008 {
    /**
     * 
     * @type {Array<MicrosoftNAVSalescrMemoLine>}
     * @memberof InlineResponse2008
     */
    'value'?: Array<MicrosoftNAVSalescrMemoLine>;
}
/**
 * 
 * @export
 * @interface InlineResponse2009
 */
export interface InlineResponse2009 {
    /**
     * 
     * @type {Array<MicrosoftNAVItem>}
     * @memberof InlineResponse2009
     */
    'value'?: Array<MicrosoftNAVItem>;
}
/**
 * 
 * @export
 * @interface MicrosoftNAVCompany
 */
export interface MicrosoftNAVCompany {
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVCompany
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVCompany
     */
    'systemVersion'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVCompany
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVCompany
     */
    'displayName'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVCompany
     */
    'businessProfileId'?: string;
    /**
     * 
     * @type {Array<MicrosoftNAVSalesOrderHeader>}
     * @memberof MicrosoftNAVCompany
     */
    'salesOrderHeader'?: Array<MicrosoftNAVSalesOrderHeader>;
    /**
     * 
     * @type {Array<MicrosoftNAVSalesOrderLine>}
     * @memberof MicrosoftNAVCompany
     */
    'salesOrderLines'?: Array<MicrosoftNAVSalesOrderLine>;
    /**
     * 
     * @type {Array<MicrosoftNAVSalesInvoiceHeader>}
     * @memberof MicrosoftNAVCompany
     */
    'salesInvoicesHeader'?: Array<MicrosoftNAVSalesInvoiceHeader>;
    /**
     * 
     * @type {Array<MicrosoftNAVSalesInvoiceLine>}
     * @memberof MicrosoftNAVCompany
     */
    'salesInvoiceLines'?: Array<MicrosoftNAVSalesInvoiceLine>;
    /**
     * 
     * @type {Array<MicrosoftNAVSalesShipmentHeader>}
     * @memberof MicrosoftNAVCompany
     */
    'salesShipmentsHeader'?: Array<MicrosoftNAVSalesShipmentHeader>;
    /**
     * 
     * @type {Array<MicrosoftNAVSalesShipmentLine>}
     * @memberof MicrosoftNAVCompany
     */
    'salesShipmentLines'?: Array<MicrosoftNAVSalesShipmentLine>;
    /**
     * 
     * @type {Array<MicrosoftNAVSalesCrMemoHeader>}
     * @memberof MicrosoftNAVCompany
     */
    'salesCrMemosHeader'?: Array<MicrosoftNAVSalesCrMemoHeader>;
    /**
     * 
     * @type {Array<MicrosoftNAVSalescrMemoLine>}
     * @memberof MicrosoftNAVCompany
     */
    'salescrMemoLines'?: Array<MicrosoftNAVSalescrMemoLine>;
    /**
     * 
     * @type {Array<MicrosoftNAVItem>}
     * @memberof MicrosoftNAVCompany
     */
    'items'?: Array<MicrosoftNAVItem>;
    /**
     * 
     * @type {Array<MicrosoftNAVShiptoAddress>}
     * @memberof MicrosoftNAVCompany
     */
    'shiptoAddress'?: Array<MicrosoftNAVShiptoAddress>;
    /**
     * 
     * @type {Array<MicrosoftNAVSalesQuoteHeader>}
     * @memberof MicrosoftNAVCompany
     */
    'salesQuoteHeader'?: Array<MicrosoftNAVSalesQuoteHeader>;
    /**
     * 
     * @type {Array<MicrosoftNAVSalesQuoteLine>}
     * @memberof MicrosoftNAVCompany
     */
    'salesQuoteLines'?: Array<MicrosoftNAVSalesQuoteLine>;
    /**
     * 
     * @type {Array<MicrosoftNAVQuerySalesOrderHeader>}
     * @memberof MicrosoftNAVCompany
     */
    'querySalesOrderHeader'?: Array<MicrosoftNAVQuerySalesOrderHeader>;
    /**
     * 
     * @type {Array<MicrosoftNAVQuerySalesInvoice>}
     * @memberof MicrosoftNAVCompany
     */
    'querySalesInvoice'?: Array<MicrosoftNAVQuerySalesInvoice>;
    /**
     * 
     * @type {Array<MicrosoftNAVQuerySalesCrMemo>}
     * @memberof MicrosoftNAVCompany
     */
    'querySalesCrMemo'?: Array<MicrosoftNAVQuerySalesCrMemo>;
    /**
     * 
     * @type {Array<MicrosoftNAVQuerySalesShipment>}
     * @memberof MicrosoftNAVCompany
     */
    'querySalesShipment'?: Array<MicrosoftNAVQuerySalesShipment>;
    /**
     * 
     * @type {Array<MicrosoftNAVQueryCustomer>}
     * @memberof MicrosoftNAVCompany
     */
    'queryCustomer'?: Array<MicrosoftNAVQueryCustomer>;
    /**
     * 
     * @type {Array<MicrosoftNAVQueryAttributes>}
     * @memberof MicrosoftNAVCompany
     */
    'queryAttributes'?: Array<MicrosoftNAVQueryAttributes>;
    /**
     * 
     * @type {Array<MicrosoftNAVQueryAttributesValues>}
     * @memberof MicrosoftNAVCompany
     */
    'queryAttributesValues'?: Array<MicrosoftNAVQueryAttributesValues>;
    /**
     * 
     * @type {Array<MicrosoftNAVQueryItemAttributes>}
     * @memberof MicrosoftNAVCompany
     */
    'queryItemAttributes'?: Array<MicrosoftNAVQueryItemAttributes>;
    /**
     * 
     * @type {Array<MicrosoftNAVQueryCategoryAttributes>}
     * @memberof MicrosoftNAVCompany
     */
    'queryCategoryAttributes'?: Array<MicrosoftNAVQueryCategoryAttributes>;
    /**
     * 
     * @type {Array<MicrosoftNAVQueryItems>}
     * @memberof MicrosoftNAVCompany
     */
    'queryItems'?: Array<MicrosoftNAVQueryItems>;
}
/**
 * 
 * @export
 * @interface MicrosoftNAVInsertItem
 */
export interface MicrosoftNAVInsertItem {
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVInsertItem
     */
    'no'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVInsertItem
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVInsertItem
     */
    'situacionReferencia'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVInsertItem
     */
    'categoriaProducto'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVInsertItem
     */
    'pesoNeto'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVInsertItem
     */
    'pesoBruto'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVInsertItem
     */
    'volumen'?: string;
}
/**
 * 
 * @export
 * @interface MicrosoftNAVItem
 */
export interface MicrosoftNAVItem {
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVItem
     */
    'no': string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVItem
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVItem
     */
    'description2'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVItem
     */
    'itemCategoryCode'?: string;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVItem
     */
    'unitPrice'?: number;
}
/**
 * 
 * @export
 * @interface MicrosoftNAVNewEANCode
 */
export interface MicrosoftNAVNewEANCode {
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVNewEANCode
     */
    'itemCategoryCode'?: string;
}
/**
 * 
 * @export
 * @interface MicrosoftNAVQueryAttributes
 */
export interface MicrosoftNAVQueryAttributes {
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVQueryAttributes
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQueryAttributes
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQueryAttributes
     */
    'group'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQueryAttributes
     */
    'type'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof MicrosoftNAVQueryAttributes
     */
    'principalFilter'?: boolean;
}
/**
 * 
 * @export
 * @interface MicrosoftNAVQueryAttributesValues
 */
export interface MicrosoftNAVQueryAttributesValues {
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVQueryAttributesValues
     */
    'attributeID': number;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVQueryAttributesValues
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQueryAttributesValues
     */
    'value'?: string;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVQueryAttributesValues
     */
    'numericValue'?: number;
}
/**
 * 
 * @export
 * @interface MicrosoftNAVQueryCategoryAttributes
 */
export interface MicrosoftNAVQueryCategoryAttributes {
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQueryCategoryAttributes
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQueryCategoryAttributes
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQueryCategoryAttributes
     */
    'parentCategory'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQueryCategoryAttributes
     */
    'lastModifiedDateTime'?: string;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVQueryCategoryAttributes
     */
    'attributeID': number;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQueryCategoryAttributes
     */
    'attributeCode'?: string;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVQueryCategoryAttributes
     */
    'valueid': number;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQueryCategoryAttributes
     */
    'value'?: string;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVQueryCategoryAttributes
     */
    'auxiliaryIndex1': number;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQueryCategoryAttributes
     */
    'auxiliaryIndex2': string;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVQueryCategoryAttributes
     */
    'auxiliaryIndex3': number;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVQueryCategoryAttributes
     */
    'auxiliaryIndex4': number;
}
/**
 * 
 * @export
 * @interface MicrosoftNAVQueryCustomer
 */
export interface MicrosoftNAVQueryCustomer {
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQueryCustomer
     */
    'customerNo': string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQueryCustomer
     */
    'customerName'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQueryCustomer
     */
    'billToCustomerNo'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQueryCustomer
     */
    'shipToCode': string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQueryCustomer
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQueryCustomer
     */
    'name2'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQueryCustomer
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQueryCustomer
     */
    'address2'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQueryCustomer
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQueryCustomer
     */
    'postCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQueryCustomer
     */
    'county'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQueryCustomer
     */
    'contact'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQueryCustomer
     */
    'phoneNo'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQueryCustomer
     */
    'eMail'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof MicrosoftNAVQueryCustomer
     */
    'shop'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQueryCustomer
     */
    'auxiliaryIndex1': string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQueryCustomer
     */
    'customerFilter_FilterOnly'?: string;
}
/**
 * 
 * @export
 * @interface MicrosoftNAVQueryItemAttributes
 */
export interface MicrosoftNAVQueryItemAttributes {
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQueryItemAttributes
     */
    'no': string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQueryItemAttributes
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQueryItemAttributes
     */
    'itemCategoryCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQueryItemAttributes
     */
    'referenceStatus'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQueryItemAttributes
     */
    'marca'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQueryItemAttributes
     */
    'lastDateTimeModified'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQueryItemAttributes
     */
    'barCode': string;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVQueryItemAttributes
     */
    'attributeID': number;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQueryItemAttributes
     */
    'attributeCode'?: string;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVQueryItemAttributes
     */
    'valueid': number;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQueryItemAttributes
     */
    'value'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQueryItemAttributes
     */
    'auxiliaryIndex1': string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQueryItemAttributes
     */
    'auxiliaryIndex2': string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQueryItemAttributes
     */
    'auxiliaryIndex3': string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQueryItemAttributes
     */
    'auxiliaryIndex4': string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQueryItemAttributes
     */
    'auxiliaryIndex5': string;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVQueryItemAttributes
     */
    'auxiliaryIndex6': number;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQueryItemAttributes
     */
    'auxiliaryIndex7': string;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVQueryItemAttributes
     */
    'auxiliaryIndex8': number;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVQueryItemAttributes
     */
    'auxiliaryIndex9': number;
}
/**
 * 
 * @export
 * @interface MicrosoftNAVQueryItems
 */
export interface MicrosoftNAVQueryItems {
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQueryItems
     */
    'no': string;
}
/**
 * 
 * @export
 * @interface MicrosoftNAVQuerySalesCrMemo
 */
export interface MicrosoftNAVQuerySalesCrMemo {
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesCrMemo
     */
    'no': string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesCrMemo
     */
    'sellToCustomerNo'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesCrMemo
     */
    'sellToCustomerName'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesCrMemo
     */
    'sellToCustomerName2'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesCrMemo
     */
    'sellToAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesCrMemo
     */
    'sellToAddress2'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesCrMemo
     */
    'sellToCity'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesCrMemo
     */
    'sellToContact'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesCrMemo
     */
    'sellToPostCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesCrMemo
     */
    'sellToCounty'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesCrMemo
     */
    'sellToCountryRegionCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesCrMemo
     */
    'billToCustomerNo'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesCrMemo
     */
    'billToName'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesCrMemo
     */
    'billToName2'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesCrMemo
     */
    'billToAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesCrMemo
     */
    'billToAddress2'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesCrMemo
     */
    'billToCity'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesCrMemo
     */
    'billToContact'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesCrMemo
     */
    'billToPostCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesCrMemo
     */
    'billToCounty'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesCrMemo
     */
    'billToCountryRegionCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesCrMemo
     */
    'shipToCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesCrMemo
     */
    'shipToName'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesCrMemo
     */
    'shipToName2'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesCrMemo
     */
    'shipToAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesCrMemo
     */
    'shipToAddress2'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesCrMemo
     */
    'shipToCity'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesCrMemo
     */
    'shipToContact'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesCrMemo
     */
    'shipToPostCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesCrMemo
     */
    'shipToCounty'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesCrMemo
     */
    'shipToCountryRegionCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesCrMemo
     */
    'postingDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesCrMemo
     */
    'yourReference'?: string;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVQuerySalesCrMemo
     */
    'lineNo': number;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesCrMemo
     */
    'lineType'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesCrMemo
     */
    'itemNo'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesCrMemo
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVQuerySalesCrMemo
     */
    'quantity'?: number;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVQuerySalesCrMemo
     */
    'unitPrice'?: number;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVQuerySalesCrMemo
     */
    'lineDiscountPercent'?: number;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVQuerySalesCrMemo
     */
    'lineDiscountAmount'?: number;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVQuerySalesCrMemo
     */
    'lineAmount'?: number;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVQuerySalesCrMemo
     */
    'vatPercent'?: number;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesCrMemo
     */
    'barCode': string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesCrMemo
     */
    'auxiliaryIndex1': string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesCrMemo
     */
    'auxiliaryIndex2': string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesCrMemo
     */
    'auxiliaryIndex3': string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesCrMemo
     */
    'auxiliaryIndex4': string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesCrMemo
     */
    'auxiliaryIndex5': string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesCrMemo
     */
    'auxiliaryIndex6': string;
}
/**
 * 
 * @export
 * @interface MicrosoftNAVQuerySalesInvoice
 */
export interface MicrosoftNAVQuerySalesInvoice {
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesInvoice
     */
    'no': string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesInvoice
     */
    'sellToCustomerNo'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesInvoice
     */
    'sellToCustomerName'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesInvoice
     */
    'sellToCustomerName2'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesInvoice
     */
    'sellToAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesInvoice
     */
    'sellToAddress2'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesInvoice
     */
    'sellToCity'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesInvoice
     */
    'sellToContact'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesInvoice
     */
    'sellToPostCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesInvoice
     */
    'sellToCounty'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesInvoice
     */
    'sellToCountryRegionCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesInvoice
     */
    'billToCustomerNo'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesInvoice
     */
    'billToName'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesInvoice
     */
    'billToName2'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesInvoice
     */
    'billToAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesInvoice
     */
    'billToAddress2'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesInvoice
     */
    'billToCity'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesInvoice
     */
    'billToContact'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesInvoice
     */
    'billToPostCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesInvoice
     */
    'billToCounty'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesInvoice
     */
    'billToCountryRegionCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesInvoice
     */
    'shipToCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesInvoice
     */
    'shipToName'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesInvoice
     */
    'shipToName2'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesInvoice
     */
    'shipToAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesInvoice
     */
    'shipToAddress2'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesInvoice
     */
    'shipToCity'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesInvoice
     */
    'shipToContact'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesInvoice
     */
    'shipToPostCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesInvoice
     */
    'shipToCounty'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesInvoice
     */
    'shipToCountryRegionCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesInvoice
     */
    'orderDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesInvoice
     */
    'postingDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesInvoice
     */
    'yourReference'?: string;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVQuerySalesInvoice
     */
    'lineNo': number;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesInvoice
     */
    'lineType'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesInvoice
     */
    'itemNo'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesInvoice
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVQuerySalesInvoice
     */
    'quantity'?: number;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVQuerySalesInvoice
     */
    'unitPrice'?: number;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVQuerySalesInvoice
     */
    'lineDiscountPercent'?: number;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVQuerySalesInvoice
     */
    'lineDiscountAmount'?: number;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVQuerySalesInvoice
     */
    'lineAmount'?: number;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVQuerySalesInvoice
     */
    'vatPercent'?: number;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesInvoice
     */
    'barCode': string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesInvoice
     */
    'auxiliaryIndex1': string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesInvoice
     */
    'auxiliaryIndex2': string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesInvoice
     */
    'auxiliaryIndex3': string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesInvoice
     */
    'auxiliaryIndex4': string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesInvoice
     */
    'auxiliaryIndex5': string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesInvoice
     */
    'auxiliaryIndex6': string;
}
/**
 * 
 * @export
 * @interface MicrosoftNAVQuerySalesOrderHeader
 */
export interface MicrosoftNAVQuerySalesOrderHeader {
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesOrderHeader
     */
    'documentType': string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesOrderHeader
     */
    'no': string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesOrderHeader
     */
    'sellToCustomerNo'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesOrderHeader
     */
    'sellToCustomerName'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesOrderHeader
     */
    'sellToCustomerName2'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesOrderHeader
     */
    'sellToAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesOrderHeader
     */
    'sellToAddress2'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesOrderHeader
     */
    'sellToCity'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesOrderHeader
     */
    'sellToContact'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesOrderHeader
     */
    'sellToPostCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesOrderHeader
     */
    'sellToCounty'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesOrderHeader
     */
    'sellToCountryRegionCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesOrderHeader
     */
    'billToCustomerNo'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesOrderHeader
     */
    'billToName'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesOrderHeader
     */
    'billToName2'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesOrderHeader
     */
    'billToAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesOrderHeader
     */
    'billToAddress2'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesOrderHeader
     */
    'billToCity'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesOrderHeader
     */
    'billToContact'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesOrderHeader
     */
    'billToPostCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesOrderHeader
     */
    'billToCounty'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesOrderHeader
     */
    'billToCountryRegionCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesOrderHeader
     */
    'shipToCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesOrderHeader
     */
    'shipToName'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesOrderHeader
     */
    'shipToName2'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesOrderHeader
     */
    'shipToAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesOrderHeader
     */
    'shipToAddress2'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesOrderHeader
     */
    'shipToCity'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesOrderHeader
     */
    'shipToContact'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesOrderHeader
     */
    'shipToPostCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesOrderHeader
     */
    'shipToCounty'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesOrderHeader
     */
    'shipToCountryRegionCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesOrderHeader
     */
    'orderDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesOrderHeader
     */
    'postingDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesOrderHeader
     */
    'yourReference'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesOrderHeader
     */
    'status'?: string;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVQuerySalesOrderHeader
     */
    'lineNo': number;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesOrderHeader
     */
    'lineType'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesOrderHeader
     */
    'itemNo'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesOrderHeader
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVQuerySalesOrderHeader
     */
    'quantity'?: number;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVQuerySalesOrderHeader
     */
    'unitPrice'?: number;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVQuerySalesOrderHeader
     */
    'lineDiscountPercent'?: number;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVQuerySalesOrderHeader
     */
    'lineDiscountAmount'?: number;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVQuerySalesOrderHeader
     */
    'lineAmount'?: number;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVQuerySalesOrderHeader
     */
    'vatPercent'?: number;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesOrderHeader
     */
    'barCode': string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesOrderHeader
     */
    'auxiliaryIndex1': string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesOrderHeader
     */
    'auxiliaryIndex2': string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesOrderHeader
     */
    'auxiliaryIndex3': string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesOrderHeader
     */
    'auxiliaryIndex4': string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesOrderHeader
     */
    'auxiliaryIndex5': string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesOrderHeader
     */
    'auxiliaryIndex6': string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesOrderHeader
     */
    'auxiliaryIndex7': string;
}
/**
 * 
 * @export
 * @interface MicrosoftNAVQuerySalesShipment
 */
export interface MicrosoftNAVQuerySalesShipment {
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesShipment
     */
    'no': string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesShipment
     */
    'sellToCustomerNo'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesShipment
     */
    'sellToCustomerName'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesShipment
     */
    'sellToCustomerName2'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesShipment
     */
    'sellToAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesShipment
     */
    'sellToAddress2'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesShipment
     */
    'sellToCity'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesShipment
     */
    'sellToContact'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesShipment
     */
    'sellToPostCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesShipment
     */
    'sellToCounty'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesShipment
     */
    'sellToCountryRegionCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesShipment
     */
    'billToCustomerNo'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesShipment
     */
    'billToName'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesShipment
     */
    'billToName2'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesShipment
     */
    'billToAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesShipment
     */
    'billToAddress2'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesShipment
     */
    'billToCity'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesShipment
     */
    'billToContact'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesShipment
     */
    'billToPostCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesShipment
     */
    'billToCounty'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesShipment
     */
    'billToCountryRegionCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesShipment
     */
    'shipToCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesShipment
     */
    'shipToName'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesShipment
     */
    'shipToName2'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesShipment
     */
    'shipToAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesShipment
     */
    'shipToAddress2'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesShipment
     */
    'shipToCity'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesShipment
     */
    'shipToContact'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesShipment
     */
    'shipToPostCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesShipment
     */
    'shipToCounty'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesShipment
     */
    'shipToCountryRegionCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesShipment
     */
    'postingDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesShipment
     */
    'yourReference'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesShipment
     */
    'orderNo'?: string;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVQuerySalesShipment
     */
    'lineNo': number;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesShipment
     */
    'lineType'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesShipment
     */
    'itemNo'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesShipment
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVQuerySalesShipment
     */
    'quantity'?: number;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVQuerySalesShipment
     */
    'unitPrice'?: number;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVQuerySalesShipment
     */
    'lineDiscountPercent'?: number;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVQuerySalesShipment
     */
    'vatPercent'?: number;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesShipment
     */
    'barCode': string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesShipment
     */
    'auxiliaryIndex1': string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesShipment
     */
    'auxiliaryIndex2': string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesShipment
     */
    'auxiliaryIndex3': string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesShipment
     */
    'auxiliaryIndex4': string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesShipment
     */
    'auxiliaryIndex5': string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVQuerySalesShipment
     */
    'auxiliaryIndex6': string;
}
/**
 * 
 * @export
 * @interface MicrosoftNAVSalesCrMemoHeader
 */
export interface MicrosoftNAVSalesCrMemoHeader {
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesCrMemoHeader
     */
    'documentNo': string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesCrMemoHeader
     */
    'sellToCustomerNo'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesCrMemoHeader
     */
    'sellToCustomerName'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesCrMemoHeader
     */
    'selltoAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesCrMemoHeader
     */
    'selltoAddress2'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesCrMemoHeader
     */
    'selltoCity'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesCrMemoHeader
     */
    'selltoCounty'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesCrMemoHeader
     */
    'selltoPostCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesCrMemoHeader
     */
    'selltoCountryRegionCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesCrMemoHeader
     */
    'postingDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesCrMemoHeader
     */
    'shipmentDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesCrMemoHeader
     */
    'paymentMethodCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesCrMemoHeader
     */
    'paymentTermsCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesCrMemoHeader
     */
    'shipToAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesCrMemoHeader
     */
    'shipToAddress2'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesCrMemoHeader
     */
    'shiptoCity'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesCrMemoHeader
     */
    'shipToCounty'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesCrMemoHeader
     */
    'shipToPostCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesCrMemoHeader
     */
    'shipToCountryCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesCrMemoHeader
     */
    'billtoCustomerNo'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesCrMemoHeader
     */
    'billtoName'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesCrMemoHeader
     */
    'billToAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesCrMemoHeader
     */
    'billToAddress2'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesCrMemoHeader
     */
    'billtoCity'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesCrMemoHeader
     */
    'billToCounty'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesCrMemoHeader
     */
    'billToPostCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesCrMemoHeader
     */
    'billToCountryCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesCrMemoHeader
     */
    'yourReference'?: string;
    /**
     * 
     * @type {Array<MicrosoftNAVSalescrMemoLine>}
     * @memberof MicrosoftNAVSalesCrMemoHeader
     */
    'salescrMemoLines'?: Array<MicrosoftNAVSalescrMemoLine>;
}
/**
 * 
 * @export
 * @interface MicrosoftNAVSalesInvoiceHeader
 */
export interface MicrosoftNAVSalesInvoiceHeader {
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesInvoiceHeader
     */
    'documentNo': string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesInvoiceHeader
     */
    'sellToCustomerNo'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesInvoiceHeader
     */
    'sellToCustomerName'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesInvoiceHeader
     */
    'selltoAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesInvoiceHeader
     */
    'selltoAddress2'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesInvoiceHeader
     */
    'selltoCity'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesInvoiceHeader
     */
    'selltoCounty'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesInvoiceHeader
     */
    'selltoPostCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesInvoiceHeader
     */
    'selltoCountryRegionCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesInvoiceHeader
     */
    'postingDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesInvoiceHeader
     */
    'orderDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesInvoiceHeader
     */
    'paymentMethodCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesInvoiceHeader
     */
    'paymentTermsCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesInvoiceHeader
     */
    'shipToAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesInvoiceHeader
     */
    'shipToAddress2'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesInvoiceHeader
     */
    'shiptoCity'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesInvoiceHeader
     */
    'shipToCounty'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesInvoiceHeader
     */
    'shipToPostCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesInvoiceHeader
     */
    'shipToCountryCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesInvoiceHeader
     */
    'billtoCustomerNo'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesInvoiceHeader
     */
    'billtoName'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesInvoiceHeader
     */
    'billToAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesInvoiceHeader
     */
    'billToAddress2'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesInvoiceHeader
     */
    'billtoCity'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesInvoiceHeader
     */
    'billToCounty'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesInvoiceHeader
     */
    'billToPostCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesInvoiceHeader
     */
    'billToCountryCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesInvoiceHeader
     */
    'yourReference'?: string;
    /**
     * 
     * @type {Array<MicrosoftNAVSalesInvoiceLine>}
     * @memberof MicrosoftNAVSalesInvoiceHeader
     */
    'salesInvoiceLines'?: Array<MicrosoftNAVSalesInvoiceLine>;
}
/**
 * 
 * @export
 * @interface MicrosoftNAVSalesInvoiceLine
 */
export interface MicrosoftNAVSalesInvoiceLine {
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesInvoiceLine
     */
    'documentNo': string;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVSalesInvoiceLine
     */
    'lineNo': number;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesInvoiceLine
     */
    'lineType'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesInvoiceLine
     */
    'no'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesInvoiceLine
     */
    'BarCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesInvoiceLine
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVSalesInvoiceLine
     */
    'quantity'?: number;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVSalesInvoiceLine
     */
    'unitPrice'?: number;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVSalesInvoiceLine
     */
    'lineDiscountPercent'?: number;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVSalesInvoiceLine
     */
    'lineDiscountAmount'?: number;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVSalesInvoiceLine
     */
    'lineAmount'?: number;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVSalesInvoiceLine
     */
    'vatPercent'?: number;
    /**
     * 
     * @type {MicrosoftNAVSalesInvoiceHeader}
     * @memberof MicrosoftNAVSalesInvoiceLine
     */
    'salesInvoiceHeader'?: MicrosoftNAVSalesInvoiceHeader;
}
/**
 * 
 * @export
 * @interface MicrosoftNAVSalesOrderHeader
 */
export interface MicrosoftNAVSalesOrderHeader {
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesOrderHeader
     */
    'documentType': string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesOrderHeader
     */
    'documentNo': string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesOrderHeader
     */
    'sellToCustomerNo'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesOrderHeader
     */
    'sellToCustomerName'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesOrderHeader
     */
    'selltoAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesOrderHeader
     */
    'selltoAddress2'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesOrderHeader
     */
    'selltoCity'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesOrderHeader
     */
    'selltoCounty'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesOrderHeader
     */
    'selltoPostCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesOrderHeader
     */
    'selltoCountryRegionCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesOrderHeader
     */
    'postingDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesOrderHeader
     */
    'orderDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesOrderHeader
     */
    'Status'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesOrderHeader
     */
    'paymentMethodCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesOrderHeader
     */
    'paymentTermsCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesOrderHeader
     */
    'shipToAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesOrderHeader
     */
    'shipToAddress2'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesOrderHeader
     */
    'shiptoCity'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesOrderHeader
     */
    'shipToCounty'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesOrderHeader
     */
    'shipToPostCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesOrderHeader
     */
    'shipToCountryCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesOrderHeader
     */
    'billtoCustomerNo'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesOrderHeader
     */
    'billtoName'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesOrderHeader
     */
    'billToAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesOrderHeader
     */
    'billToAddress2'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesOrderHeader
     */
    'billtoCity'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesOrderHeader
     */
    'billToCounty'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesOrderHeader
     */
    'billToPostCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesOrderHeader
     */
    'billToCountryCode'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof MicrosoftNAVSalesOrderHeader
     */
    'Shipped'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesOrderHeader
     */
    'yourReference'?: string;
    /**
     * 
     * @type {Array<MicrosoftNAVSalesOrderLine>}
     * @memberof MicrosoftNAVSalesOrderHeader
     */
    'salesOrderLines'?: Array<MicrosoftNAVSalesOrderLine>;
}
/**
 * 
 * @export
 * @interface MicrosoftNAVSalesOrderLine
 */
export interface MicrosoftNAVSalesOrderLine {
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesOrderLine
     */
    'documentType': string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesOrderLine
     */
    'documentNo': string;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVSalesOrderLine
     */
    'lineNo': number;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesOrderLine
     */
    'lineType'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesOrderLine
     */
    'no'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesOrderLine
     */
    'BarCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesOrderLine
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVSalesOrderLine
     */
    'quantity'?: number;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVSalesOrderLine
     */
    'unitPrice'?: number;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVSalesOrderLine
     */
    'lineDiscountPercent'?: number;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVSalesOrderLine
     */
    'lineDiscountAmount'?: number;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVSalesOrderLine
     */
    'lineAmount'?: number;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVSalesOrderLine
     */
    'vatPercent'?: number;
    /**
     * 
     * @type {MicrosoftNAVSalesOrderHeader}
     * @memberof MicrosoftNAVSalesOrderLine
     */
    'salesOrderHeader'?: MicrosoftNAVSalesOrderHeader;
}
/**
 * 
 * @export
 * @interface MicrosoftNAVSalesQuoteHeader
 */
export interface MicrosoftNAVSalesQuoteHeader {
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesQuoteHeader
     */
    'documentType': string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesQuoteHeader
     */
    'documentNo': string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesQuoteHeader
     */
    'sellToCustomerNo'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesQuoteHeader
     */
    'sellToCustomerName'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesQuoteHeader
     */
    'selltoAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesQuoteHeader
     */
    'selltoAddress2'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesQuoteHeader
     */
    'selltoCity'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesQuoteHeader
     */
    'selltoCounty'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesQuoteHeader
     */
    'selltoPostCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesQuoteHeader
     */
    'selltoCountryRegionCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesQuoteHeader
     */
    'postingDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesQuoteHeader
     */
    'orderDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesQuoteHeader
     */
    'Status'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesQuoteHeader
     */
    'paymentMethodCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesQuoteHeader
     */
    'paymentTermsCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesQuoteHeader
     */
    'shipToAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesQuoteHeader
     */
    'shipToAddress2'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesQuoteHeader
     */
    'shiptoCity'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesQuoteHeader
     */
    'shipToCounty'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesQuoteHeader
     */
    'shipToPostCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesQuoteHeader
     */
    'shipToCountryCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesQuoteHeader
     */
    'billtoCustomerNo'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesQuoteHeader
     */
    'billtoName'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesQuoteHeader
     */
    'billToAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesQuoteHeader
     */
    'billToAddress2'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesQuoteHeader
     */
    'billtoCity'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesQuoteHeader
     */
    'billToCounty'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesQuoteHeader
     */
    'billToPostCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesQuoteHeader
     */
    'billToCountryCode'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof MicrosoftNAVSalesQuoteHeader
     */
    'Shipped'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesQuoteHeader
     */
    'yourReference'?: string;
    /**
     * 
     * @type {Array<MicrosoftNAVSalesQuoteLine>}
     * @memberof MicrosoftNAVSalesQuoteHeader
     */
    'salesQuoteLines'?: Array<MicrosoftNAVSalesQuoteLine>;
}
/**
 * 
 * @export
 * @interface MicrosoftNAVSalesQuoteLine
 */
export interface MicrosoftNAVSalesQuoteLine {
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesQuoteLine
     */
    'documentType': string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesQuoteLine
     */
    'documentNo': string;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVSalesQuoteLine
     */
    'lineNo': number;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesQuoteLine
     */
    'lineType'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesQuoteLine
     */
    'no'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesQuoteLine
     */
    'BarCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesQuoteLine
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVSalesQuoteLine
     */
    'quantity'?: number;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVSalesQuoteLine
     */
    'unitPrice'?: number;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVSalesQuoteLine
     */
    'lineDiscountPercent'?: number;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVSalesQuoteLine
     */
    'lineDiscountAmount'?: number;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVSalesQuoteLine
     */
    'lineAmount'?: number;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVSalesQuoteLine
     */
    'vatPercent'?: number;
    /**
     * 
     * @type {MicrosoftNAVSalesOrderHeader}
     * @memberof MicrosoftNAVSalesQuoteLine
     */
    'salesOrderHeader'?: MicrosoftNAVSalesOrderHeader;
}
/**
 * 
 * @export
 * @interface MicrosoftNAVSalesShipmentHeader
 */
export interface MicrosoftNAVSalesShipmentHeader {
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesShipmentHeader
     */
    'documentNo': string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesShipmentHeader
     */
    'sellToCustomerNo'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesShipmentHeader
     */
    'sellToCustomerName'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesShipmentHeader
     */
    'selltoAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesShipmentHeader
     */
    'selltoAddress2'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesShipmentHeader
     */
    'selltoCity'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesShipmentHeader
     */
    'selltoCounty'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesShipmentHeader
     */
    'selltoPostCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesShipmentHeader
     */
    'selltoCountryRegionCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesShipmentHeader
     */
    'postingDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesShipmentHeader
     */
    'shipmentDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesShipmentHeader
     */
    'paymentMethodCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesShipmentHeader
     */
    'paymentTermsCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesShipmentHeader
     */
    'shipToAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesShipmentHeader
     */
    'shipToAddress2'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesShipmentHeader
     */
    'shiptoCity'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesShipmentHeader
     */
    'shipToCounty'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesShipmentHeader
     */
    'shipToPostCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesShipmentHeader
     */
    'shipToCountryCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesShipmentHeader
     */
    'billtoCustomerNo'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesShipmentHeader
     */
    'billtoName'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesShipmentHeader
     */
    'billToAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesShipmentHeader
     */
    'billToAddress2'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesShipmentHeader
     */
    'billtoCity'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesShipmentHeader
     */
    'billToCounty'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesShipmentHeader
     */
    'billToPostCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesShipmentHeader
     */
    'billToCountryCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesShipmentHeader
     */
    'OrderNo'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesShipmentHeader
     */
    'yourReference'?: string;
    /**
     * 
     * @type {Array<MicrosoftNAVSalesShipmentLine>}
     * @memberof MicrosoftNAVSalesShipmentHeader
     */
    'salesShipmentLines'?: Array<MicrosoftNAVSalesShipmentLine>;
}
/**
 * 
 * @export
 * @interface MicrosoftNAVSalesShipmentLine
 */
export interface MicrosoftNAVSalesShipmentLine {
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesShipmentLine
     */
    'documentNo': string;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVSalesShipmentLine
     */
    'lineNo': number;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesShipmentLine
     */
    'lineType'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesShipmentLine
     */
    'no'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesShipmentLine
     */
    'BarCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalesShipmentLine
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVSalesShipmentLine
     */
    'quantity'?: number;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVSalesShipmentLine
     */
    'unitPrice'?: number;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVSalesShipmentLine
     */
    'lineDiscountPercent'?: number;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVSalesShipmentLine
     */
    'vatPercent'?: number;
    /**
     * 
     * @type {MicrosoftNAVSalesShipmentHeader}
     * @memberof MicrosoftNAVSalesShipmentLine
     */
    'salesShipmentHeader'?: MicrosoftNAVSalesShipmentHeader;
}
/**
 * 
 * @export
 * @interface MicrosoftNAVSalescrMemoLine
 */
export interface MicrosoftNAVSalescrMemoLine {
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalescrMemoLine
     */
    'documentNo': string;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVSalescrMemoLine
     */
    'lineNo': number;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalescrMemoLine
     */
    'lineType'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalescrMemoLine
     */
    'no'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalescrMemoLine
     */
    'BarCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSalescrMemoLine
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVSalescrMemoLine
     */
    'quantity'?: number;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVSalescrMemoLine
     */
    'unitPrice'?: number;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVSalescrMemoLine
     */
    'lineDiscountPercent'?: number;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVSalescrMemoLine
     */
    'lineDiscountAmount'?: number;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVSalescrMemoLine
     */
    'lineAmount'?: number;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftNAVSalescrMemoLine
     */
    'vatPercent'?: number;
    /**
     * 
     * @type {MicrosoftNAVSalesCrMemoHeader}
     * @memberof MicrosoftNAVSalescrMemoLine
     */
    'salesCrMemoHeader'?: MicrosoftNAVSalesCrMemoHeader;
}
/**
 * 
 * @export
 * @interface MicrosoftNAVShiptoAddress
 */
export interface MicrosoftNAVShiptoAddress {
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVShiptoAddress
     */
    'customerNo': string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVShiptoAddress
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVShiptoAddress
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVShiptoAddress
     */
    'name2'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVShiptoAddress
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVShiptoAddress
     */
    'address2'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVShiptoAddress
     */
    'postCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVShiptoAddress
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVShiptoAddress
     */
    'county'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVShiptoAddress
     */
    'countryRegionCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVShiptoAddress
     */
    'phoneNo'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVShiptoAddress
     */
    'eMail'?: string;
}
/**
 * 
 * @export
 * @interface MicrosoftNAVSubscriptions
 */
export interface MicrosoftNAVSubscriptions {
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSubscriptions
     */
    'subscriptionId': string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSubscriptions
     */
    'notificationUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSubscriptions
     */
    'resource'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSubscriptions
     */
    'userId'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSubscriptions
     */
    'lastModifiedDateTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSubscriptions
     */
    'clientState'?: string;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftNAVSubscriptions
     */
    'expirationDateTime'?: string;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {ErrorError}
     * @memberof ModelError
     */
    'error'?: ErrorError;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary createCompaniescompany
         * @param {MicrosoftNAVCompany} company 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCompany: async (company: MicrosoftNAVCompany, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'company' is not null or undefined
            assertParamExists('createCompany', 'company', company)
            const localVarPath = `/companies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(company, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary createItemsitem
         * @param {MicrosoftNAVItem} item 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createItem: async (item: MicrosoftNAVItem, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'item' is not null or undefined
            assertParamExists('createItem', 'item', item)
            const localVarPath = `/items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(item, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary createQueryAttributesqueryAttributes
         * @param {MicrosoftNAVQueryAttributes} queryAttributes 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQueryAttributes: async (queryAttributes: MicrosoftNAVQueryAttributes, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'queryAttributes' is not null or undefined
            assertParamExists('createQueryAttributes', 'queryAttributes', queryAttributes)
            const localVarPath = `/queryAttributes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(queryAttributes, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary createQueryAttributesValuesqueryAttributesValues
         * @param {MicrosoftNAVQueryAttributesValues} queryAttributesValues 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQueryAttributesValues: async (queryAttributesValues: MicrosoftNAVQueryAttributesValues, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'queryAttributesValues' is not null or undefined
            assertParamExists('createQueryAttributesValues', 'queryAttributesValues', queryAttributesValues)
            const localVarPath = `/queryAttributesValues`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(queryAttributesValues, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary createQueryCategoriesqueryCategories
         * @param {MicrosoftNAVQueryCategories} queryCategories 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQueryCategories: async (queryCategories: MicrosoftNAVQueryCategories, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'queryCategories' is not null or undefined
            assertParamExists('createQueryCategories', 'queryCategories', queryCategories)
            const localVarPath = `/queryCategories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(queryCategories, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary createQueryCategoryAttributesqueryCategoryAttributes
         * @param {MicrosoftNAVQueryCategoryAttributes} queryCategoryAttributes 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQueryCategoryAttributes: async (queryCategoryAttributes: MicrosoftNAVQueryCategoryAttributes, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'queryCategoryAttributes' is not null or undefined
            assertParamExists('createQueryCategoryAttributes', 'queryCategoryAttributes', queryCategoryAttributes)
            const localVarPath = `/queryCategoryAttributes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(queryCategoryAttributes, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary createQueryCustomerqueryCustomer
         * @param {MicrosoftNAVQueryCustomer} queryCustomer 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQueryCustomer: async (queryCustomer: MicrosoftNAVQueryCustomer, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'queryCustomer' is not null or undefined
            assertParamExists('createQueryCustomer', 'queryCustomer', queryCustomer)
            const localVarPath = `/queryCustomer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(queryCustomer, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary createQueryItemAttributesqueryItemAttributes
         * @param {MicrosoftNAVQueryItemAttributes} queryItemAttributes 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQueryItemAttributes: async (queryItemAttributes: MicrosoftNAVQueryItemAttributes, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'queryItemAttributes' is not null or undefined
            assertParamExists('createQueryItemAttributes', 'queryItemAttributes', queryItemAttributes)
            const localVarPath = `/queryItemAttributes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(queryItemAttributes, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary createQueryItemsqueryItems
         * @param {MicrosoftNAVQueryItems} queryItems 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQueryItems: async (queryItems: MicrosoftNAVQueryItems, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'queryItems' is not null or undefined
            assertParamExists('createQueryItems', 'queryItems', queryItems)
            const localVarPath = `/queryItems`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(queryItems, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary createQuerySalesCrMemoquerySalesCrMemo
         * @param {MicrosoftNAVQuerySalesCrMemo} querySalesCrMemo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQuerySalesCrMemo: async (querySalesCrMemo: MicrosoftNAVQuerySalesCrMemo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'querySalesCrMemo' is not null or undefined
            assertParamExists('createQuerySalesCrMemo', 'querySalesCrMemo', querySalesCrMemo)
            const localVarPath = `/querySalesCrMemo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(querySalesCrMemo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary createQuerySalesInvoicequerySalesInvoice
         * @param {MicrosoftNAVQuerySalesInvoice} querySalesInvoice 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQuerySalesInvoice: async (querySalesInvoice: MicrosoftNAVQuerySalesInvoice, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'querySalesInvoice' is not null or undefined
            assertParamExists('createQuerySalesInvoice', 'querySalesInvoice', querySalesInvoice)
            const localVarPath = `/querySalesInvoice`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(querySalesInvoice, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary createQuerySalesOrderHeaderquerySalesOrderHeader
         * @param {MicrosoftNAVQuerySalesOrderHeader} querySalesOrderHeader 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQuerySalesOrderHeader: async (querySalesOrderHeader: MicrosoftNAVQuerySalesOrderHeader, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'querySalesOrderHeader' is not null or undefined
            assertParamExists('createQuerySalesOrderHeader', 'querySalesOrderHeader', querySalesOrderHeader)
            const localVarPath = `/querySalesOrderHeader`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(querySalesOrderHeader, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary createQuerySalesShipmentquerySalesShipment
         * @param {MicrosoftNAVQuerySalesShipment} querySalesShipment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQuerySalesShipment: async (querySalesShipment: MicrosoftNAVQuerySalesShipment, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'querySalesShipment' is not null or undefined
            assertParamExists('createQuerySalesShipment', 'querySalesShipment', querySalesShipment)
            const localVarPath = `/querySalesShipment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(querySalesShipment, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary createSalesCrMemosHeadersalesCrMemoHeader
         * @param {MicrosoftNAVSalesCrMemoHeader} salesCrMemoHeader 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSalesCrMemoHeader: async (salesCrMemoHeader: MicrosoftNAVSalesCrMemoHeader, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'salesCrMemoHeader' is not null or undefined
            assertParamExists('createSalesCrMemoHeader', 'salesCrMemoHeader', salesCrMemoHeader)
            const localVarPath = `/salesCrMemosHeader`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(salesCrMemoHeader, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary createSalesInvoicesHeadersalesInvoiceHeader
         * @param {MicrosoftNAVSalesInvoiceHeader} salesInvoiceHeader 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSalesInvoiceHeader: async (salesInvoiceHeader: MicrosoftNAVSalesInvoiceHeader, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'salesInvoiceHeader' is not null or undefined
            assertParamExists('createSalesInvoiceHeader', 'salesInvoiceHeader', salesInvoiceHeader)
            const localVarPath = `/salesInvoicesHeader`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(salesInvoiceHeader, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary createSalesInvoiceLinessalesInvoiceLine
         * @param {MicrosoftNAVSalesInvoiceLine} salesInvoiceLine 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSalesInvoiceLine: async (salesInvoiceLine: MicrosoftNAVSalesInvoiceLine, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'salesInvoiceLine' is not null or undefined
            assertParamExists('createSalesInvoiceLine', 'salesInvoiceLine', salesInvoiceLine)
            const localVarPath = `/salesInvoiceLines`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(salesInvoiceLine, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary createSalesOrderHeadersalesOrderHeader
         * @param {MicrosoftNAVSalesOrderHeader} salesOrderHeader 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSalesOrderHeader: async (salesOrderHeader: MicrosoftNAVSalesOrderHeader, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'salesOrderHeader' is not null or undefined
            assertParamExists('createSalesOrderHeader', 'salesOrderHeader', salesOrderHeader)
            const localVarPath = `/salesOrderHeader`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(salesOrderHeader, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary createSalesOrderLinessalesOrderLine
         * @param {MicrosoftNAVSalesOrderLine} salesOrderLine 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSalesOrderLine: async (salesOrderLine: MicrosoftNAVSalesOrderLine, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'salesOrderLine' is not null or undefined
            assertParamExists('createSalesOrderLine', 'salesOrderLine', salesOrderLine)
            const localVarPath = `/salesOrderLines`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(salesOrderLine, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary createSalesQuoteHeadersalesQuoteHeader
         * @param {MicrosoftNAVSalesQuoteHeader} salesQuoteHeader 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSalesQuoteHeader: async (salesQuoteHeader: MicrosoftNAVSalesQuoteHeader, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'salesQuoteHeader' is not null or undefined
            assertParamExists('createSalesQuoteHeader', 'salesQuoteHeader', salesQuoteHeader)
            const localVarPath = `/salesQuoteHeader`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(salesQuoteHeader, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary createSalesQuoteLinessalesQuoteLine
         * @param {MicrosoftNAVSalesQuoteLine} salesQuoteLine 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSalesQuoteLine: async (salesQuoteLine: MicrosoftNAVSalesQuoteLine, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'salesQuoteLine' is not null or undefined
            assertParamExists('createSalesQuoteLine', 'salesQuoteLine', salesQuoteLine)
            const localVarPath = `/salesQuoteLines`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(salesQuoteLine, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary createSalesShipmentsHeadersalesShipmentHeader
         * @param {MicrosoftNAVSalesShipmentHeader} salesShipmentHeader 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSalesShipmentHeader: async (salesShipmentHeader: MicrosoftNAVSalesShipmentHeader, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'salesShipmentHeader' is not null or undefined
            assertParamExists('createSalesShipmentHeader', 'salesShipmentHeader', salesShipmentHeader)
            const localVarPath = `/salesShipmentsHeader`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(salesShipmentHeader, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary createSalesShipmentLinessalesShipmentLine
         * @param {MicrosoftNAVSalesShipmentLine} salesShipmentLine 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSalesShipmentLine: async (salesShipmentLine: MicrosoftNAVSalesShipmentLine, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'salesShipmentLine' is not null or undefined
            assertParamExists('createSalesShipmentLine', 'salesShipmentLine', salesShipmentLine)
            const localVarPath = `/salesShipmentLines`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(salesShipmentLine, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary createSalescrMemoLinessalescrMemoLine
         * @param {MicrosoftNAVSalescrMemoLine} salescrMemoLine 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSalescrMemoLine: async (salescrMemoLine: MicrosoftNAVSalescrMemoLine, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'salescrMemoLine' is not null or undefined
            assertParamExists('createSalescrMemoLine', 'salescrMemoLine', salescrMemoLine)
            const localVarPath = `/salescrMemoLines`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(salescrMemoLine, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary createShiptoAddressshiptoAddress
         * @param {MicrosoftNAVShiptoAddress} shiptoAddress 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createShiptoAddress: async (shiptoAddress: MicrosoftNAVShiptoAddress, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shiptoAddress' is not null or undefined
            assertParamExists('createShiptoAddress', 'shiptoAddress', shiptoAddress)
            const localVarPath = `/shiptoAddress`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(shiptoAddress, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary createSubscriptionssubscriptions
         * @param {MicrosoftNAVSubscriptions} subscriptions 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubscriptions: async (subscriptions: MicrosoftNAVSubscriptions, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subscriptions' is not null or undefined
            assertParamExists('createSubscriptions', 'subscriptions', subscriptions)
            const localVarPath = `/subscriptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(subscriptions, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteCompaniescompany
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCompany: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteCompany', 'id', id)
            const localVarPath = `/companies({id})`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteItemsitem
         * @param {string} no 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItem: async (no: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'no' is not null or undefined
            assertParamExists('deleteItem', 'no', no)
            const localVarPath = `/items('{no}')`
                .replace(`{${"no"}}`, encodeURIComponent(String(no)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteQueryAttributesqueryAttributes
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQueryAttributes: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteQueryAttributes', 'id', id)
            const localVarPath = `/queryAttributes({id})`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteQueryAttributesValuesqueryAttributesValues
         * @param {number} attributeID 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQueryAttributesValues: async (attributeID: number, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attributeID' is not null or undefined
            assertParamExists('deleteQueryAttributesValues', 'attributeID', attributeID)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteQueryAttributesValues', 'id', id)
            const localVarPath = `/queryAttributesValues({attributeID},{id})`
                .replace(`{${"attributeID"}}`, encodeURIComponent(String(attributeID)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteQueryCategoriesqueryCategories
         * @param {string} code 
         * @param {number} attributeID 
         * @param {number} valueid 
         * @param {number} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {number} auxiliaryIndex3 
         * @param {number} auxiliaryIndex4 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQueryCategories: async (code: string, attributeID: number, valueid: number, auxiliaryIndex1: number, auxiliaryIndex2: string, auxiliaryIndex3: number, auxiliaryIndex4: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('deleteQueryCategories', 'code', code)
            // verify required parameter 'attributeID' is not null or undefined
            assertParamExists('deleteQueryCategories', 'attributeID', attributeID)
            // verify required parameter 'valueid' is not null or undefined
            assertParamExists('deleteQueryCategories', 'valueid', valueid)
            // verify required parameter 'auxiliaryIndex1' is not null or undefined
            assertParamExists('deleteQueryCategories', 'auxiliaryIndex1', auxiliaryIndex1)
            // verify required parameter 'auxiliaryIndex2' is not null or undefined
            assertParamExists('deleteQueryCategories', 'auxiliaryIndex2', auxiliaryIndex2)
            // verify required parameter 'auxiliaryIndex3' is not null or undefined
            assertParamExists('deleteQueryCategories', 'auxiliaryIndex3', auxiliaryIndex3)
            // verify required parameter 'auxiliaryIndex4' is not null or undefined
            assertParamExists('deleteQueryCategories', 'auxiliaryIndex4', auxiliaryIndex4)
            const localVarPath = `/queryCategories('{code}',{attributeID},{valueid},{auxiliaryIndex1},'{auxiliaryIndex2}',{auxiliaryIndex3},{auxiliaryIndex4})`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)))
                .replace(`{${"attributeID"}}`, encodeURIComponent(String(attributeID)))
                .replace(`{${"valueid"}}`, encodeURIComponent(String(valueid)))
                .replace(`{${"auxiliaryIndex1"}}`, encodeURIComponent(String(auxiliaryIndex1)))
                .replace(`{${"auxiliaryIndex2"}}`, encodeURIComponent(String(auxiliaryIndex2)))
                .replace(`{${"auxiliaryIndex3"}}`, encodeURIComponent(String(auxiliaryIndex3)))
                .replace(`{${"auxiliaryIndex4"}}`, encodeURIComponent(String(auxiliaryIndex4)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteQueryCategoryAttributesqueryCategoryAttributes
         * @param {string} code 
         * @param {number} attributeID 
         * @param {number} valueid 
         * @param {number} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {number} auxiliaryIndex3 
         * @param {number} auxiliaryIndex4 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQueryCategoryAttributes: async (code: string, attributeID: number, valueid: number, auxiliaryIndex1: number, auxiliaryIndex2: string, auxiliaryIndex3: number, auxiliaryIndex4: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('deleteQueryCategoryAttributes', 'code', code)
            // verify required parameter 'attributeID' is not null or undefined
            assertParamExists('deleteQueryCategoryAttributes', 'attributeID', attributeID)
            // verify required parameter 'valueid' is not null or undefined
            assertParamExists('deleteQueryCategoryAttributes', 'valueid', valueid)
            // verify required parameter 'auxiliaryIndex1' is not null or undefined
            assertParamExists('deleteQueryCategoryAttributes', 'auxiliaryIndex1', auxiliaryIndex1)
            // verify required parameter 'auxiliaryIndex2' is not null or undefined
            assertParamExists('deleteQueryCategoryAttributes', 'auxiliaryIndex2', auxiliaryIndex2)
            // verify required parameter 'auxiliaryIndex3' is not null or undefined
            assertParamExists('deleteQueryCategoryAttributes', 'auxiliaryIndex3', auxiliaryIndex3)
            // verify required parameter 'auxiliaryIndex4' is not null or undefined
            assertParamExists('deleteQueryCategoryAttributes', 'auxiliaryIndex4', auxiliaryIndex4)
            const localVarPath = `/queryCategoryAttributes('{code}',{attributeID},{valueid},{auxiliaryIndex1},'{auxiliaryIndex2}',{auxiliaryIndex3},{auxiliaryIndex4})`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)))
                .replace(`{${"attributeID"}}`, encodeURIComponent(String(attributeID)))
                .replace(`{${"valueid"}}`, encodeURIComponent(String(valueid)))
                .replace(`{${"auxiliaryIndex1"}}`, encodeURIComponent(String(auxiliaryIndex1)))
                .replace(`{${"auxiliaryIndex2"}}`, encodeURIComponent(String(auxiliaryIndex2)))
                .replace(`{${"auxiliaryIndex3"}}`, encodeURIComponent(String(auxiliaryIndex3)))
                .replace(`{${"auxiliaryIndex4"}}`, encodeURIComponent(String(auxiliaryIndex4)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteQueryCustomerqueryCustomer
         * @param {string} customerNo 
         * @param {string} shipToCode 
         * @param {string} auxiliaryIndex1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQueryCustomer: async (customerNo: string, shipToCode: string, auxiliaryIndex1: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerNo' is not null or undefined
            assertParamExists('deleteQueryCustomer', 'customerNo', customerNo)
            // verify required parameter 'shipToCode' is not null or undefined
            assertParamExists('deleteQueryCustomer', 'shipToCode', shipToCode)
            // verify required parameter 'auxiliaryIndex1' is not null or undefined
            assertParamExists('deleteQueryCustomer', 'auxiliaryIndex1', auxiliaryIndex1)
            const localVarPath = `/queryCustomer('{customerNo}','{shipToCode}','{auxiliaryIndex1}')`
                .replace(`{${"customerNo"}}`, encodeURIComponent(String(customerNo)))
                .replace(`{${"shipToCode"}}`, encodeURIComponent(String(shipToCode)))
                .replace(`{${"auxiliaryIndex1"}}`, encodeURIComponent(String(auxiliaryIndex1)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteQueryItemAttributesqueryItemAttributes
         * @param {string} no 
         * @param {string} barCode 
         * @param {number} attributeID 
         * @param {number} valueid 
         * @param {string} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {string} auxiliaryIndex3 
         * @param {string} auxiliaryIndex4 
         * @param {string} auxiliaryIndex5 
         * @param {number} auxiliaryIndex6 
         * @param {string} auxiliaryIndex7 
         * @param {number} auxiliaryIndex8 
         * @param {number} auxiliaryIndex9 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQueryItemAttributes: async (no: string, barCode: string, attributeID: number, valueid: number, auxiliaryIndex1: string, auxiliaryIndex2: string, auxiliaryIndex3: string, auxiliaryIndex4: string, auxiliaryIndex5: string, auxiliaryIndex6: number, auxiliaryIndex7: string, auxiliaryIndex8: number, auxiliaryIndex9: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'no' is not null or undefined
            assertParamExists('deleteQueryItemAttributes', 'no', no)
            // verify required parameter 'barCode' is not null or undefined
            assertParamExists('deleteQueryItemAttributes', 'barCode', barCode)
            // verify required parameter 'attributeID' is not null or undefined
            assertParamExists('deleteQueryItemAttributes', 'attributeID', attributeID)
            // verify required parameter 'valueid' is not null or undefined
            assertParamExists('deleteQueryItemAttributes', 'valueid', valueid)
            // verify required parameter 'auxiliaryIndex1' is not null or undefined
            assertParamExists('deleteQueryItemAttributes', 'auxiliaryIndex1', auxiliaryIndex1)
            // verify required parameter 'auxiliaryIndex2' is not null or undefined
            assertParamExists('deleteQueryItemAttributes', 'auxiliaryIndex2', auxiliaryIndex2)
            // verify required parameter 'auxiliaryIndex3' is not null or undefined
            assertParamExists('deleteQueryItemAttributes', 'auxiliaryIndex3', auxiliaryIndex3)
            // verify required parameter 'auxiliaryIndex4' is not null or undefined
            assertParamExists('deleteQueryItemAttributes', 'auxiliaryIndex4', auxiliaryIndex4)
            // verify required parameter 'auxiliaryIndex5' is not null or undefined
            assertParamExists('deleteQueryItemAttributes', 'auxiliaryIndex5', auxiliaryIndex5)
            // verify required parameter 'auxiliaryIndex6' is not null or undefined
            assertParamExists('deleteQueryItemAttributes', 'auxiliaryIndex6', auxiliaryIndex6)
            // verify required parameter 'auxiliaryIndex7' is not null or undefined
            assertParamExists('deleteQueryItemAttributes', 'auxiliaryIndex7', auxiliaryIndex7)
            // verify required parameter 'auxiliaryIndex8' is not null or undefined
            assertParamExists('deleteQueryItemAttributes', 'auxiliaryIndex8', auxiliaryIndex8)
            // verify required parameter 'auxiliaryIndex9' is not null or undefined
            assertParamExists('deleteQueryItemAttributes', 'auxiliaryIndex9', auxiliaryIndex9)
            const localVarPath = `/queryItemAttributes('{no}','{barCode}',{attributeID},{valueid},'{auxiliaryIndex1}','{auxiliaryIndex2}','{auxiliaryIndex3}','{auxiliaryIndex4}','{auxiliaryIndex5}',{auxiliaryIndex6},'{auxiliaryIndex7}',{auxiliaryIndex8},{auxiliaryIndex9})`
                .replace(`{${"no"}}`, encodeURIComponent(String(no)))
                .replace(`{${"barCode"}}`, encodeURIComponent(String(barCode)))
                .replace(`{${"attributeID"}}`, encodeURIComponent(String(attributeID)))
                .replace(`{${"valueid"}}`, encodeURIComponent(String(valueid)))
                .replace(`{${"auxiliaryIndex1"}}`, encodeURIComponent(String(auxiliaryIndex1)))
                .replace(`{${"auxiliaryIndex2"}}`, encodeURIComponent(String(auxiliaryIndex2)))
                .replace(`{${"auxiliaryIndex3"}}`, encodeURIComponent(String(auxiliaryIndex3)))
                .replace(`{${"auxiliaryIndex4"}}`, encodeURIComponent(String(auxiliaryIndex4)))
                .replace(`{${"auxiliaryIndex5"}}`, encodeURIComponent(String(auxiliaryIndex5)))
                .replace(`{${"auxiliaryIndex6"}}`, encodeURIComponent(String(auxiliaryIndex6)))
                .replace(`{${"auxiliaryIndex7"}}`, encodeURIComponent(String(auxiliaryIndex7)))
                .replace(`{${"auxiliaryIndex8"}}`, encodeURIComponent(String(auxiliaryIndex8)))
                .replace(`{${"auxiliaryIndex9"}}`, encodeURIComponent(String(auxiliaryIndex9)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteQueryItemsqueryItems
         * @param {string} no 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQueryItems: async (no: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'no' is not null or undefined
            assertParamExists('deleteQueryItems', 'no', no)
            const localVarPath = `/queryItems('{no}')`
                .replace(`{${"no"}}`, encodeURIComponent(String(no)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteQuerySalesCrMemoquerySalesCrMemo
         * @param {string} no 
         * @param {number} lineNo 
         * @param {string} barCode 
         * @param {string} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {string} auxiliaryIndex3 
         * @param {string} auxiliaryIndex4 
         * @param {string} auxiliaryIndex5 
         * @param {string} auxiliaryIndex6 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQuerySalesCrMemo: async (no: string, lineNo: number, barCode: string, auxiliaryIndex1: string, auxiliaryIndex2: string, auxiliaryIndex3: string, auxiliaryIndex4: string, auxiliaryIndex5: string, auxiliaryIndex6: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'no' is not null or undefined
            assertParamExists('deleteQuerySalesCrMemo', 'no', no)
            // verify required parameter 'lineNo' is not null or undefined
            assertParamExists('deleteQuerySalesCrMemo', 'lineNo', lineNo)
            // verify required parameter 'barCode' is not null or undefined
            assertParamExists('deleteQuerySalesCrMemo', 'barCode', barCode)
            // verify required parameter 'auxiliaryIndex1' is not null or undefined
            assertParamExists('deleteQuerySalesCrMemo', 'auxiliaryIndex1', auxiliaryIndex1)
            // verify required parameter 'auxiliaryIndex2' is not null or undefined
            assertParamExists('deleteQuerySalesCrMemo', 'auxiliaryIndex2', auxiliaryIndex2)
            // verify required parameter 'auxiliaryIndex3' is not null or undefined
            assertParamExists('deleteQuerySalesCrMemo', 'auxiliaryIndex3', auxiliaryIndex3)
            // verify required parameter 'auxiliaryIndex4' is not null or undefined
            assertParamExists('deleteQuerySalesCrMemo', 'auxiliaryIndex4', auxiliaryIndex4)
            // verify required parameter 'auxiliaryIndex5' is not null or undefined
            assertParamExists('deleteQuerySalesCrMemo', 'auxiliaryIndex5', auxiliaryIndex5)
            // verify required parameter 'auxiliaryIndex6' is not null or undefined
            assertParamExists('deleteQuerySalesCrMemo', 'auxiliaryIndex6', auxiliaryIndex6)
            const localVarPath = `/querySalesCrMemo('{no}',{lineNo},'{barCode}','{auxiliaryIndex1}','{auxiliaryIndex2}','{auxiliaryIndex3}','{auxiliaryIndex4}','{auxiliaryIndex5}','{auxiliaryIndex6}')`
                .replace(`{${"no"}}`, encodeURIComponent(String(no)))
                .replace(`{${"lineNo"}}`, encodeURIComponent(String(lineNo)))
                .replace(`{${"barCode"}}`, encodeURIComponent(String(barCode)))
                .replace(`{${"auxiliaryIndex1"}}`, encodeURIComponent(String(auxiliaryIndex1)))
                .replace(`{${"auxiliaryIndex2"}}`, encodeURIComponent(String(auxiliaryIndex2)))
                .replace(`{${"auxiliaryIndex3"}}`, encodeURIComponent(String(auxiliaryIndex3)))
                .replace(`{${"auxiliaryIndex4"}}`, encodeURIComponent(String(auxiliaryIndex4)))
                .replace(`{${"auxiliaryIndex5"}}`, encodeURIComponent(String(auxiliaryIndex5)))
                .replace(`{${"auxiliaryIndex6"}}`, encodeURIComponent(String(auxiliaryIndex6)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteQuerySalesInvoicequerySalesInvoice
         * @param {string} no 
         * @param {number} lineNo 
         * @param {string} barCode 
         * @param {string} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {string} auxiliaryIndex3 
         * @param {string} auxiliaryIndex4 
         * @param {string} auxiliaryIndex5 
         * @param {string} auxiliaryIndex6 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQuerySalesInvoice: async (no: string, lineNo: number, barCode: string, auxiliaryIndex1: string, auxiliaryIndex2: string, auxiliaryIndex3: string, auxiliaryIndex4: string, auxiliaryIndex5: string, auxiliaryIndex6: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'no' is not null or undefined
            assertParamExists('deleteQuerySalesInvoice', 'no', no)
            // verify required parameter 'lineNo' is not null or undefined
            assertParamExists('deleteQuerySalesInvoice', 'lineNo', lineNo)
            // verify required parameter 'barCode' is not null or undefined
            assertParamExists('deleteQuerySalesInvoice', 'barCode', barCode)
            // verify required parameter 'auxiliaryIndex1' is not null or undefined
            assertParamExists('deleteQuerySalesInvoice', 'auxiliaryIndex1', auxiliaryIndex1)
            // verify required parameter 'auxiliaryIndex2' is not null or undefined
            assertParamExists('deleteQuerySalesInvoice', 'auxiliaryIndex2', auxiliaryIndex2)
            // verify required parameter 'auxiliaryIndex3' is not null or undefined
            assertParamExists('deleteQuerySalesInvoice', 'auxiliaryIndex3', auxiliaryIndex3)
            // verify required parameter 'auxiliaryIndex4' is not null or undefined
            assertParamExists('deleteQuerySalesInvoice', 'auxiliaryIndex4', auxiliaryIndex4)
            // verify required parameter 'auxiliaryIndex5' is not null or undefined
            assertParamExists('deleteQuerySalesInvoice', 'auxiliaryIndex5', auxiliaryIndex5)
            // verify required parameter 'auxiliaryIndex6' is not null or undefined
            assertParamExists('deleteQuerySalesInvoice', 'auxiliaryIndex6', auxiliaryIndex6)
            const localVarPath = `/querySalesInvoice('{no}',{lineNo},'{barCode}','{auxiliaryIndex1}','{auxiliaryIndex2}','{auxiliaryIndex3}','{auxiliaryIndex4}','{auxiliaryIndex5}','{auxiliaryIndex6}')`
                .replace(`{${"no"}}`, encodeURIComponent(String(no)))
                .replace(`{${"lineNo"}}`, encodeURIComponent(String(lineNo)))
                .replace(`{${"barCode"}}`, encodeURIComponent(String(barCode)))
                .replace(`{${"auxiliaryIndex1"}}`, encodeURIComponent(String(auxiliaryIndex1)))
                .replace(`{${"auxiliaryIndex2"}}`, encodeURIComponent(String(auxiliaryIndex2)))
                .replace(`{${"auxiliaryIndex3"}}`, encodeURIComponent(String(auxiliaryIndex3)))
                .replace(`{${"auxiliaryIndex4"}}`, encodeURIComponent(String(auxiliaryIndex4)))
                .replace(`{${"auxiliaryIndex5"}}`, encodeURIComponent(String(auxiliaryIndex5)))
                .replace(`{${"auxiliaryIndex6"}}`, encodeURIComponent(String(auxiliaryIndex6)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteQuerySalesOrderHeaderquerySalesOrderHeader
         * @param {string} documentType 
         * @param {string} no 
         * @param {number} lineNo 
         * @param {string} barCode 
         * @param {string} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {string} auxiliaryIndex3 
         * @param {string} auxiliaryIndex4 
         * @param {string} auxiliaryIndex5 
         * @param {string} auxiliaryIndex6 
         * @param {string} auxiliaryIndex7 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQuerySalesOrderHeader: async (documentType: string, no: string, lineNo: number, barCode: string, auxiliaryIndex1: string, auxiliaryIndex2: string, auxiliaryIndex3: string, auxiliaryIndex4: string, auxiliaryIndex5: string, auxiliaryIndex6: string, auxiliaryIndex7: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentType' is not null or undefined
            assertParamExists('deleteQuerySalesOrderHeader', 'documentType', documentType)
            // verify required parameter 'no' is not null or undefined
            assertParamExists('deleteQuerySalesOrderHeader', 'no', no)
            // verify required parameter 'lineNo' is not null or undefined
            assertParamExists('deleteQuerySalesOrderHeader', 'lineNo', lineNo)
            // verify required parameter 'barCode' is not null or undefined
            assertParamExists('deleteQuerySalesOrderHeader', 'barCode', barCode)
            // verify required parameter 'auxiliaryIndex1' is not null or undefined
            assertParamExists('deleteQuerySalesOrderHeader', 'auxiliaryIndex1', auxiliaryIndex1)
            // verify required parameter 'auxiliaryIndex2' is not null or undefined
            assertParamExists('deleteQuerySalesOrderHeader', 'auxiliaryIndex2', auxiliaryIndex2)
            // verify required parameter 'auxiliaryIndex3' is not null or undefined
            assertParamExists('deleteQuerySalesOrderHeader', 'auxiliaryIndex3', auxiliaryIndex3)
            // verify required parameter 'auxiliaryIndex4' is not null or undefined
            assertParamExists('deleteQuerySalesOrderHeader', 'auxiliaryIndex4', auxiliaryIndex4)
            // verify required parameter 'auxiliaryIndex5' is not null or undefined
            assertParamExists('deleteQuerySalesOrderHeader', 'auxiliaryIndex5', auxiliaryIndex5)
            // verify required parameter 'auxiliaryIndex6' is not null or undefined
            assertParamExists('deleteQuerySalesOrderHeader', 'auxiliaryIndex6', auxiliaryIndex6)
            // verify required parameter 'auxiliaryIndex7' is not null or undefined
            assertParamExists('deleteQuerySalesOrderHeader', 'auxiliaryIndex7', auxiliaryIndex7)
            const localVarPath = `/querySalesOrderHeader('{documentType}','{no}',{lineNo},'{barCode}','{auxiliaryIndex1}','{auxiliaryIndex2}','{auxiliaryIndex3}','{auxiliaryIndex4}','{auxiliaryIndex5}','{auxiliaryIndex6}','{auxiliaryIndex7}')`
                .replace(`{${"documentType"}}`, encodeURIComponent(String(documentType)))
                .replace(`{${"no"}}`, encodeURIComponent(String(no)))
                .replace(`{${"lineNo"}}`, encodeURIComponent(String(lineNo)))
                .replace(`{${"barCode"}}`, encodeURIComponent(String(barCode)))
                .replace(`{${"auxiliaryIndex1"}}`, encodeURIComponent(String(auxiliaryIndex1)))
                .replace(`{${"auxiliaryIndex2"}}`, encodeURIComponent(String(auxiliaryIndex2)))
                .replace(`{${"auxiliaryIndex3"}}`, encodeURIComponent(String(auxiliaryIndex3)))
                .replace(`{${"auxiliaryIndex4"}}`, encodeURIComponent(String(auxiliaryIndex4)))
                .replace(`{${"auxiliaryIndex5"}}`, encodeURIComponent(String(auxiliaryIndex5)))
                .replace(`{${"auxiliaryIndex6"}}`, encodeURIComponent(String(auxiliaryIndex6)))
                .replace(`{${"auxiliaryIndex7"}}`, encodeURIComponent(String(auxiliaryIndex7)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteQuerySalesShipmentquerySalesShipment
         * @param {string} no 
         * @param {number} lineNo 
         * @param {string} barCode 
         * @param {string} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {string} auxiliaryIndex3 
         * @param {string} auxiliaryIndex4 
         * @param {string} auxiliaryIndex5 
         * @param {string} auxiliaryIndex6 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQuerySalesShipment: async (no: string, lineNo: number, barCode: string, auxiliaryIndex1: string, auxiliaryIndex2: string, auxiliaryIndex3: string, auxiliaryIndex4: string, auxiliaryIndex5: string, auxiliaryIndex6: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'no' is not null or undefined
            assertParamExists('deleteQuerySalesShipment', 'no', no)
            // verify required parameter 'lineNo' is not null or undefined
            assertParamExists('deleteQuerySalesShipment', 'lineNo', lineNo)
            // verify required parameter 'barCode' is not null or undefined
            assertParamExists('deleteQuerySalesShipment', 'barCode', barCode)
            // verify required parameter 'auxiliaryIndex1' is not null or undefined
            assertParamExists('deleteQuerySalesShipment', 'auxiliaryIndex1', auxiliaryIndex1)
            // verify required parameter 'auxiliaryIndex2' is not null or undefined
            assertParamExists('deleteQuerySalesShipment', 'auxiliaryIndex2', auxiliaryIndex2)
            // verify required parameter 'auxiliaryIndex3' is not null or undefined
            assertParamExists('deleteQuerySalesShipment', 'auxiliaryIndex3', auxiliaryIndex3)
            // verify required parameter 'auxiliaryIndex4' is not null or undefined
            assertParamExists('deleteQuerySalesShipment', 'auxiliaryIndex4', auxiliaryIndex4)
            // verify required parameter 'auxiliaryIndex5' is not null or undefined
            assertParamExists('deleteQuerySalesShipment', 'auxiliaryIndex5', auxiliaryIndex5)
            // verify required parameter 'auxiliaryIndex6' is not null or undefined
            assertParamExists('deleteQuerySalesShipment', 'auxiliaryIndex6', auxiliaryIndex6)
            const localVarPath = `/querySalesShipment('{no}',{lineNo},'{barCode}','{auxiliaryIndex1}','{auxiliaryIndex2}','{auxiliaryIndex3}','{auxiliaryIndex4}','{auxiliaryIndex5}','{auxiliaryIndex6}')`
                .replace(`{${"no"}}`, encodeURIComponent(String(no)))
                .replace(`{${"lineNo"}}`, encodeURIComponent(String(lineNo)))
                .replace(`{${"barCode"}}`, encodeURIComponent(String(barCode)))
                .replace(`{${"auxiliaryIndex1"}}`, encodeURIComponent(String(auxiliaryIndex1)))
                .replace(`{${"auxiliaryIndex2"}}`, encodeURIComponent(String(auxiliaryIndex2)))
                .replace(`{${"auxiliaryIndex3"}}`, encodeURIComponent(String(auxiliaryIndex3)))
                .replace(`{${"auxiliaryIndex4"}}`, encodeURIComponent(String(auxiliaryIndex4)))
                .replace(`{${"auxiliaryIndex5"}}`, encodeURIComponent(String(auxiliaryIndex5)))
                .replace(`{${"auxiliaryIndex6"}}`, encodeURIComponent(String(auxiliaryIndex6)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteSalesCrMemosHeadersalesCrMemoHeader
         * @param {string} documentNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSalesCrMemoHeader: async (documentNo: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentNo' is not null or undefined
            assertParamExists('deleteSalesCrMemoHeader', 'documentNo', documentNo)
            const localVarPath = `/salesCrMemosHeader('{documentNo}')`
                .replace(`{${"documentNo"}}`, encodeURIComponent(String(documentNo)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteSalesInvoicesHeadersalesInvoiceHeader
         * @param {string} documentNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSalesInvoiceHeader: async (documentNo: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentNo' is not null or undefined
            assertParamExists('deleteSalesInvoiceHeader', 'documentNo', documentNo)
            const localVarPath = `/salesInvoicesHeader('{documentNo}')`
                .replace(`{${"documentNo"}}`, encodeURIComponent(String(documentNo)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteSalesInvoiceLinessalesInvoiceLine
         * @param {string} documentNo 
         * @param {number} lineNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSalesInvoiceLine: async (documentNo: string, lineNo: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentNo' is not null or undefined
            assertParamExists('deleteSalesInvoiceLine', 'documentNo', documentNo)
            // verify required parameter 'lineNo' is not null or undefined
            assertParamExists('deleteSalesInvoiceLine', 'lineNo', lineNo)
            const localVarPath = `/salesInvoiceLines('{documentNo}',{lineNo})`
                .replace(`{${"documentNo"}}`, encodeURIComponent(String(documentNo)))
                .replace(`{${"lineNo"}}`, encodeURIComponent(String(lineNo)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteSalesOrderHeadersalesOrderHeader
         * @param {string} documentType 
         * @param {string} documentNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSalesOrderHeader: async (documentType: string, documentNo: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentType' is not null or undefined
            assertParamExists('deleteSalesOrderHeader', 'documentType', documentType)
            // verify required parameter 'documentNo' is not null or undefined
            assertParamExists('deleteSalesOrderHeader', 'documentNo', documentNo)
            const localVarPath = `/salesOrderHeader('{documentType}','{documentNo}')`
                .replace(`{${"documentType"}}`, encodeURIComponent(String(documentType)))
                .replace(`{${"documentNo"}}`, encodeURIComponent(String(documentNo)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteSalesOrderLinessalesOrderLine
         * @param {string} documentType 
         * @param {string} documentNo 
         * @param {number} lineNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSalesOrderLine: async (documentType: string, documentNo: string, lineNo: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentType' is not null or undefined
            assertParamExists('deleteSalesOrderLine', 'documentType', documentType)
            // verify required parameter 'documentNo' is not null or undefined
            assertParamExists('deleteSalesOrderLine', 'documentNo', documentNo)
            // verify required parameter 'lineNo' is not null or undefined
            assertParamExists('deleteSalesOrderLine', 'lineNo', lineNo)
            const localVarPath = `/salesOrderLines('{documentType}','{documentNo}',{lineNo})`
                .replace(`{${"documentType"}}`, encodeURIComponent(String(documentType)))
                .replace(`{${"documentNo"}}`, encodeURIComponent(String(documentNo)))
                .replace(`{${"lineNo"}}`, encodeURIComponent(String(lineNo)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteSalesQuoteHeadersalesQuoteHeader
         * @param {string} documentType 
         * @param {string} documentNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSalesQuoteHeader: async (documentType: string, documentNo: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentType' is not null or undefined
            assertParamExists('deleteSalesQuoteHeader', 'documentType', documentType)
            // verify required parameter 'documentNo' is not null or undefined
            assertParamExists('deleteSalesQuoteHeader', 'documentNo', documentNo)
            const localVarPath = `/salesQuoteHeader('{documentType}','{documentNo}')`
                .replace(`{${"documentType"}}`, encodeURIComponent(String(documentType)))
                .replace(`{${"documentNo"}}`, encodeURIComponent(String(documentNo)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteSalesQuoteLinessalesQuoteLine
         * @param {string} documentType 
         * @param {string} documentNo 
         * @param {number} lineNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSalesQuoteLine: async (documentType: string, documentNo: string, lineNo: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentType' is not null or undefined
            assertParamExists('deleteSalesQuoteLine', 'documentType', documentType)
            // verify required parameter 'documentNo' is not null or undefined
            assertParamExists('deleteSalesQuoteLine', 'documentNo', documentNo)
            // verify required parameter 'lineNo' is not null or undefined
            assertParamExists('deleteSalesQuoteLine', 'lineNo', lineNo)
            const localVarPath = `/salesQuoteLines('{documentType}','{documentNo}',{lineNo})`
                .replace(`{${"documentType"}}`, encodeURIComponent(String(documentType)))
                .replace(`{${"documentNo"}}`, encodeURIComponent(String(documentNo)))
                .replace(`{${"lineNo"}}`, encodeURIComponent(String(lineNo)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteSalesShipmentsHeadersalesShipmentHeader
         * @param {string} documentNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSalesShipmentHeader: async (documentNo: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentNo' is not null or undefined
            assertParamExists('deleteSalesShipmentHeader', 'documentNo', documentNo)
            const localVarPath = `/salesShipmentsHeader('{documentNo}')`
                .replace(`{${"documentNo"}}`, encodeURIComponent(String(documentNo)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteSalesShipmentLinessalesShipmentLine
         * @param {string} documentNo 
         * @param {number} lineNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSalesShipmentLine: async (documentNo: string, lineNo: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentNo' is not null or undefined
            assertParamExists('deleteSalesShipmentLine', 'documentNo', documentNo)
            // verify required parameter 'lineNo' is not null or undefined
            assertParamExists('deleteSalesShipmentLine', 'lineNo', lineNo)
            const localVarPath = `/salesShipmentLines('{documentNo}',{lineNo})`
                .replace(`{${"documentNo"}}`, encodeURIComponent(String(documentNo)))
                .replace(`{${"lineNo"}}`, encodeURIComponent(String(lineNo)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteSalescrMemoLinessalescrMemoLine
         * @param {string} documentNo 
         * @param {number} lineNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSalescrMemoLine: async (documentNo: string, lineNo: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentNo' is not null or undefined
            assertParamExists('deleteSalescrMemoLine', 'documentNo', documentNo)
            // verify required parameter 'lineNo' is not null or undefined
            assertParamExists('deleteSalescrMemoLine', 'lineNo', lineNo)
            const localVarPath = `/salescrMemoLines('{documentNo}',{lineNo})`
                .replace(`{${"documentNo"}}`, encodeURIComponent(String(documentNo)))
                .replace(`{${"lineNo"}}`, encodeURIComponent(String(lineNo)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteShiptoAddressshiptoAddress
         * @param {string} customerNo 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteShiptoAddress: async (customerNo: string, code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerNo' is not null or undefined
            assertParamExists('deleteShiptoAddress', 'customerNo', customerNo)
            // verify required parameter 'code' is not null or undefined
            assertParamExists('deleteShiptoAddress', 'code', code)
            const localVarPath = `/shiptoAddress('{customerNo}','{code}')`
                .replace(`{${"customerNo"}}`, encodeURIComponent(String(customerNo)))
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteSubscriptionssubscriptions
         * @param {string} subscriptionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSubscriptions: async (subscriptionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subscriptionId' is not null or undefined
            assertParamExists('deleteSubscriptions', 'subscriptionId', subscriptionId)
            const localVarPath = `/subscriptions('{subscriptionId}')`
                .replace(`{${"subscriptionId"}}`, encodeURIComponent(String(subscriptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getCompanies
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanies: async ($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/companies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($orderby !== undefined) {
                localVarQueryParameter['$orderby'] = $orderby;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }

            if ($count !== undefined) {
                localVarQueryParameter['$count'] = $count;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getCompaniescompanyById
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCompanyById', 'id', id)
            const localVarPath = `/companies({id})`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getItemsitemById
         * @param {string} no 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemById: async (no: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'no' is not null or undefined
            assertParamExists('getItemById', 'no', no)
            const localVarPath = `/items('{no}')`
                .replace(`{${"no"}}`, encodeURIComponent(String(no)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getItems
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItems: async ($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($orderby !== undefined) {
                localVarQueryParameter['$orderby'] = $orderby;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }

            if ($count !== undefined) {
                localVarQueryParameter['$count'] = $count;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getQueryAttributes
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryAttributes: async ($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/queryAttributes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($orderby !== undefined) {
                localVarQueryParameter['$orderby'] = $orderby;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }

            if ($count !== undefined) {
                localVarQueryParameter['$count'] = $count;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getQueryAttributesqueryAttributesById
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryAttributesById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getQueryAttributesById', 'id', id)
            const localVarPath = `/queryAttributes({id})`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getQueryAttributesValues
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryAttributesValues: async ($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/queryAttributesValues`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($orderby !== undefined) {
                localVarQueryParameter['$orderby'] = $orderby;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }

            if ($count !== undefined) {
                localVarQueryParameter['$count'] = $count;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getQueryAttributesValuesqueryAttributesValuesById
         * @param {number} attributeID 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryAttributesValuesById: async (attributeID: number, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attributeID' is not null or undefined
            assertParamExists('getQueryAttributesValuesById', 'attributeID', attributeID)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getQueryAttributesValuesById', 'id', id)
            const localVarPath = `/queryAttributesValues({attributeID},{id})`
                .replace(`{${"attributeID"}}`, encodeURIComponent(String(attributeID)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getQueryCategories
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryCategories: async ($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/queryCategories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($orderby !== undefined) {
                localVarQueryParameter['$orderby'] = $orderby;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }

            if ($count !== undefined) {
                localVarQueryParameter['$count'] = $count;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getQueryCategoriesqueryCategoriesById
         * @param {string} code 
         * @param {number} attributeID 
         * @param {number} valueid 
         * @param {number} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {number} auxiliaryIndex3 
         * @param {number} auxiliaryIndex4 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryCategoriesById: async (code: string, attributeID: number, valueid: number, auxiliaryIndex1: number, auxiliaryIndex2: string, auxiliaryIndex3: number, auxiliaryIndex4: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('getQueryCategoriesById', 'code', code)
            // verify required parameter 'attributeID' is not null or undefined
            assertParamExists('getQueryCategoriesById', 'attributeID', attributeID)
            // verify required parameter 'valueid' is not null or undefined
            assertParamExists('getQueryCategoriesById', 'valueid', valueid)
            // verify required parameter 'auxiliaryIndex1' is not null or undefined
            assertParamExists('getQueryCategoriesById', 'auxiliaryIndex1', auxiliaryIndex1)
            // verify required parameter 'auxiliaryIndex2' is not null or undefined
            assertParamExists('getQueryCategoriesById', 'auxiliaryIndex2', auxiliaryIndex2)
            // verify required parameter 'auxiliaryIndex3' is not null or undefined
            assertParamExists('getQueryCategoriesById', 'auxiliaryIndex3', auxiliaryIndex3)
            // verify required parameter 'auxiliaryIndex4' is not null or undefined
            assertParamExists('getQueryCategoriesById', 'auxiliaryIndex4', auxiliaryIndex4)
            const localVarPath = `/queryCategories('{code}',{attributeID},{valueid},{auxiliaryIndex1},'{auxiliaryIndex2}',{auxiliaryIndex3},{auxiliaryIndex4})`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)))
                .replace(`{${"attributeID"}}`, encodeURIComponent(String(attributeID)))
                .replace(`{${"valueid"}}`, encodeURIComponent(String(valueid)))
                .replace(`{${"auxiliaryIndex1"}}`, encodeURIComponent(String(auxiliaryIndex1)))
                .replace(`{${"auxiliaryIndex2"}}`, encodeURIComponent(String(auxiliaryIndex2)))
                .replace(`{${"auxiliaryIndex3"}}`, encodeURIComponent(String(auxiliaryIndex3)))
                .replace(`{${"auxiliaryIndex4"}}`, encodeURIComponent(String(auxiliaryIndex4)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getQueryCategoryAttributes
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryCategoryAttributes: async ($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/queryCategoryAttributes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($orderby !== undefined) {
                localVarQueryParameter['$orderby'] = $orderby;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }

            if ($count !== undefined) {
                localVarQueryParameter['$count'] = $count;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getQueryCategoryAttributesqueryCategoryAttributesById
         * @param {string} code 
         * @param {number} attributeID 
         * @param {number} valueid 
         * @param {number} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {number} auxiliaryIndex3 
         * @param {number} auxiliaryIndex4 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryCategoryAttributesById: async (code: string, attributeID: number, valueid: number, auxiliaryIndex1: number, auxiliaryIndex2: string, auxiliaryIndex3: number, auxiliaryIndex4: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('getQueryCategoryAttributesById', 'code', code)
            // verify required parameter 'attributeID' is not null or undefined
            assertParamExists('getQueryCategoryAttributesById', 'attributeID', attributeID)
            // verify required parameter 'valueid' is not null or undefined
            assertParamExists('getQueryCategoryAttributesById', 'valueid', valueid)
            // verify required parameter 'auxiliaryIndex1' is not null or undefined
            assertParamExists('getQueryCategoryAttributesById', 'auxiliaryIndex1', auxiliaryIndex1)
            // verify required parameter 'auxiliaryIndex2' is not null or undefined
            assertParamExists('getQueryCategoryAttributesById', 'auxiliaryIndex2', auxiliaryIndex2)
            // verify required parameter 'auxiliaryIndex3' is not null or undefined
            assertParamExists('getQueryCategoryAttributesById', 'auxiliaryIndex3', auxiliaryIndex3)
            // verify required parameter 'auxiliaryIndex4' is not null or undefined
            assertParamExists('getQueryCategoryAttributesById', 'auxiliaryIndex4', auxiliaryIndex4)
            const localVarPath = `/queryCategoryAttributes('{code}',{attributeID},{valueid},{auxiliaryIndex1},'{auxiliaryIndex2}',{auxiliaryIndex3},{auxiliaryIndex4})`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)))
                .replace(`{${"attributeID"}}`, encodeURIComponent(String(attributeID)))
                .replace(`{${"valueid"}}`, encodeURIComponent(String(valueid)))
                .replace(`{${"auxiliaryIndex1"}}`, encodeURIComponent(String(auxiliaryIndex1)))
                .replace(`{${"auxiliaryIndex2"}}`, encodeURIComponent(String(auxiliaryIndex2)))
                .replace(`{${"auxiliaryIndex3"}}`, encodeURIComponent(String(auxiliaryIndex3)))
                .replace(`{${"auxiliaryIndex4"}}`, encodeURIComponent(String(auxiliaryIndex4)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getQueryCustomer
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryCustomer: async ($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/queryCustomer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($orderby !== undefined) {
                localVarQueryParameter['$orderby'] = $orderby;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }

            if ($count !== undefined) {
                localVarQueryParameter['$count'] = $count;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getQueryCustomerqueryCustomerById
         * @param {string} customerNo 
         * @param {string} shipToCode 
         * @param {string} auxiliaryIndex1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryCustomerById: async (customerNo: string, shipToCode: string, auxiliaryIndex1: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerNo' is not null or undefined
            assertParamExists('getQueryCustomerById', 'customerNo', customerNo)
            // verify required parameter 'shipToCode' is not null or undefined
            assertParamExists('getQueryCustomerById', 'shipToCode', shipToCode)
            // verify required parameter 'auxiliaryIndex1' is not null or undefined
            assertParamExists('getQueryCustomerById', 'auxiliaryIndex1', auxiliaryIndex1)
            const localVarPath = `/queryCustomer('{customerNo}','{shipToCode}','{auxiliaryIndex1}')`
                .replace(`{${"customerNo"}}`, encodeURIComponent(String(customerNo)))
                .replace(`{${"shipToCode"}}`, encodeURIComponent(String(shipToCode)))
                .replace(`{${"auxiliaryIndex1"}}`, encodeURIComponent(String(auxiliaryIndex1)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getQueryItemAttributes
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryItemAttributes: async ($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/queryItemAttributes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($orderby !== undefined) {
                localVarQueryParameter['$orderby'] = $orderby;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }

            if ($count !== undefined) {
                localVarQueryParameter['$count'] = $count;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getQueryItemAttributesqueryItemAttributesById
         * @param {string} no 
         * @param {string} barCode 
         * @param {number} attributeID 
         * @param {number} valueid 
         * @param {string} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {string} auxiliaryIndex3 
         * @param {string} auxiliaryIndex4 
         * @param {string} auxiliaryIndex5 
         * @param {number} auxiliaryIndex6 
         * @param {string} auxiliaryIndex7 
         * @param {number} auxiliaryIndex8 
         * @param {number} auxiliaryIndex9 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryItemAttributesById: async (no: string, barCode: string, attributeID: number, valueid: number, auxiliaryIndex1: string, auxiliaryIndex2: string, auxiliaryIndex3: string, auxiliaryIndex4: string, auxiliaryIndex5: string, auxiliaryIndex6: number, auxiliaryIndex7: string, auxiliaryIndex8: number, auxiliaryIndex9: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'no' is not null or undefined
            assertParamExists('getQueryItemAttributesById', 'no', no)
            // verify required parameter 'barCode' is not null or undefined
            assertParamExists('getQueryItemAttributesById', 'barCode', barCode)
            // verify required parameter 'attributeID' is not null or undefined
            assertParamExists('getQueryItemAttributesById', 'attributeID', attributeID)
            // verify required parameter 'valueid' is not null or undefined
            assertParamExists('getQueryItemAttributesById', 'valueid', valueid)
            // verify required parameter 'auxiliaryIndex1' is not null or undefined
            assertParamExists('getQueryItemAttributesById', 'auxiliaryIndex1', auxiliaryIndex1)
            // verify required parameter 'auxiliaryIndex2' is not null or undefined
            assertParamExists('getQueryItemAttributesById', 'auxiliaryIndex2', auxiliaryIndex2)
            // verify required parameter 'auxiliaryIndex3' is not null or undefined
            assertParamExists('getQueryItemAttributesById', 'auxiliaryIndex3', auxiliaryIndex3)
            // verify required parameter 'auxiliaryIndex4' is not null or undefined
            assertParamExists('getQueryItemAttributesById', 'auxiliaryIndex4', auxiliaryIndex4)
            // verify required parameter 'auxiliaryIndex5' is not null or undefined
            assertParamExists('getQueryItemAttributesById', 'auxiliaryIndex5', auxiliaryIndex5)
            // verify required parameter 'auxiliaryIndex6' is not null or undefined
            assertParamExists('getQueryItemAttributesById', 'auxiliaryIndex6', auxiliaryIndex6)
            // verify required parameter 'auxiliaryIndex7' is not null or undefined
            assertParamExists('getQueryItemAttributesById', 'auxiliaryIndex7', auxiliaryIndex7)
            // verify required parameter 'auxiliaryIndex8' is not null or undefined
            assertParamExists('getQueryItemAttributesById', 'auxiliaryIndex8', auxiliaryIndex8)
            // verify required parameter 'auxiliaryIndex9' is not null or undefined
            assertParamExists('getQueryItemAttributesById', 'auxiliaryIndex9', auxiliaryIndex9)
            const localVarPath = `/queryItemAttributes('{no}','{barCode}',{attributeID},{valueid},'{auxiliaryIndex1}','{auxiliaryIndex2}','{auxiliaryIndex3}','{auxiliaryIndex4}','{auxiliaryIndex5}',{auxiliaryIndex6},'{auxiliaryIndex7}',{auxiliaryIndex8},{auxiliaryIndex9})`
                .replace(`{${"no"}}`, encodeURIComponent(String(no)))
                .replace(`{${"barCode"}}`, encodeURIComponent(String(barCode)))
                .replace(`{${"attributeID"}}`, encodeURIComponent(String(attributeID)))
                .replace(`{${"valueid"}}`, encodeURIComponent(String(valueid)))
                .replace(`{${"auxiliaryIndex1"}}`, encodeURIComponent(String(auxiliaryIndex1)))
                .replace(`{${"auxiliaryIndex2"}}`, encodeURIComponent(String(auxiliaryIndex2)))
                .replace(`{${"auxiliaryIndex3"}}`, encodeURIComponent(String(auxiliaryIndex3)))
                .replace(`{${"auxiliaryIndex4"}}`, encodeURIComponent(String(auxiliaryIndex4)))
                .replace(`{${"auxiliaryIndex5"}}`, encodeURIComponent(String(auxiliaryIndex5)))
                .replace(`{${"auxiliaryIndex6"}}`, encodeURIComponent(String(auxiliaryIndex6)))
                .replace(`{${"auxiliaryIndex7"}}`, encodeURIComponent(String(auxiliaryIndex7)))
                .replace(`{${"auxiliaryIndex8"}}`, encodeURIComponent(String(auxiliaryIndex8)))
                .replace(`{${"auxiliaryIndex9"}}`, encodeURIComponent(String(auxiliaryIndex9)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getQueryItems
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryItems: async ($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/queryItems`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($orderby !== undefined) {
                localVarQueryParameter['$orderby'] = $orderby;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }

            if ($count !== undefined) {
                localVarQueryParameter['$count'] = $count;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getQueryItemsqueryItemsById
         * @param {string} no 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryItemsById: async (no: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'no' is not null or undefined
            assertParamExists('getQueryItemsById', 'no', no)
            const localVarPath = `/queryItems('{no}')`
                .replace(`{${"no"}}`, encodeURIComponent(String(no)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getQuerySalesCrMemo
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuerySalesCrMemo: async ($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/querySalesCrMemo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($orderby !== undefined) {
                localVarQueryParameter['$orderby'] = $orderby;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }

            if ($count !== undefined) {
                localVarQueryParameter['$count'] = $count;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getQuerySalesCrMemoquerySalesCrMemoById
         * @param {string} no 
         * @param {number} lineNo 
         * @param {string} barCode 
         * @param {string} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {string} auxiliaryIndex3 
         * @param {string} auxiliaryIndex4 
         * @param {string} auxiliaryIndex5 
         * @param {string} auxiliaryIndex6 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuerySalesCrMemoById: async (no: string, lineNo: number, barCode: string, auxiliaryIndex1: string, auxiliaryIndex2: string, auxiliaryIndex3: string, auxiliaryIndex4: string, auxiliaryIndex5: string, auxiliaryIndex6: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'no' is not null or undefined
            assertParamExists('getQuerySalesCrMemoById', 'no', no)
            // verify required parameter 'lineNo' is not null or undefined
            assertParamExists('getQuerySalesCrMemoById', 'lineNo', lineNo)
            // verify required parameter 'barCode' is not null or undefined
            assertParamExists('getQuerySalesCrMemoById', 'barCode', barCode)
            // verify required parameter 'auxiliaryIndex1' is not null or undefined
            assertParamExists('getQuerySalesCrMemoById', 'auxiliaryIndex1', auxiliaryIndex1)
            // verify required parameter 'auxiliaryIndex2' is not null or undefined
            assertParamExists('getQuerySalesCrMemoById', 'auxiliaryIndex2', auxiliaryIndex2)
            // verify required parameter 'auxiliaryIndex3' is not null or undefined
            assertParamExists('getQuerySalesCrMemoById', 'auxiliaryIndex3', auxiliaryIndex3)
            // verify required parameter 'auxiliaryIndex4' is not null or undefined
            assertParamExists('getQuerySalesCrMemoById', 'auxiliaryIndex4', auxiliaryIndex4)
            // verify required parameter 'auxiliaryIndex5' is not null or undefined
            assertParamExists('getQuerySalesCrMemoById', 'auxiliaryIndex5', auxiliaryIndex5)
            // verify required parameter 'auxiliaryIndex6' is not null or undefined
            assertParamExists('getQuerySalesCrMemoById', 'auxiliaryIndex6', auxiliaryIndex6)
            const localVarPath = `/querySalesCrMemo('{no}',{lineNo},'{barCode}','{auxiliaryIndex1}','{auxiliaryIndex2}','{auxiliaryIndex3}','{auxiliaryIndex4}','{auxiliaryIndex5}','{auxiliaryIndex6}')`
                .replace(`{${"no"}}`, encodeURIComponent(String(no)))
                .replace(`{${"lineNo"}}`, encodeURIComponent(String(lineNo)))
                .replace(`{${"barCode"}}`, encodeURIComponent(String(barCode)))
                .replace(`{${"auxiliaryIndex1"}}`, encodeURIComponent(String(auxiliaryIndex1)))
                .replace(`{${"auxiliaryIndex2"}}`, encodeURIComponent(String(auxiliaryIndex2)))
                .replace(`{${"auxiliaryIndex3"}}`, encodeURIComponent(String(auxiliaryIndex3)))
                .replace(`{${"auxiliaryIndex4"}}`, encodeURIComponent(String(auxiliaryIndex4)))
                .replace(`{${"auxiliaryIndex5"}}`, encodeURIComponent(String(auxiliaryIndex5)))
                .replace(`{${"auxiliaryIndex6"}}`, encodeURIComponent(String(auxiliaryIndex6)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getQuerySalesInvoice
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuerySalesInvoice: async ($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/querySalesInvoice`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($orderby !== undefined) {
                localVarQueryParameter['$orderby'] = $orderby;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }

            if ($count !== undefined) {
                localVarQueryParameter['$count'] = $count;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getQuerySalesInvoicequerySalesInvoiceById
         * @param {string} no 
         * @param {number} lineNo 
         * @param {string} barCode 
         * @param {string} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {string} auxiliaryIndex3 
         * @param {string} auxiliaryIndex4 
         * @param {string} auxiliaryIndex5 
         * @param {string} auxiliaryIndex6 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuerySalesInvoiceById: async (no: string, lineNo: number, barCode: string, auxiliaryIndex1: string, auxiliaryIndex2: string, auxiliaryIndex3: string, auxiliaryIndex4: string, auxiliaryIndex5: string, auxiliaryIndex6: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'no' is not null or undefined
            assertParamExists('getQuerySalesInvoiceById', 'no', no)
            // verify required parameter 'lineNo' is not null or undefined
            assertParamExists('getQuerySalesInvoiceById', 'lineNo', lineNo)
            // verify required parameter 'barCode' is not null or undefined
            assertParamExists('getQuerySalesInvoiceById', 'barCode', barCode)
            // verify required parameter 'auxiliaryIndex1' is not null or undefined
            assertParamExists('getQuerySalesInvoiceById', 'auxiliaryIndex1', auxiliaryIndex1)
            // verify required parameter 'auxiliaryIndex2' is not null or undefined
            assertParamExists('getQuerySalesInvoiceById', 'auxiliaryIndex2', auxiliaryIndex2)
            // verify required parameter 'auxiliaryIndex3' is not null or undefined
            assertParamExists('getQuerySalesInvoiceById', 'auxiliaryIndex3', auxiliaryIndex3)
            // verify required parameter 'auxiliaryIndex4' is not null or undefined
            assertParamExists('getQuerySalesInvoiceById', 'auxiliaryIndex4', auxiliaryIndex4)
            // verify required parameter 'auxiliaryIndex5' is not null or undefined
            assertParamExists('getQuerySalesInvoiceById', 'auxiliaryIndex5', auxiliaryIndex5)
            // verify required parameter 'auxiliaryIndex6' is not null or undefined
            assertParamExists('getQuerySalesInvoiceById', 'auxiliaryIndex6', auxiliaryIndex6)
            const localVarPath = `/querySalesInvoice('{no}',{lineNo},'{barCode}','{auxiliaryIndex1}','{auxiliaryIndex2}','{auxiliaryIndex3}','{auxiliaryIndex4}','{auxiliaryIndex5}','{auxiliaryIndex6}')`
                .replace(`{${"no"}}`, encodeURIComponent(String(no)))
                .replace(`{${"lineNo"}}`, encodeURIComponent(String(lineNo)))
                .replace(`{${"barCode"}}`, encodeURIComponent(String(barCode)))
                .replace(`{${"auxiliaryIndex1"}}`, encodeURIComponent(String(auxiliaryIndex1)))
                .replace(`{${"auxiliaryIndex2"}}`, encodeURIComponent(String(auxiliaryIndex2)))
                .replace(`{${"auxiliaryIndex3"}}`, encodeURIComponent(String(auxiliaryIndex3)))
                .replace(`{${"auxiliaryIndex4"}}`, encodeURIComponent(String(auxiliaryIndex4)))
                .replace(`{${"auxiliaryIndex5"}}`, encodeURIComponent(String(auxiliaryIndex5)))
                .replace(`{${"auxiliaryIndex6"}}`, encodeURIComponent(String(auxiliaryIndex6)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getQuerySalesOrderHeader
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuerySalesOrderHeader: async ($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/querySalesOrderHeader`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($orderby !== undefined) {
                localVarQueryParameter['$orderby'] = $orderby;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }

            if ($count !== undefined) {
                localVarQueryParameter['$count'] = $count;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getQuerySalesOrderHeaderquerySalesOrderHeaderById
         * @param {string} documentType 
         * @param {string} no 
         * @param {number} lineNo 
         * @param {string} barCode 
         * @param {string} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {string} auxiliaryIndex3 
         * @param {string} auxiliaryIndex4 
         * @param {string} auxiliaryIndex5 
         * @param {string} auxiliaryIndex6 
         * @param {string} auxiliaryIndex7 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuerySalesOrderHeaderById: async (documentType: string, no: string, lineNo: number, barCode: string, auxiliaryIndex1: string, auxiliaryIndex2: string, auxiliaryIndex3: string, auxiliaryIndex4: string, auxiliaryIndex5: string, auxiliaryIndex6: string, auxiliaryIndex7: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentType' is not null or undefined
            assertParamExists('getQuerySalesOrderHeaderById', 'documentType', documentType)
            // verify required parameter 'no' is not null or undefined
            assertParamExists('getQuerySalesOrderHeaderById', 'no', no)
            // verify required parameter 'lineNo' is not null or undefined
            assertParamExists('getQuerySalesOrderHeaderById', 'lineNo', lineNo)
            // verify required parameter 'barCode' is not null or undefined
            assertParamExists('getQuerySalesOrderHeaderById', 'barCode', barCode)
            // verify required parameter 'auxiliaryIndex1' is not null or undefined
            assertParamExists('getQuerySalesOrderHeaderById', 'auxiliaryIndex1', auxiliaryIndex1)
            // verify required parameter 'auxiliaryIndex2' is not null or undefined
            assertParamExists('getQuerySalesOrderHeaderById', 'auxiliaryIndex2', auxiliaryIndex2)
            // verify required parameter 'auxiliaryIndex3' is not null or undefined
            assertParamExists('getQuerySalesOrderHeaderById', 'auxiliaryIndex3', auxiliaryIndex3)
            // verify required parameter 'auxiliaryIndex4' is not null or undefined
            assertParamExists('getQuerySalesOrderHeaderById', 'auxiliaryIndex4', auxiliaryIndex4)
            // verify required parameter 'auxiliaryIndex5' is not null or undefined
            assertParamExists('getQuerySalesOrderHeaderById', 'auxiliaryIndex5', auxiliaryIndex5)
            // verify required parameter 'auxiliaryIndex6' is not null or undefined
            assertParamExists('getQuerySalesOrderHeaderById', 'auxiliaryIndex6', auxiliaryIndex6)
            // verify required parameter 'auxiliaryIndex7' is not null or undefined
            assertParamExists('getQuerySalesOrderHeaderById', 'auxiliaryIndex7', auxiliaryIndex7)
            const localVarPath = `/querySalesOrderHeader('{documentType}','{no}',{lineNo},'{barCode}','{auxiliaryIndex1}','{auxiliaryIndex2}','{auxiliaryIndex3}','{auxiliaryIndex4}','{auxiliaryIndex5}','{auxiliaryIndex6}','{auxiliaryIndex7}')`
                .replace(`{${"documentType"}}`, encodeURIComponent(String(documentType)))
                .replace(`{${"no"}}`, encodeURIComponent(String(no)))
                .replace(`{${"lineNo"}}`, encodeURIComponent(String(lineNo)))
                .replace(`{${"barCode"}}`, encodeURIComponent(String(barCode)))
                .replace(`{${"auxiliaryIndex1"}}`, encodeURIComponent(String(auxiliaryIndex1)))
                .replace(`{${"auxiliaryIndex2"}}`, encodeURIComponent(String(auxiliaryIndex2)))
                .replace(`{${"auxiliaryIndex3"}}`, encodeURIComponent(String(auxiliaryIndex3)))
                .replace(`{${"auxiliaryIndex4"}}`, encodeURIComponent(String(auxiliaryIndex4)))
                .replace(`{${"auxiliaryIndex5"}}`, encodeURIComponent(String(auxiliaryIndex5)))
                .replace(`{${"auxiliaryIndex6"}}`, encodeURIComponent(String(auxiliaryIndex6)))
                .replace(`{${"auxiliaryIndex7"}}`, encodeURIComponent(String(auxiliaryIndex7)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getQuerySalesShipment
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuerySalesShipment: async ($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/querySalesShipment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($orderby !== undefined) {
                localVarQueryParameter['$orderby'] = $orderby;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }

            if ($count !== undefined) {
                localVarQueryParameter['$count'] = $count;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getQuerySalesShipmentquerySalesShipmentById
         * @param {string} no 
         * @param {number} lineNo 
         * @param {string} barCode 
         * @param {string} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {string} auxiliaryIndex3 
         * @param {string} auxiliaryIndex4 
         * @param {string} auxiliaryIndex5 
         * @param {string} auxiliaryIndex6 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuerySalesShipmentById: async (no: string, lineNo: number, barCode: string, auxiliaryIndex1: string, auxiliaryIndex2: string, auxiliaryIndex3: string, auxiliaryIndex4: string, auxiliaryIndex5: string, auxiliaryIndex6: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'no' is not null or undefined
            assertParamExists('getQuerySalesShipmentById', 'no', no)
            // verify required parameter 'lineNo' is not null or undefined
            assertParamExists('getQuerySalesShipmentById', 'lineNo', lineNo)
            // verify required parameter 'barCode' is not null or undefined
            assertParamExists('getQuerySalesShipmentById', 'barCode', barCode)
            // verify required parameter 'auxiliaryIndex1' is not null or undefined
            assertParamExists('getQuerySalesShipmentById', 'auxiliaryIndex1', auxiliaryIndex1)
            // verify required parameter 'auxiliaryIndex2' is not null or undefined
            assertParamExists('getQuerySalesShipmentById', 'auxiliaryIndex2', auxiliaryIndex2)
            // verify required parameter 'auxiliaryIndex3' is not null or undefined
            assertParamExists('getQuerySalesShipmentById', 'auxiliaryIndex3', auxiliaryIndex3)
            // verify required parameter 'auxiliaryIndex4' is not null or undefined
            assertParamExists('getQuerySalesShipmentById', 'auxiliaryIndex4', auxiliaryIndex4)
            // verify required parameter 'auxiliaryIndex5' is not null or undefined
            assertParamExists('getQuerySalesShipmentById', 'auxiliaryIndex5', auxiliaryIndex5)
            // verify required parameter 'auxiliaryIndex6' is not null or undefined
            assertParamExists('getQuerySalesShipmentById', 'auxiliaryIndex6', auxiliaryIndex6)
            const localVarPath = `/querySalesShipment('{no}',{lineNo},'{barCode}','{auxiliaryIndex1}','{auxiliaryIndex2}','{auxiliaryIndex3}','{auxiliaryIndex4}','{auxiliaryIndex5}','{auxiliaryIndex6}')`
                .replace(`{${"no"}}`, encodeURIComponent(String(no)))
                .replace(`{${"lineNo"}}`, encodeURIComponent(String(lineNo)))
                .replace(`{${"barCode"}}`, encodeURIComponent(String(barCode)))
                .replace(`{${"auxiliaryIndex1"}}`, encodeURIComponent(String(auxiliaryIndex1)))
                .replace(`{${"auxiliaryIndex2"}}`, encodeURIComponent(String(auxiliaryIndex2)))
                .replace(`{${"auxiliaryIndex3"}}`, encodeURIComponent(String(auxiliaryIndex3)))
                .replace(`{${"auxiliaryIndex4"}}`, encodeURIComponent(String(auxiliaryIndex4)))
                .replace(`{${"auxiliaryIndex5"}}`, encodeURIComponent(String(auxiliaryIndex5)))
                .replace(`{${"auxiliaryIndex6"}}`, encodeURIComponent(String(auxiliaryIndex6)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getSalesCrMemosHeadersalesCrMemoHeaderById
         * @param {string} documentNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesCrMemoHeaderById: async (documentNo: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentNo' is not null or undefined
            assertParamExists('getSalesCrMemoHeaderById', 'documentNo', documentNo)
            const localVarPath = `/salesCrMemosHeader('{documentNo}')`
                .replace(`{${"documentNo"}}`, encodeURIComponent(String(documentNo)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getSalesCrMemosHeader
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesCrMemosHeader: async ($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/salesCrMemosHeader`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($orderby !== undefined) {
                localVarQueryParameter['$orderby'] = $orderby;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }

            if ($count !== undefined) {
                localVarQueryParameter['$count'] = $count;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getSalesInvoicesHeadersalesInvoiceHeaderById
         * @param {string} documentNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesInvoiceHeaderById: async (documentNo: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentNo' is not null or undefined
            assertParamExists('getSalesInvoiceHeaderById', 'documentNo', documentNo)
            const localVarPath = `/salesInvoicesHeader('{documentNo}')`
                .replace(`{${"documentNo"}}`, encodeURIComponent(String(documentNo)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getSalesInvoiceLinessalesInvoiceLineById
         * @param {string} documentNo 
         * @param {number} lineNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesInvoiceLineById: async (documentNo: string, lineNo: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentNo' is not null or undefined
            assertParamExists('getSalesInvoiceLineById', 'documentNo', documentNo)
            // verify required parameter 'lineNo' is not null or undefined
            assertParamExists('getSalesInvoiceLineById', 'lineNo', lineNo)
            const localVarPath = `/salesInvoiceLines('{documentNo}',{lineNo})`
                .replace(`{${"documentNo"}}`, encodeURIComponent(String(documentNo)))
                .replace(`{${"lineNo"}}`, encodeURIComponent(String(lineNo)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getSalesInvoiceLines
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesInvoiceLines: async ($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/salesInvoiceLines`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($orderby !== undefined) {
                localVarQueryParameter['$orderby'] = $orderby;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }

            if ($count !== undefined) {
                localVarQueryParameter['$count'] = $count;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getSalesInvoicesHeader
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesInvoicesHeader: async ($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/salesInvoicesHeader`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($orderby !== undefined) {
                localVarQueryParameter['$orderby'] = $orderby;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }

            if ($count !== undefined) {
                localVarQueryParameter['$count'] = $count;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getSalesOrderHeader
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesOrderHeader: async ($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/salesOrderHeader`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($orderby !== undefined) {
                localVarQueryParameter['$orderby'] = $orderby;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }

            if ($count !== undefined) {
                localVarQueryParameter['$count'] = $count;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getSalesOrderHeadersalesOrderHeaderById
         * @param {string} documentType 
         * @param {string} documentNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesOrderHeaderById: async (documentType: string, documentNo: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentType' is not null or undefined
            assertParamExists('getSalesOrderHeaderById', 'documentType', documentType)
            // verify required parameter 'documentNo' is not null or undefined
            assertParamExists('getSalesOrderHeaderById', 'documentNo', documentNo)
            const localVarPath = `/salesOrderHeader('{documentType}','{documentNo}')`
                .replace(`{${"documentType"}}`, encodeURIComponent(String(documentType)))
                .replace(`{${"documentNo"}}`, encodeURIComponent(String(documentNo)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getSalesOrderLinessalesOrderLineById
         * @param {string} documentType 
         * @param {string} documentNo 
         * @param {number} lineNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesOrderLineById: async (documentType: string, documentNo: string, lineNo: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentType' is not null or undefined
            assertParamExists('getSalesOrderLineById', 'documentType', documentType)
            // verify required parameter 'documentNo' is not null or undefined
            assertParamExists('getSalesOrderLineById', 'documentNo', documentNo)
            // verify required parameter 'lineNo' is not null or undefined
            assertParamExists('getSalesOrderLineById', 'lineNo', lineNo)
            const localVarPath = `/salesOrderLines('{documentType}','{documentNo}',{lineNo})`
                .replace(`{${"documentType"}}`, encodeURIComponent(String(documentType)))
                .replace(`{${"documentNo"}}`, encodeURIComponent(String(documentNo)))
                .replace(`{${"lineNo"}}`, encodeURIComponent(String(lineNo)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getSalesOrderLines
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesOrderLines: async ($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/salesOrderLines`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($orderby !== undefined) {
                localVarQueryParameter['$orderby'] = $orderby;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }

            if ($count !== undefined) {
                localVarQueryParameter['$count'] = $count;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getSalesQuoteHeader
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesQuoteHeader: async ($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/salesQuoteHeader`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($orderby !== undefined) {
                localVarQueryParameter['$orderby'] = $orderby;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }

            if ($count !== undefined) {
                localVarQueryParameter['$count'] = $count;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getSalesQuoteHeadersalesQuoteHeaderById
         * @param {string} documentType 
         * @param {string} documentNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesQuoteHeaderById: async (documentType: string, documentNo: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentType' is not null or undefined
            assertParamExists('getSalesQuoteHeaderById', 'documentType', documentType)
            // verify required parameter 'documentNo' is not null or undefined
            assertParamExists('getSalesQuoteHeaderById', 'documentNo', documentNo)
            const localVarPath = `/salesQuoteHeader('{documentType}','{documentNo}')`
                .replace(`{${"documentType"}}`, encodeURIComponent(String(documentType)))
                .replace(`{${"documentNo"}}`, encodeURIComponent(String(documentNo)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getSalesQuoteLinessalesQuoteLineById
         * @param {string} documentType 
         * @param {string} documentNo 
         * @param {number} lineNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesQuoteLineById: async (documentType: string, documentNo: string, lineNo: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentType' is not null or undefined
            assertParamExists('getSalesQuoteLineById', 'documentType', documentType)
            // verify required parameter 'documentNo' is not null or undefined
            assertParamExists('getSalesQuoteLineById', 'documentNo', documentNo)
            // verify required parameter 'lineNo' is not null or undefined
            assertParamExists('getSalesQuoteLineById', 'lineNo', lineNo)
            const localVarPath = `/salesQuoteLines('{documentType}','{documentNo}',{lineNo})`
                .replace(`{${"documentType"}}`, encodeURIComponent(String(documentType)))
                .replace(`{${"documentNo"}}`, encodeURIComponent(String(documentNo)))
                .replace(`{${"lineNo"}}`, encodeURIComponent(String(lineNo)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getSalesQuoteLines
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesQuoteLines: async ($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/salesQuoteLines`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($orderby !== undefined) {
                localVarQueryParameter['$orderby'] = $orderby;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }

            if ($count !== undefined) {
                localVarQueryParameter['$count'] = $count;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getSalesShipmentsHeadersalesShipmentHeaderById
         * @param {string} documentNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesShipmentHeaderById: async (documentNo: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentNo' is not null or undefined
            assertParamExists('getSalesShipmentHeaderById', 'documentNo', documentNo)
            const localVarPath = `/salesShipmentsHeader('{documentNo}')`
                .replace(`{${"documentNo"}}`, encodeURIComponent(String(documentNo)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getSalesShipmentLinessalesShipmentLineById
         * @param {string} documentNo 
         * @param {number} lineNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesShipmentLineById: async (documentNo: string, lineNo: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentNo' is not null or undefined
            assertParamExists('getSalesShipmentLineById', 'documentNo', documentNo)
            // verify required parameter 'lineNo' is not null or undefined
            assertParamExists('getSalesShipmentLineById', 'lineNo', lineNo)
            const localVarPath = `/salesShipmentLines('{documentNo}',{lineNo})`
                .replace(`{${"documentNo"}}`, encodeURIComponent(String(documentNo)))
                .replace(`{${"lineNo"}}`, encodeURIComponent(String(lineNo)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getSalesShipmentLines
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesShipmentLines: async ($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/salesShipmentLines`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($orderby !== undefined) {
                localVarQueryParameter['$orderby'] = $orderby;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }

            if ($count !== undefined) {
                localVarQueryParameter['$count'] = $count;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getSalesShipmentsHeader
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesShipmentsHeader: async ($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/salesShipmentsHeader`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($orderby !== undefined) {
                localVarQueryParameter['$orderby'] = $orderby;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }

            if ($count !== undefined) {
                localVarQueryParameter['$count'] = $count;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getSalescrMemoLinessalescrMemoLineById
         * @param {string} documentNo 
         * @param {number} lineNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalescrMemoLineById: async (documentNo: string, lineNo: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentNo' is not null or undefined
            assertParamExists('getSalescrMemoLineById', 'documentNo', documentNo)
            // verify required parameter 'lineNo' is not null or undefined
            assertParamExists('getSalescrMemoLineById', 'lineNo', lineNo)
            const localVarPath = `/salescrMemoLines('{documentNo}',{lineNo})`
                .replace(`{${"documentNo"}}`, encodeURIComponent(String(documentNo)))
                .replace(`{${"lineNo"}}`, encodeURIComponent(String(lineNo)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getSalescrMemoLines
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalescrMemoLines: async ($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/salescrMemoLines`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($orderby !== undefined) {
                localVarQueryParameter['$orderby'] = $orderby;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }

            if ($count !== undefined) {
                localVarQueryParameter['$count'] = $count;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getShiptoAddress
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShiptoAddress: async ($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/shiptoAddress`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($orderby !== undefined) {
                localVarQueryParameter['$orderby'] = $orderby;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }

            if ($count !== undefined) {
                localVarQueryParameter['$count'] = $count;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getShiptoAddressshiptoAddressById
         * @param {string} customerNo 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShiptoAddressById: async (customerNo: string, code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerNo' is not null or undefined
            assertParamExists('getShiptoAddressById', 'customerNo', customerNo)
            // verify required parameter 'code' is not null or undefined
            assertParamExists('getShiptoAddressById', 'code', code)
            const localVarPath = `/shiptoAddress('{customerNo}','{code}')`
                .replace(`{${"customerNo"}}`, encodeURIComponent(String(customerNo)))
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getSubscriptions
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscriptions: async ($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/subscriptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($orderby !== undefined) {
                localVarQueryParameter['$orderby'] = $orderby;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }

            if ($count !== undefined) {
                localVarQueryParameter['$count'] = $count;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getSubscriptionssubscriptionsById
         * @param {string} subscriptionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscriptionsById: async (subscriptionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subscriptionId' is not null or undefined
            assertParamExists('getSubscriptionsById', 'subscriptionId', subscriptionId)
            const localVarPath = `/subscriptions('{subscriptionId}')`
                .replace(`{${"subscriptionId"}}`, encodeURIComponent(String(subscriptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary InsertItem
         * @param {MicrosoftNAVInsertItem} item 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertItem: async (item: MicrosoftNAVInsertItem, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'item' is not null or undefined
            assertParamExists('insertItem', 'item', item)
            const localVarPath = `/InsertItem`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(item, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary NewEANCode
         * @param {MicrosoftNAVNewEANCode} item 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newEANCode: async (item: MicrosoftNAVNewEANCode, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'item' is not null or undefined
            assertParamExists('newEANCode', 'item', item)
            const localVarPath = `/NewEANCode`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(item, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateCompaniescompany
         * @param {string} id 
         * @param {MicrosoftNAVCompany} company 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCompany: async (id: string, company: MicrosoftNAVCompany, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateCompany', 'id', id)
            // verify required parameter 'company' is not null or undefined
            assertParamExists('updateCompany', 'company', company)
            const localVarPath = `/companies({id})`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(company, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateItemsitem
         * @param {string} no 
         * @param {MicrosoftNAVItem} item 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItem: async (no: string, item: MicrosoftNAVItem, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'no' is not null or undefined
            assertParamExists('updateItem', 'no', no)
            // verify required parameter 'item' is not null or undefined
            assertParamExists('updateItem', 'item', item)
            const localVarPath = `/items('{no}')`
                .replace(`{${"no"}}`, encodeURIComponent(String(no)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(item, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateQueryAttributesqueryAttributes
         * @param {number} id 
         * @param {MicrosoftNAVQueryAttributes} queryAttributes 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQueryAttributes: async (id: number, queryAttributes: MicrosoftNAVQueryAttributes, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateQueryAttributes', 'id', id)
            // verify required parameter 'queryAttributes' is not null or undefined
            assertParamExists('updateQueryAttributes', 'queryAttributes', queryAttributes)
            const localVarPath = `/queryAttributes({id})`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(queryAttributes, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateQueryAttributesValuesqueryAttributesValues
         * @param {number} attributeID 
         * @param {number} id 
         * @param {MicrosoftNAVQueryAttributesValues} queryAttributesValues 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQueryAttributesValues: async (attributeID: number, id: number, queryAttributesValues: MicrosoftNAVQueryAttributesValues, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attributeID' is not null or undefined
            assertParamExists('updateQueryAttributesValues', 'attributeID', attributeID)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateQueryAttributesValues', 'id', id)
            // verify required parameter 'queryAttributesValues' is not null or undefined
            assertParamExists('updateQueryAttributesValues', 'queryAttributesValues', queryAttributesValues)
            const localVarPath = `/queryAttributesValues({attributeID},{id})`
                .replace(`{${"attributeID"}}`, encodeURIComponent(String(attributeID)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(queryAttributesValues, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateQueryCategoriesqueryCategories
         * @param {string} code 
         * @param {number} attributeID 
         * @param {number} valueid 
         * @param {number} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {number} auxiliaryIndex3 
         * @param {number} auxiliaryIndex4 
         * @param {MicrosoftNAVQueryCategories} queryCategories 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQueryCategories: async (code: string, attributeID: number, valueid: number, auxiliaryIndex1: number, auxiliaryIndex2: string, auxiliaryIndex3: number, auxiliaryIndex4: number, queryCategories: MicrosoftNAVQueryCategories, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('updateQueryCategories', 'code', code)
            // verify required parameter 'attributeID' is not null or undefined
            assertParamExists('updateQueryCategories', 'attributeID', attributeID)
            // verify required parameter 'valueid' is not null or undefined
            assertParamExists('updateQueryCategories', 'valueid', valueid)
            // verify required parameter 'auxiliaryIndex1' is not null or undefined
            assertParamExists('updateQueryCategories', 'auxiliaryIndex1', auxiliaryIndex1)
            // verify required parameter 'auxiliaryIndex2' is not null or undefined
            assertParamExists('updateQueryCategories', 'auxiliaryIndex2', auxiliaryIndex2)
            // verify required parameter 'auxiliaryIndex3' is not null or undefined
            assertParamExists('updateQueryCategories', 'auxiliaryIndex3', auxiliaryIndex3)
            // verify required parameter 'auxiliaryIndex4' is not null or undefined
            assertParamExists('updateQueryCategories', 'auxiliaryIndex4', auxiliaryIndex4)
            // verify required parameter 'queryCategories' is not null or undefined
            assertParamExists('updateQueryCategories', 'queryCategories', queryCategories)
            const localVarPath = `/queryCategories('{code}',{attributeID},{valueid},{auxiliaryIndex1},'{auxiliaryIndex2}',{auxiliaryIndex3},{auxiliaryIndex4})`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)))
                .replace(`{${"attributeID"}}`, encodeURIComponent(String(attributeID)))
                .replace(`{${"valueid"}}`, encodeURIComponent(String(valueid)))
                .replace(`{${"auxiliaryIndex1"}}`, encodeURIComponent(String(auxiliaryIndex1)))
                .replace(`{${"auxiliaryIndex2"}}`, encodeURIComponent(String(auxiliaryIndex2)))
                .replace(`{${"auxiliaryIndex3"}}`, encodeURIComponent(String(auxiliaryIndex3)))
                .replace(`{${"auxiliaryIndex4"}}`, encodeURIComponent(String(auxiliaryIndex4)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(queryCategories, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateQueryCategoryAttributesqueryCategoryAttributes
         * @param {string} code 
         * @param {number} attributeID 
         * @param {number} valueid 
         * @param {number} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {number} auxiliaryIndex3 
         * @param {number} auxiliaryIndex4 
         * @param {MicrosoftNAVQueryCategoryAttributes} queryCategoryAttributes 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQueryCategoryAttributes: async (code: string, attributeID: number, valueid: number, auxiliaryIndex1: number, auxiliaryIndex2: string, auxiliaryIndex3: number, auxiliaryIndex4: number, queryCategoryAttributes: MicrosoftNAVQueryCategoryAttributes, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('updateQueryCategoryAttributes', 'code', code)
            // verify required parameter 'attributeID' is not null or undefined
            assertParamExists('updateQueryCategoryAttributes', 'attributeID', attributeID)
            // verify required parameter 'valueid' is not null or undefined
            assertParamExists('updateQueryCategoryAttributes', 'valueid', valueid)
            // verify required parameter 'auxiliaryIndex1' is not null or undefined
            assertParamExists('updateQueryCategoryAttributes', 'auxiliaryIndex1', auxiliaryIndex1)
            // verify required parameter 'auxiliaryIndex2' is not null or undefined
            assertParamExists('updateQueryCategoryAttributes', 'auxiliaryIndex2', auxiliaryIndex2)
            // verify required parameter 'auxiliaryIndex3' is not null or undefined
            assertParamExists('updateQueryCategoryAttributes', 'auxiliaryIndex3', auxiliaryIndex3)
            // verify required parameter 'auxiliaryIndex4' is not null or undefined
            assertParamExists('updateQueryCategoryAttributes', 'auxiliaryIndex4', auxiliaryIndex4)
            // verify required parameter 'queryCategoryAttributes' is not null or undefined
            assertParamExists('updateQueryCategoryAttributes', 'queryCategoryAttributes', queryCategoryAttributes)
            const localVarPath = `/queryCategoryAttributes('{code}',{attributeID},{valueid},{auxiliaryIndex1},'{auxiliaryIndex2}',{auxiliaryIndex3},{auxiliaryIndex4})`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)))
                .replace(`{${"attributeID"}}`, encodeURIComponent(String(attributeID)))
                .replace(`{${"valueid"}}`, encodeURIComponent(String(valueid)))
                .replace(`{${"auxiliaryIndex1"}}`, encodeURIComponent(String(auxiliaryIndex1)))
                .replace(`{${"auxiliaryIndex2"}}`, encodeURIComponent(String(auxiliaryIndex2)))
                .replace(`{${"auxiliaryIndex3"}}`, encodeURIComponent(String(auxiliaryIndex3)))
                .replace(`{${"auxiliaryIndex4"}}`, encodeURIComponent(String(auxiliaryIndex4)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(queryCategoryAttributes, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateQueryCustomerqueryCustomer
         * @param {string} customerNo 
         * @param {string} shipToCode 
         * @param {string} auxiliaryIndex1 
         * @param {MicrosoftNAVQueryCustomer} queryCustomer 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQueryCustomer: async (customerNo: string, shipToCode: string, auxiliaryIndex1: string, queryCustomer: MicrosoftNAVQueryCustomer, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerNo' is not null or undefined
            assertParamExists('updateQueryCustomer', 'customerNo', customerNo)
            // verify required parameter 'shipToCode' is not null or undefined
            assertParamExists('updateQueryCustomer', 'shipToCode', shipToCode)
            // verify required parameter 'auxiliaryIndex1' is not null or undefined
            assertParamExists('updateQueryCustomer', 'auxiliaryIndex1', auxiliaryIndex1)
            // verify required parameter 'queryCustomer' is not null or undefined
            assertParamExists('updateQueryCustomer', 'queryCustomer', queryCustomer)
            const localVarPath = `/queryCustomer('{customerNo}','{shipToCode}','{auxiliaryIndex1}')`
                .replace(`{${"customerNo"}}`, encodeURIComponent(String(customerNo)))
                .replace(`{${"shipToCode"}}`, encodeURIComponent(String(shipToCode)))
                .replace(`{${"auxiliaryIndex1"}}`, encodeURIComponent(String(auxiliaryIndex1)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(queryCustomer, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateQueryItemAttributesqueryItemAttributes
         * @param {string} no 
         * @param {string} barCode 
         * @param {number} attributeID 
         * @param {number} valueid 
         * @param {string} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {string} auxiliaryIndex3 
         * @param {string} auxiliaryIndex4 
         * @param {string} auxiliaryIndex5 
         * @param {number} auxiliaryIndex6 
         * @param {string} auxiliaryIndex7 
         * @param {number} auxiliaryIndex8 
         * @param {number} auxiliaryIndex9 
         * @param {MicrosoftNAVQueryItemAttributes} queryItemAttributes 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQueryItemAttributes: async (no: string, barCode: string, attributeID: number, valueid: number, auxiliaryIndex1: string, auxiliaryIndex2: string, auxiliaryIndex3: string, auxiliaryIndex4: string, auxiliaryIndex5: string, auxiliaryIndex6: number, auxiliaryIndex7: string, auxiliaryIndex8: number, auxiliaryIndex9: number, queryItemAttributes: MicrosoftNAVQueryItemAttributes, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'no' is not null or undefined
            assertParamExists('updateQueryItemAttributes', 'no', no)
            // verify required parameter 'barCode' is not null or undefined
            assertParamExists('updateQueryItemAttributes', 'barCode', barCode)
            // verify required parameter 'attributeID' is not null or undefined
            assertParamExists('updateQueryItemAttributes', 'attributeID', attributeID)
            // verify required parameter 'valueid' is not null or undefined
            assertParamExists('updateQueryItemAttributes', 'valueid', valueid)
            // verify required parameter 'auxiliaryIndex1' is not null or undefined
            assertParamExists('updateQueryItemAttributes', 'auxiliaryIndex1', auxiliaryIndex1)
            // verify required parameter 'auxiliaryIndex2' is not null or undefined
            assertParamExists('updateQueryItemAttributes', 'auxiliaryIndex2', auxiliaryIndex2)
            // verify required parameter 'auxiliaryIndex3' is not null or undefined
            assertParamExists('updateQueryItemAttributes', 'auxiliaryIndex3', auxiliaryIndex3)
            // verify required parameter 'auxiliaryIndex4' is not null or undefined
            assertParamExists('updateQueryItemAttributes', 'auxiliaryIndex4', auxiliaryIndex4)
            // verify required parameter 'auxiliaryIndex5' is not null or undefined
            assertParamExists('updateQueryItemAttributes', 'auxiliaryIndex5', auxiliaryIndex5)
            // verify required parameter 'auxiliaryIndex6' is not null or undefined
            assertParamExists('updateQueryItemAttributes', 'auxiliaryIndex6', auxiliaryIndex6)
            // verify required parameter 'auxiliaryIndex7' is not null or undefined
            assertParamExists('updateQueryItemAttributes', 'auxiliaryIndex7', auxiliaryIndex7)
            // verify required parameter 'auxiliaryIndex8' is not null or undefined
            assertParamExists('updateQueryItemAttributes', 'auxiliaryIndex8', auxiliaryIndex8)
            // verify required parameter 'auxiliaryIndex9' is not null or undefined
            assertParamExists('updateQueryItemAttributes', 'auxiliaryIndex9', auxiliaryIndex9)
            // verify required parameter 'queryItemAttributes' is not null or undefined
            assertParamExists('updateQueryItemAttributes', 'queryItemAttributes', queryItemAttributes)
            const localVarPath = `/queryItemAttributes('{no}','{barCode}',{attributeID},{valueid},'{auxiliaryIndex1}','{auxiliaryIndex2}','{auxiliaryIndex3}','{auxiliaryIndex4}','{auxiliaryIndex5}',{auxiliaryIndex6},'{auxiliaryIndex7}',{auxiliaryIndex8},{auxiliaryIndex9})`
                .replace(`{${"no"}}`, encodeURIComponent(String(no)))
                .replace(`{${"barCode"}}`, encodeURIComponent(String(barCode)))
                .replace(`{${"attributeID"}}`, encodeURIComponent(String(attributeID)))
                .replace(`{${"valueid"}}`, encodeURIComponent(String(valueid)))
                .replace(`{${"auxiliaryIndex1"}}`, encodeURIComponent(String(auxiliaryIndex1)))
                .replace(`{${"auxiliaryIndex2"}}`, encodeURIComponent(String(auxiliaryIndex2)))
                .replace(`{${"auxiliaryIndex3"}}`, encodeURIComponent(String(auxiliaryIndex3)))
                .replace(`{${"auxiliaryIndex4"}}`, encodeURIComponent(String(auxiliaryIndex4)))
                .replace(`{${"auxiliaryIndex5"}}`, encodeURIComponent(String(auxiliaryIndex5)))
                .replace(`{${"auxiliaryIndex6"}}`, encodeURIComponent(String(auxiliaryIndex6)))
                .replace(`{${"auxiliaryIndex7"}}`, encodeURIComponent(String(auxiliaryIndex7)))
                .replace(`{${"auxiliaryIndex8"}}`, encodeURIComponent(String(auxiliaryIndex8)))
                .replace(`{${"auxiliaryIndex9"}}`, encodeURIComponent(String(auxiliaryIndex9)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(queryItemAttributes, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateQueryItemsqueryItems
         * @param {string} no 
         * @param {MicrosoftNAVQueryItems} queryItems 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQueryItems: async (no: string, queryItems: MicrosoftNAVQueryItems, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'no' is not null or undefined
            assertParamExists('updateQueryItems', 'no', no)
            // verify required parameter 'queryItems' is not null or undefined
            assertParamExists('updateQueryItems', 'queryItems', queryItems)
            const localVarPath = `/queryItems('{no}')`
                .replace(`{${"no"}}`, encodeURIComponent(String(no)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(queryItems, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateQuerySalesCrMemoquerySalesCrMemo
         * @param {string} no 
         * @param {number} lineNo 
         * @param {string} barCode 
         * @param {string} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {string} auxiliaryIndex3 
         * @param {string} auxiliaryIndex4 
         * @param {string} auxiliaryIndex5 
         * @param {string} auxiliaryIndex6 
         * @param {MicrosoftNAVQuerySalesCrMemo} querySalesCrMemo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQuerySalesCrMemo: async (no: string, lineNo: number, barCode: string, auxiliaryIndex1: string, auxiliaryIndex2: string, auxiliaryIndex3: string, auxiliaryIndex4: string, auxiliaryIndex5: string, auxiliaryIndex6: string, querySalesCrMemo: MicrosoftNAVQuerySalesCrMemo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'no' is not null or undefined
            assertParamExists('updateQuerySalesCrMemo', 'no', no)
            // verify required parameter 'lineNo' is not null or undefined
            assertParamExists('updateQuerySalesCrMemo', 'lineNo', lineNo)
            // verify required parameter 'barCode' is not null or undefined
            assertParamExists('updateQuerySalesCrMemo', 'barCode', barCode)
            // verify required parameter 'auxiliaryIndex1' is not null or undefined
            assertParamExists('updateQuerySalesCrMemo', 'auxiliaryIndex1', auxiliaryIndex1)
            // verify required parameter 'auxiliaryIndex2' is not null or undefined
            assertParamExists('updateQuerySalesCrMemo', 'auxiliaryIndex2', auxiliaryIndex2)
            // verify required parameter 'auxiliaryIndex3' is not null or undefined
            assertParamExists('updateQuerySalesCrMemo', 'auxiliaryIndex3', auxiliaryIndex3)
            // verify required parameter 'auxiliaryIndex4' is not null or undefined
            assertParamExists('updateQuerySalesCrMemo', 'auxiliaryIndex4', auxiliaryIndex4)
            // verify required parameter 'auxiliaryIndex5' is not null or undefined
            assertParamExists('updateQuerySalesCrMemo', 'auxiliaryIndex5', auxiliaryIndex5)
            // verify required parameter 'auxiliaryIndex6' is not null or undefined
            assertParamExists('updateQuerySalesCrMemo', 'auxiliaryIndex6', auxiliaryIndex6)
            // verify required parameter 'querySalesCrMemo' is not null or undefined
            assertParamExists('updateQuerySalesCrMemo', 'querySalesCrMemo', querySalesCrMemo)
            const localVarPath = `/querySalesCrMemo('{no}',{lineNo},'{barCode}','{auxiliaryIndex1}','{auxiliaryIndex2}','{auxiliaryIndex3}','{auxiliaryIndex4}','{auxiliaryIndex5}','{auxiliaryIndex6}')`
                .replace(`{${"no"}}`, encodeURIComponent(String(no)))
                .replace(`{${"lineNo"}}`, encodeURIComponent(String(lineNo)))
                .replace(`{${"barCode"}}`, encodeURIComponent(String(barCode)))
                .replace(`{${"auxiliaryIndex1"}}`, encodeURIComponent(String(auxiliaryIndex1)))
                .replace(`{${"auxiliaryIndex2"}}`, encodeURIComponent(String(auxiliaryIndex2)))
                .replace(`{${"auxiliaryIndex3"}}`, encodeURIComponent(String(auxiliaryIndex3)))
                .replace(`{${"auxiliaryIndex4"}}`, encodeURIComponent(String(auxiliaryIndex4)))
                .replace(`{${"auxiliaryIndex5"}}`, encodeURIComponent(String(auxiliaryIndex5)))
                .replace(`{${"auxiliaryIndex6"}}`, encodeURIComponent(String(auxiliaryIndex6)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(querySalesCrMemo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateQuerySalesInvoicequerySalesInvoice
         * @param {string} no 
         * @param {number} lineNo 
         * @param {string} barCode 
         * @param {string} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {string} auxiliaryIndex3 
         * @param {string} auxiliaryIndex4 
         * @param {string} auxiliaryIndex5 
         * @param {string} auxiliaryIndex6 
         * @param {MicrosoftNAVQuerySalesInvoice} querySalesInvoice 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQuerySalesInvoice: async (no: string, lineNo: number, barCode: string, auxiliaryIndex1: string, auxiliaryIndex2: string, auxiliaryIndex3: string, auxiliaryIndex4: string, auxiliaryIndex5: string, auxiliaryIndex6: string, querySalesInvoice: MicrosoftNAVQuerySalesInvoice, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'no' is not null or undefined
            assertParamExists('updateQuerySalesInvoice', 'no', no)
            // verify required parameter 'lineNo' is not null or undefined
            assertParamExists('updateQuerySalesInvoice', 'lineNo', lineNo)
            // verify required parameter 'barCode' is not null or undefined
            assertParamExists('updateQuerySalesInvoice', 'barCode', barCode)
            // verify required parameter 'auxiliaryIndex1' is not null or undefined
            assertParamExists('updateQuerySalesInvoice', 'auxiliaryIndex1', auxiliaryIndex1)
            // verify required parameter 'auxiliaryIndex2' is not null or undefined
            assertParamExists('updateQuerySalesInvoice', 'auxiliaryIndex2', auxiliaryIndex2)
            // verify required parameter 'auxiliaryIndex3' is not null or undefined
            assertParamExists('updateQuerySalesInvoice', 'auxiliaryIndex3', auxiliaryIndex3)
            // verify required parameter 'auxiliaryIndex4' is not null or undefined
            assertParamExists('updateQuerySalesInvoice', 'auxiliaryIndex4', auxiliaryIndex4)
            // verify required parameter 'auxiliaryIndex5' is not null or undefined
            assertParamExists('updateQuerySalesInvoice', 'auxiliaryIndex5', auxiliaryIndex5)
            // verify required parameter 'auxiliaryIndex6' is not null or undefined
            assertParamExists('updateQuerySalesInvoice', 'auxiliaryIndex6', auxiliaryIndex6)
            // verify required parameter 'querySalesInvoice' is not null or undefined
            assertParamExists('updateQuerySalesInvoice', 'querySalesInvoice', querySalesInvoice)
            const localVarPath = `/querySalesInvoice('{no}',{lineNo},'{barCode}','{auxiliaryIndex1}','{auxiliaryIndex2}','{auxiliaryIndex3}','{auxiliaryIndex4}','{auxiliaryIndex5}','{auxiliaryIndex6}')`
                .replace(`{${"no"}}`, encodeURIComponent(String(no)))
                .replace(`{${"lineNo"}}`, encodeURIComponent(String(lineNo)))
                .replace(`{${"barCode"}}`, encodeURIComponent(String(barCode)))
                .replace(`{${"auxiliaryIndex1"}}`, encodeURIComponent(String(auxiliaryIndex1)))
                .replace(`{${"auxiliaryIndex2"}}`, encodeURIComponent(String(auxiliaryIndex2)))
                .replace(`{${"auxiliaryIndex3"}}`, encodeURIComponent(String(auxiliaryIndex3)))
                .replace(`{${"auxiliaryIndex4"}}`, encodeURIComponent(String(auxiliaryIndex4)))
                .replace(`{${"auxiliaryIndex5"}}`, encodeURIComponent(String(auxiliaryIndex5)))
                .replace(`{${"auxiliaryIndex6"}}`, encodeURIComponent(String(auxiliaryIndex6)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(querySalesInvoice, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateQuerySalesOrderHeaderquerySalesOrderHeader
         * @param {string} documentType 
         * @param {string} no 
         * @param {number} lineNo 
         * @param {string} barCode 
         * @param {string} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {string} auxiliaryIndex3 
         * @param {string} auxiliaryIndex4 
         * @param {string} auxiliaryIndex5 
         * @param {string} auxiliaryIndex6 
         * @param {string} auxiliaryIndex7 
         * @param {MicrosoftNAVQuerySalesOrderHeader} querySalesOrderHeader 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQuerySalesOrderHeader: async (documentType: string, no: string, lineNo: number, barCode: string, auxiliaryIndex1: string, auxiliaryIndex2: string, auxiliaryIndex3: string, auxiliaryIndex4: string, auxiliaryIndex5: string, auxiliaryIndex6: string, auxiliaryIndex7: string, querySalesOrderHeader: MicrosoftNAVQuerySalesOrderHeader, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentType' is not null or undefined
            assertParamExists('updateQuerySalesOrderHeader', 'documentType', documentType)
            // verify required parameter 'no' is not null or undefined
            assertParamExists('updateQuerySalesOrderHeader', 'no', no)
            // verify required parameter 'lineNo' is not null or undefined
            assertParamExists('updateQuerySalesOrderHeader', 'lineNo', lineNo)
            // verify required parameter 'barCode' is not null or undefined
            assertParamExists('updateQuerySalesOrderHeader', 'barCode', barCode)
            // verify required parameter 'auxiliaryIndex1' is not null or undefined
            assertParamExists('updateQuerySalesOrderHeader', 'auxiliaryIndex1', auxiliaryIndex1)
            // verify required parameter 'auxiliaryIndex2' is not null or undefined
            assertParamExists('updateQuerySalesOrderHeader', 'auxiliaryIndex2', auxiliaryIndex2)
            // verify required parameter 'auxiliaryIndex3' is not null or undefined
            assertParamExists('updateQuerySalesOrderHeader', 'auxiliaryIndex3', auxiliaryIndex3)
            // verify required parameter 'auxiliaryIndex4' is not null or undefined
            assertParamExists('updateQuerySalesOrderHeader', 'auxiliaryIndex4', auxiliaryIndex4)
            // verify required parameter 'auxiliaryIndex5' is not null or undefined
            assertParamExists('updateQuerySalesOrderHeader', 'auxiliaryIndex5', auxiliaryIndex5)
            // verify required parameter 'auxiliaryIndex6' is not null or undefined
            assertParamExists('updateQuerySalesOrderHeader', 'auxiliaryIndex6', auxiliaryIndex6)
            // verify required parameter 'auxiliaryIndex7' is not null or undefined
            assertParamExists('updateQuerySalesOrderHeader', 'auxiliaryIndex7', auxiliaryIndex7)
            // verify required parameter 'querySalesOrderHeader' is not null or undefined
            assertParamExists('updateQuerySalesOrderHeader', 'querySalesOrderHeader', querySalesOrderHeader)
            const localVarPath = `/querySalesOrderHeader('{documentType}','{no}',{lineNo},'{barCode}','{auxiliaryIndex1}','{auxiliaryIndex2}','{auxiliaryIndex3}','{auxiliaryIndex4}','{auxiliaryIndex5}','{auxiliaryIndex6}','{auxiliaryIndex7}')`
                .replace(`{${"documentType"}}`, encodeURIComponent(String(documentType)))
                .replace(`{${"no"}}`, encodeURIComponent(String(no)))
                .replace(`{${"lineNo"}}`, encodeURIComponent(String(lineNo)))
                .replace(`{${"barCode"}}`, encodeURIComponent(String(barCode)))
                .replace(`{${"auxiliaryIndex1"}}`, encodeURIComponent(String(auxiliaryIndex1)))
                .replace(`{${"auxiliaryIndex2"}}`, encodeURIComponent(String(auxiliaryIndex2)))
                .replace(`{${"auxiliaryIndex3"}}`, encodeURIComponent(String(auxiliaryIndex3)))
                .replace(`{${"auxiliaryIndex4"}}`, encodeURIComponent(String(auxiliaryIndex4)))
                .replace(`{${"auxiliaryIndex5"}}`, encodeURIComponent(String(auxiliaryIndex5)))
                .replace(`{${"auxiliaryIndex6"}}`, encodeURIComponent(String(auxiliaryIndex6)))
                .replace(`{${"auxiliaryIndex7"}}`, encodeURIComponent(String(auxiliaryIndex7)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(querySalesOrderHeader, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateQuerySalesShipmentquerySalesShipment
         * @param {string} no 
         * @param {number} lineNo 
         * @param {string} barCode 
         * @param {string} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {string} auxiliaryIndex3 
         * @param {string} auxiliaryIndex4 
         * @param {string} auxiliaryIndex5 
         * @param {string} auxiliaryIndex6 
         * @param {MicrosoftNAVQuerySalesShipment} querySalesShipment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQuerySalesShipment: async (no: string, lineNo: number, barCode: string, auxiliaryIndex1: string, auxiliaryIndex2: string, auxiliaryIndex3: string, auxiliaryIndex4: string, auxiliaryIndex5: string, auxiliaryIndex6: string, querySalesShipment: MicrosoftNAVQuerySalesShipment, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'no' is not null or undefined
            assertParamExists('updateQuerySalesShipment', 'no', no)
            // verify required parameter 'lineNo' is not null or undefined
            assertParamExists('updateQuerySalesShipment', 'lineNo', lineNo)
            // verify required parameter 'barCode' is not null or undefined
            assertParamExists('updateQuerySalesShipment', 'barCode', barCode)
            // verify required parameter 'auxiliaryIndex1' is not null or undefined
            assertParamExists('updateQuerySalesShipment', 'auxiliaryIndex1', auxiliaryIndex1)
            // verify required parameter 'auxiliaryIndex2' is not null or undefined
            assertParamExists('updateQuerySalesShipment', 'auxiliaryIndex2', auxiliaryIndex2)
            // verify required parameter 'auxiliaryIndex3' is not null or undefined
            assertParamExists('updateQuerySalesShipment', 'auxiliaryIndex3', auxiliaryIndex3)
            // verify required parameter 'auxiliaryIndex4' is not null or undefined
            assertParamExists('updateQuerySalesShipment', 'auxiliaryIndex4', auxiliaryIndex4)
            // verify required parameter 'auxiliaryIndex5' is not null or undefined
            assertParamExists('updateQuerySalesShipment', 'auxiliaryIndex5', auxiliaryIndex5)
            // verify required parameter 'auxiliaryIndex6' is not null or undefined
            assertParamExists('updateQuerySalesShipment', 'auxiliaryIndex6', auxiliaryIndex6)
            // verify required parameter 'querySalesShipment' is not null or undefined
            assertParamExists('updateQuerySalesShipment', 'querySalesShipment', querySalesShipment)
            const localVarPath = `/querySalesShipment('{no}',{lineNo},'{barCode}','{auxiliaryIndex1}','{auxiliaryIndex2}','{auxiliaryIndex3}','{auxiliaryIndex4}','{auxiliaryIndex5}','{auxiliaryIndex6}')`
                .replace(`{${"no"}}`, encodeURIComponent(String(no)))
                .replace(`{${"lineNo"}}`, encodeURIComponent(String(lineNo)))
                .replace(`{${"barCode"}}`, encodeURIComponent(String(barCode)))
                .replace(`{${"auxiliaryIndex1"}}`, encodeURIComponent(String(auxiliaryIndex1)))
                .replace(`{${"auxiliaryIndex2"}}`, encodeURIComponent(String(auxiliaryIndex2)))
                .replace(`{${"auxiliaryIndex3"}}`, encodeURIComponent(String(auxiliaryIndex3)))
                .replace(`{${"auxiliaryIndex4"}}`, encodeURIComponent(String(auxiliaryIndex4)))
                .replace(`{${"auxiliaryIndex5"}}`, encodeURIComponent(String(auxiliaryIndex5)))
                .replace(`{${"auxiliaryIndex6"}}`, encodeURIComponent(String(auxiliaryIndex6)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(querySalesShipment, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateSalesCrMemosHeadersalesCrMemoHeader
         * @param {string} documentNo 
         * @param {MicrosoftNAVSalesCrMemoHeader} salesCrMemoHeader 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSalesCrMemoHeader: async (documentNo: string, salesCrMemoHeader: MicrosoftNAVSalesCrMemoHeader, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentNo' is not null or undefined
            assertParamExists('updateSalesCrMemoHeader', 'documentNo', documentNo)
            // verify required parameter 'salesCrMemoHeader' is not null or undefined
            assertParamExists('updateSalesCrMemoHeader', 'salesCrMemoHeader', salesCrMemoHeader)
            const localVarPath = `/salesCrMemosHeader('{documentNo}')`
                .replace(`{${"documentNo"}}`, encodeURIComponent(String(documentNo)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(salesCrMemoHeader, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateSalesInvoicesHeadersalesInvoiceHeader
         * @param {string} documentNo 
         * @param {MicrosoftNAVSalesInvoiceHeader} salesInvoiceHeader 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSalesInvoiceHeader: async (documentNo: string, salesInvoiceHeader: MicrosoftNAVSalesInvoiceHeader, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentNo' is not null or undefined
            assertParamExists('updateSalesInvoiceHeader', 'documentNo', documentNo)
            // verify required parameter 'salesInvoiceHeader' is not null or undefined
            assertParamExists('updateSalesInvoiceHeader', 'salesInvoiceHeader', salesInvoiceHeader)
            const localVarPath = `/salesInvoicesHeader('{documentNo}')`
                .replace(`{${"documentNo"}}`, encodeURIComponent(String(documentNo)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(salesInvoiceHeader, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateSalesInvoiceLinessalesInvoiceLine
         * @param {string} documentNo 
         * @param {number} lineNo 
         * @param {MicrosoftNAVSalesInvoiceLine} salesInvoiceLine 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSalesInvoiceLine: async (documentNo: string, lineNo: number, salesInvoiceLine: MicrosoftNAVSalesInvoiceLine, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentNo' is not null or undefined
            assertParamExists('updateSalesInvoiceLine', 'documentNo', documentNo)
            // verify required parameter 'lineNo' is not null or undefined
            assertParamExists('updateSalesInvoiceLine', 'lineNo', lineNo)
            // verify required parameter 'salesInvoiceLine' is not null or undefined
            assertParamExists('updateSalesInvoiceLine', 'salesInvoiceLine', salesInvoiceLine)
            const localVarPath = `/salesInvoiceLines('{documentNo}',{lineNo})`
                .replace(`{${"documentNo"}}`, encodeURIComponent(String(documentNo)))
                .replace(`{${"lineNo"}}`, encodeURIComponent(String(lineNo)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(salesInvoiceLine, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateSalesOrderHeadersalesOrderHeader
         * @param {string} documentType 
         * @param {string} documentNo 
         * @param {MicrosoftNAVSalesOrderHeader} salesOrderHeader 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSalesOrderHeader: async (documentType: string, documentNo: string, salesOrderHeader: MicrosoftNAVSalesOrderHeader, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentType' is not null or undefined
            assertParamExists('updateSalesOrderHeader', 'documentType', documentType)
            // verify required parameter 'documentNo' is not null or undefined
            assertParamExists('updateSalesOrderHeader', 'documentNo', documentNo)
            // verify required parameter 'salesOrderHeader' is not null or undefined
            assertParamExists('updateSalesOrderHeader', 'salesOrderHeader', salesOrderHeader)
            const localVarPath = `/salesOrderHeader('{documentType}','{documentNo}')`
                .replace(`{${"documentType"}}`, encodeURIComponent(String(documentType)))
                .replace(`{${"documentNo"}}`, encodeURIComponent(String(documentNo)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(salesOrderHeader, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateSalesOrderLinessalesOrderLine
         * @param {string} documentType 
         * @param {string} documentNo 
         * @param {number} lineNo 
         * @param {MicrosoftNAVSalesOrderLine} salesOrderLine 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSalesOrderLine: async (documentType: string, documentNo: string, lineNo: number, salesOrderLine: MicrosoftNAVSalesOrderLine, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentType' is not null or undefined
            assertParamExists('updateSalesOrderLine', 'documentType', documentType)
            // verify required parameter 'documentNo' is not null or undefined
            assertParamExists('updateSalesOrderLine', 'documentNo', documentNo)
            // verify required parameter 'lineNo' is not null or undefined
            assertParamExists('updateSalesOrderLine', 'lineNo', lineNo)
            // verify required parameter 'salesOrderLine' is not null or undefined
            assertParamExists('updateSalesOrderLine', 'salesOrderLine', salesOrderLine)
            const localVarPath = `/salesOrderLines('{documentType}','{documentNo}',{lineNo})`
                .replace(`{${"documentType"}}`, encodeURIComponent(String(documentType)))
                .replace(`{${"documentNo"}}`, encodeURIComponent(String(documentNo)))
                .replace(`{${"lineNo"}}`, encodeURIComponent(String(lineNo)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(salesOrderLine, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateSalesQuoteHeadersalesQuoteHeader
         * @param {string} documentType 
         * @param {string} documentNo 
         * @param {MicrosoftNAVSalesQuoteHeader} salesQuoteHeader 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSalesQuoteHeader: async (documentType: string, documentNo: string, salesQuoteHeader: MicrosoftNAVSalesQuoteHeader, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentType' is not null or undefined
            assertParamExists('updateSalesQuoteHeader', 'documentType', documentType)
            // verify required parameter 'documentNo' is not null or undefined
            assertParamExists('updateSalesQuoteHeader', 'documentNo', documentNo)
            // verify required parameter 'salesQuoteHeader' is not null or undefined
            assertParamExists('updateSalesQuoteHeader', 'salesQuoteHeader', salesQuoteHeader)
            const localVarPath = `/salesQuoteHeader('{documentType}','{documentNo}')`
                .replace(`{${"documentType"}}`, encodeURIComponent(String(documentType)))
                .replace(`{${"documentNo"}}`, encodeURIComponent(String(documentNo)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(salesQuoteHeader, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateSalesQuoteLinessalesQuoteLine
         * @param {string} documentType 
         * @param {string} documentNo 
         * @param {number} lineNo 
         * @param {MicrosoftNAVSalesQuoteLine} salesQuoteLine 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSalesQuoteLine: async (documentType: string, documentNo: string, lineNo: number, salesQuoteLine: MicrosoftNAVSalesQuoteLine, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentType' is not null or undefined
            assertParamExists('updateSalesQuoteLine', 'documentType', documentType)
            // verify required parameter 'documentNo' is not null or undefined
            assertParamExists('updateSalesQuoteLine', 'documentNo', documentNo)
            // verify required parameter 'lineNo' is not null or undefined
            assertParamExists('updateSalesQuoteLine', 'lineNo', lineNo)
            // verify required parameter 'salesQuoteLine' is not null or undefined
            assertParamExists('updateSalesQuoteLine', 'salesQuoteLine', salesQuoteLine)
            const localVarPath = `/salesQuoteLines('{documentType}','{documentNo}',{lineNo})`
                .replace(`{${"documentType"}}`, encodeURIComponent(String(documentType)))
                .replace(`{${"documentNo"}}`, encodeURIComponent(String(documentNo)))
                .replace(`{${"lineNo"}}`, encodeURIComponent(String(lineNo)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(salesQuoteLine, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateSalesShipmentsHeadersalesShipmentHeader
         * @param {string} documentNo 
         * @param {MicrosoftNAVSalesShipmentHeader} salesShipmentHeader 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSalesShipmentHeader: async (documentNo: string, salesShipmentHeader: MicrosoftNAVSalesShipmentHeader, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentNo' is not null or undefined
            assertParamExists('updateSalesShipmentHeader', 'documentNo', documentNo)
            // verify required parameter 'salesShipmentHeader' is not null or undefined
            assertParamExists('updateSalesShipmentHeader', 'salesShipmentHeader', salesShipmentHeader)
            const localVarPath = `/salesShipmentsHeader('{documentNo}')`
                .replace(`{${"documentNo"}}`, encodeURIComponent(String(documentNo)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(salesShipmentHeader, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateSalesShipmentLinessalesShipmentLine
         * @param {string} documentNo 
         * @param {number} lineNo 
         * @param {MicrosoftNAVSalesShipmentLine} salesShipmentLine 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSalesShipmentLine: async (documentNo: string, lineNo: number, salesShipmentLine: MicrosoftNAVSalesShipmentLine, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentNo' is not null or undefined
            assertParamExists('updateSalesShipmentLine', 'documentNo', documentNo)
            // verify required parameter 'lineNo' is not null or undefined
            assertParamExists('updateSalesShipmentLine', 'lineNo', lineNo)
            // verify required parameter 'salesShipmentLine' is not null or undefined
            assertParamExists('updateSalesShipmentLine', 'salesShipmentLine', salesShipmentLine)
            const localVarPath = `/salesShipmentLines('{documentNo}',{lineNo})`
                .replace(`{${"documentNo"}}`, encodeURIComponent(String(documentNo)))
                .replace(`{${"lineNo"}}`, encodeURIComponent(String(lineNo)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(salesShipmentLine, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateSalescrMemoLinessalescrMemoLine
         * @param {string} documentNo 
         * @param {number} lineNo 
         * @param {MicrosoftNAVSalescrMemoLine} salescrMemoLine 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSalescrMemoLine: async (documentNo: string, lineNo: number, salescrMemoLine: MicrosoftNAVSalescrMemoLine, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentNo' is not null or undefined
            assertParamExists('updateSalescrMemoLine', 'documentNo', documentNo)
            // verify required parameter 'lineNo' is not null or undefined
            assertParamExists('updateSalescrMemoLine', 'lineNo', lineNo)
            // verify required parameter 'salescrMemoLine' is not null or undefined
            assertParamExists('updateSalescrMemoLine', 'salescrMemoLine', salescrMemoLine)
            const localVarPath = `/salescrMemoLines('{documentNo}',{lineNo})`
                .replace(`{${"documentNo"}}`, encodeURIComponent(String(documentNo)))
                .replace(`{${"lineNo"}}`, encodeURIComponent(String(lineNo)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(salescrMemoLine, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateShiptoAddressshiptoAddress
         * @param {string} customerNo 
         * @param {string} code 
         * @param {MicrosoftNAVShiptoAddress} shiptoAddress 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateShiptoAddress: async (customerNo: string, code: string, shiptoAddress: MicrosoftNAVShiptoAddress, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerNo' is not null or undefined
            assertParamExists('updateShiptoAddress', 'customerNo', customerNo)
            // verify required parameter 'code' is not null or undefined
            assertParamExists('updateShiptoAddress', 'code', code)
            // verify required parameter 'shiptoAddress' is not null or undefined
            assertParamExists('updateShiptoAddress', 'shiptoAddress', shiptoAddress)
            const localVarPath = `/shiptoAddress('{customerNo}','{code}')`
                .replace(`{${"customerNo"}}`, encodeURIComponent(String(customerNo)))
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(shiptoAddress, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateSubscriptionssubscriptions
         * @param {string} subscriptionId 
         * @param {MicrosoftNAVSubscriptions} subscriptions 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubscriptions: async (subscriptionId: string, subscriptions: MicrosoftNAVSubscriptions, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subscriptionId' is not null or undefined
            assertParamExists('updateSubscriptions', 'subscriptionId', subscriptionId)
            // verify required parameter 'subscriptions' is not null or undefined
            assertParamExists('updateSubscriptions', 'subscriptions', subscriptions)
            const localVarPath = `/subscriptions('{subscriptionId}')`
                .replace(`{${"subscriptionId"}}`, encodeURIComponent(String(subscriptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(subscriptions, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary createCompaniescompany
         * @param {MicrosoftNAVCompany} company 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCompany(company: MicrosoftNAVCompany, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVCompany>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCompany(company, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary createItemsitem
         * @param {MicrosoftNAVItem} item 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createItem(item: MicrosoftNAVItem, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createItem(item, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary createQueryAttributesqueryAttributes
         * @param {MicrosoftNAVQueryAttributes} queryAttributes 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createQueryAttributes(queryAttributes: MicrosoftNAVQueryAttributes, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVQueryAttributes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createQueryAttributes(queryAttributes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary createQueryAttributesValuesqueryAttributesValues
         * @param {MicrosoftNAVQueryAttributesValues} queryAttributesValues 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createQueryAttributesValues(queryAttributesValues: MicrosoftNAVQueryAttributesValues, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVQueryAttributesValues>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createQueryAttributesValues(queryAttributesValues, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary createQueryCategoriesqueryCategories
         * @param {MicrosoftNAVQueryCategories} queryCategories 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createQueryCategories(queryCategories: MicrosoftNAVQueryCategories, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVQueryCategories>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createQueryCategories(queryCategories, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary createQueryCategoryAttributesqueryCategoryAttributes
         * @param {MicrosoftNAVQueryCategoryAttributes} queryCategoryAttributes 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createQueryCategoryAttributes(queryCategoryAttributes: MicrosoftNAVQueryCategoryAttributes, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVQueryCategoryAttributes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createQueryCategoryAttributes(queryCategoryAttributes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary createQueryCustomerqueryCustomer
         * @param {MicrosoftNAVQueryCustomer} queryCustomer 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createQueryCustomer(queryCustomer: MicrosoftNAVQueryCustomer, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVQueryCustomer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createQueryCustomer(queryCustomer, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary createQueryItemAttributesqueryItemAttributes
         * @param {MicrosoftNAVQueryItemAttributes} queryItemAttributes 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createQueryItemAttributes(queryItemAttributes: MicrosoftNAVQueryItemAttributes, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVQueryItemAttributes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createQueryItemAttributes(queryItemAttributes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary createQueryItemsqueryItems
         * @param {MicrosoftNAVQueryItems} queryItems 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createQueryItems(queryItems: MicrosoftNAVQueryItems, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVQueryItems>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createQueryItems(queryItems, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary createQuerySalesCrMemoquerySalesCrMemo
         * @param {MicrosoftNAVQuerySalesCrMemo} querySalesCrMemo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createQuerySalesCrMemo(querySalesCrMemo: MicrosoftNAVQuerySalesCrMemo, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVQuerySalesCrMemo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createQuerySalesCrMemo(querySalesCrMemo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary createQuerySalesInvoicequerySalesInvoice
         * @param {MicrosoftNAVQuerySalesInvoice} querySalesInvoice 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createQuerySalesInvoice(querySalesInvoice: MicrosoftNAVQuerySalesInvoice, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVQuerySalesInvoice>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createQuerySalesInvoice(querySalesInvoice, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary createQuerySalesOrderHeaderquerySalesOrderHeader
         * @param {MicrosoftNAVQuerySalesOrderHeader} querySalesOrderHeader 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createQuerySalesOrderHeader(querySalesOrderHeader: MicrosoftNAVQuerySalesOrderHeader, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVQuerySalesOrderHeader>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createQuerySalesOrderHeader(querySalesOrderHeader, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary createQuerySalesShipmentquerySalesShipment
         * @param {MicrosoftNAVQuerySalesShipment} querySalesShipment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createQuerySalesShipment(querySalesShipment: MicrosoftNAVQuerySalesShipment, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVQuerySalesShipment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createQuerySalesShipment(querySalesShipment, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary createSalesCrMemosHeadersalesCrMemoHeader
         * @param {MicrosoftNAVSalesCrMemoHeader} salesCrMemoHeader 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSalesCrMemoHeader(salesCrMemoHeader: MicrosoftNAVSalesCrMemoHeader, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVSalesCrMemoHeader>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSalesCrMemoHeader(salesCrMemoHeader, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary createSalesInvoicesHeadersalesInvoiceHeader
         * @param {MicrosoftNAVSalesInvoiceHeader} salesInvoiceHeader 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSalesInvoiceHeader(salesInvoiceHeader: MicrosoftNAVSalesInvoiceHeader, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVSalesInvoiceHeader>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSalesInvoiceHeader(salesInvoiceHeader, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary createSalesInvoiceLinessalesInvoiceLine
         * @param {MicrosoftNAVSalesInvoiceLine} salesInvoiceLine 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSalesInvoiceLine(salesInvoiceLine: MicrosoftNAVSalesInvoiceLine, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVSalesInvoiceLine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSalesInvoiceLine(salesInvoiceLine, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary createSalesOrderHeadersalesOrderHeader
         * @param {MicrosoftNAVSalesOrderHeader} salesOrderHeader 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSalesOrderHeader(salesOrderHeader: MicrosoftNAVSalesOrderHeader, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVSalesOrderHeader>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSalesOrderHeader(salesOrderHeader, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary createSalesOrderLinessalesOrderLine
         * @param {MicrosoftNAVSalesOrderLine} salesOrderLine 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSalesOrderLine(salesOrderLine: MicrosoftNAVSalesOrderLine, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVSalesOrderLine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSalesOrderLine(salesOrderLine, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary createSalesQuoteHeadersalesQuoteHeader
         * @param {MicrosoftNAVSalesQuoteHeader} salesQuoteHeader 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSalesQuoteHeader(salesQuoteHeader: MicrosoftNAVSalesQuoteHeader, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVSalesQuoteHeader>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSalesQuoteHeader(salesQuoteHeader, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary createSalesQuoteLinessalesQuoteLine
         * @param {MicrosoftNAVSalesQuoteLine} salesQuoteLine 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSalesQuoteLine(salesQuoteLine: MicrosoftNAVSalesQuoteLine, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVSalesQuoteLine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSalesQuoteLine(salesQuoteLine, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary createSalesShipmentsHeadersalesShipmentHeader
         * @param {MicrosoftNAVSalesShipmentHeader} salesShipmentHeader 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSalesShipmentHeader(salesShipmentHeader: MicrosoftNAVSalesShipmentHeader, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVSalesShipmentHeader>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSalesShipmentHeader(salesShipmentHeader, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary createSalesShipmentLinessalesShipmentLine
         * @param {MicrosoftNAVSalesShipmentLine} salesShipmentLine 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSalesShipmentLine(salesShipmentLine: MicrosoftNAVSalesShipmentLine, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVSalesShipmentLine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSalesShipmentLine(salesShipmentLine, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary createSalescrMemoLinessalescrMemoLine
         * @param {MicrosoftNAVSalescrMemoLine} salescrMemoLine 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSalescrMemoLine(salescrMemoLine: MicrosoftNAVSalescrMemoLine, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVSalescrMemoLine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSalescrMemoLine(salescrMemoLine, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary createShiptoAddressshiptoAddress
         * @param {MicrosoftNAVShiptoAddress} shiptoAddress 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createShiptoAddress(shiptoAddress: MicrosoftNAVShiptoAddress, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVShiptoAddress>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createShiptoAddress(shiptoAddress, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary createSubscriptionssubscriptions
         * @param {MicrosoftNAVSubscriptions} subscriptions 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSubscriptions(subscriptions: MicrosoftNAVSubscriptions, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVSubscriptions>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSubscriptions(subscriptions, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteCompaniescompany
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCompany(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCompany(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteItemsitem
         * @param {string} no 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteItem(no: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteItem(no, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteQueryAttributesqueryAttributes
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteQueryAttributes(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteQueryAttributes(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteQueryAttributesValuesqueryAttributesValues
         * @param {number} attributeID 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteQueryAttributesValues(attributeID: number, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteQueryAttributesValues(attributeID, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteQueryCategoriesqueryCategories
         * @param {string} code 
         * @param {number} attributeID 
         * @param {number} valueid 
         * @param {number} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {number} auxiliaryIndex3 
         * @param {number} auxiliaryIndex4 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteQueryCategories(code: string, attributeID: number, valueid: number, auxiliaryIndex1: number, auxiliaryIndex2: string, auxiliaryIndex3: number, auxiliaryIndex4: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteQueryCategories(code, attributeID, valueid, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteQueryCategoryAttributesqueryCategoryAttributes
         * @param {string} code 
         * @param {number} attributeID 
         * @param {number} valueid 
         * @param {number} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {number} auxiliaryIndex3 
         * @param {number} auxiliaryIndex4 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteQueryCategoryAttributes(code: string, attributeID: number, valueid: number, auxiliaryIndex1: number, auxiliaryIndex2: string, auxiliaryIndex3: number, auxiliaryIndex4: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteQueryCategoryAttributes(code, attributeID, valueid, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteQueryCustomerqueryCustomer
         * @param {string} customerNo 
         * @param {string} shipToCode 
         * @param {string} auxiliaryIndex1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteQueryCustomer(customerNo: string, shipToCode: string, auxiliaryIndex1: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteQueryCustomer(customerNo, shipToCode, auxiliaryIndex1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteQueryItemAttributesqueryItemAttributes
         * @param {string} no 
         * @param {string} barCode 
         * @param {number} attributeID 
         * @param {number} valueid 
         * @param {string} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {string} auxiliaryIndex3 
         * @param {string} auxiliaryIndex4 
         * @param {string} auxiliaryIndex5 
         * @param {number} auxiliaryIndex6 
         * @param {string} auxiliaryIndex7 
         * @param {number} auxiliaryIndex8 
         * @param {number} auxiliaryIndex9 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteQueryItemAttributes(no: string, barCode: string, attributeID: number, valueid: number, auxiliaryIndex1: string, auxiliaryIndex2: string, auxiliaryIndex3: string, auxiliaryIndex4: string, auxiliaryIndex5: string, auxiliaryIndex6: number, auxiliaryIndex7: string, auxiliaryIndex8: number, auxiliaryIndex9: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteQueryItemAttributes(no, barCode, attributeID, valueid, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, auxiliaryIndex5, auxiliaryIndex6, auxiliaryIndex7, auxiliaryIndex8, auxiliaryIndex9, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteQueryItemsqueryItems
         * @param {string} no 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteQueryItems(no: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteQueryItems(no, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteQuerySalesCrMemoquerySalesCrMemo
         * @param {string} no 
         * @param {number} lineNo 
         * @param {string} barCode 
         * @param {string} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {string} auxiliaryIndex3 
         * @param {string} auxiliaryIndex4 
         * @param {string} auxiliaryIndex5 
         * @param {string} auxiliaryIndex6 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteQuerySalesCrMemo(no: string, lineNo: number, barCode: string, auxiliaryIndex1: string, auxiliaryIndex2: string, auxiliaryIndex3: string, auxiliaryIndex4: string, auxiliaryIndex5: string, auxiliaryIndex6: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteQuerySalesCrMemo(no, lineNo, barCode, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, auxiliaryIndex5, auxiliaryIndex6, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteQuerySalesInvoicequerySalesInvoice
         * @param {string} no 
         * @param {number} lineNo 
         * @param {string} barCode 
         * @param {string} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {string} auxiliaryIndex3 
         * @param {string} auxiliaryIndex4 
         * @param {string} auxiliaryIndex5 
         * @param {string} auxiliaryIndex6 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteQuerySalesInvoice(no: string, lineNo: number, barCode: string, auxiliaryIndex1: string, auxiliaryIndex2: string, auxiliaryIndex3: string, auxiliaryIndex4: string, auxiliaryIndex5: string, auxiliaryIndex6: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteQuerySalesInvoice(no, lineNo, barCode, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, auxiliaryIndex5, auxiliaryIndex6, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteQuerySalesOrderHeaderquerySalesOrderHeader
         * @param {string} documentType 
         * @param {string} no 
         * @param {number} lineNo 
         * @param {string} barCode 
         * @param {string} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {string} auxiliaryIndex3 
         * @param {string} auxiliaryIndex4 
         * @param {string} auxiliaryIndex5 
         * @param {string} auxiliaryIndex6 
         * @param {string} auxiliaryIndex7 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteQuerySalesOrderHeader(documentType: string, no: string, lineNo: number, barCode: string, auxiliaryIndex1: string, auxiliaryIndex2: string, auxiliaryIndex3: string, auxiliaryIndex4: string, auxiliaryIndex5: string, auxiliaryIndex6: string, auxiliaryIndex7: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteQuerySalesOrderHeader(documentType, no, lineNo, barCode, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, auxiliaryIndex5, auxiliaryIndex6, auxiliaryIndex7, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteQuerySalesShipmentquerySalesShipment
         * @param {string} no 
         * @param {number} lineNo 
         * @param {string} barCode 
         * @param {string} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {string} auxiliaryIndex3 
         * @param {string} auxiliaryIndex4 
         * @param {string} auxiliaryIndex5 
         * @param {string} auxiliaryIndex6 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteQuerySalesShipment(no: string, lineNo: number, barCode: string, auxiliaryIndex1: string, auxiliaryIndex2: string, auxiliaryIndex3: string, auxiliaryIndex4: string, auxiliaryIndex5: string, auxiliaryIndex6: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteQuerySalesShipment(no, lineNo, barCode, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, auxiliaryIndex5, auxiliaryIndex6, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteSalesCrMemosHeadersalesCrMemoHeader
         * @param {string} documentNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSalesCrMemoHeader(documentNo: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSalesCrMemoHeader(documentNo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteSalesInvoicesHeadersalesInvoiceHeader
         * @param {string} documentNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSalesInvoiceHeader(documentNo: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSalesInvoiceHeader(documentNo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteSalesInvoiceLinessalesInvoiceLine
         * @param {string} documentNo 
         * @param {number} lineNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSalesInvoiceLine(documentNo: string, lineNo: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSalesInvoiceLine(documentNo, lineNo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteSalesOrderHeadersalesOrderHeader
         * @param {string} documentType 
         * @param {string} documentNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSalesOrderHeader(documentType: string, documentNo: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSalesOrderHeader(documentType, documentNo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteSalesOrderLinessalesOrderLine
         * @param {string} documentType 
         * @param {string} documentNo 
         * @param {number} lineNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSalesOrderLine(documentType: string, documentNo: string, lineNo: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSalesOrderLine(documentType, documentNo, lineNo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteSalesQuoteHeadersalesQuoteHeader
         * @param {string} documentType 
         * @param {string} documentNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSalesQuoteHeader(documentType: string, documentNo: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSalesQuoteHeader(documentType, documentNo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteSalesQuoteLinessalesQuoteLine
         * @param {string} documentType 
         * @param {string} documentNo 
         * @param {number} lineNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSalesQuoteLine(documentType: string, documentNo: string, lineNo: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSalesQuoteLine(documentType, documentNo, lineNo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteSalesShipmentsHeadersalesShipmentHeader
         * @param {string} documentNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSalesShipmentHeader(documentNo: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSalesShipmentHeader(documentNo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteSalesShipmentLinessalesShipmentLine
         * @param {string} documentNo 
         * @param {number} lineNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSalesShipmentLine(documentNo: string, lineNo: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSalesShipmentLine(documentNo, lineNo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteSalescrMemoLinessalescrMemoLine
         * @param {string} documentNo 
         * @param {number} lineNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSalescrMemoLine(documentNo: string, lineNo: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSalescrMemoLine(documentNo, lineNo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteShiptoAddressshiptoAddress
         * @param {string} customerNo 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteShiptoAddress(customerNo: string, code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteShiptoAddress(customerNo, code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteSubscriptionssubscriptions
         * @param {string} subscriptionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSubscriptions(subscriptionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSubscriptions(subscriptionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getCompanies
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompanies($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20023>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompanies($filter, $top, $skip, $orderby, $expand, $count, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getCompaniescompanyById
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompanyById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVCompany>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompanyById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getItemsitemById
         * @param {string} no 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemById(no: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItemById(no, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getItems
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItems($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2009>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItems($filter, $top, $skip, $orderby, $expand, $count, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getQueryAttributes
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQueryAttributes($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20018>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQueryAttributes($filter, $top, $skip, $orderby, $expand, $count, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getQueryAttributesqueryAttributesById
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQueryAttributesById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVQueryAttributes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQueryAttributesById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getQueryAttributesValues
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQueryAttributesValues($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20019>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQueryAttributesValues($filter, $top, $skip, $orderby, $expand, $count, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getQueryAttributesValuesqueryAttributesValuesById
         * @param {number} attributeID 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQueryAttributesValuesById(attributeID: number, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVQueryAttributesValues>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQueryAttributesValuesById(attributeID, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getQueryCategories
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQueryCategories($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20025>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQueryCategories($filter, $top, $skip, $orderby, $expand, $count, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getQueryCategoriesqueryCategoriesById
         * @param {string} code 
         * @param {number} attributeID 
         * @param {number} valueid 
         * @param {number} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {number} auxiliaryIndex3 
         * @param {number} auxiliaryIndex4 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQueryCategoriesById(code: string, attributeID: number, valueid: number, auxiliaryIndex1: number, auxiliaryIndex2: string, auxiliaryIndex3: number, auxiliaryIndex4: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVQueryCategories>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQueryCategoriesById(code, attributeID, valueid, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getQueryCategoryAttributes
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQueryCategoryAttributes($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20021>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQueryCategoryAttributes($filter, $top, $skip, $orderby, $expand, $count, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getQueryCategoryAttributesqueryCategoryAttributesById
         * @param {string} code 
         * @param {number} attributeID 
         * @param {number} valueid 
         * @param {number} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {number} auxiliaryIndex3 
         * @param {number} auxiliaryIndex4 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQueryCategoryAttributesById(code: string, attributeID: number, valueid: number, auxiliaryIndex1: number, auxiliaryIndex2: string, auxiliaryIndex3: number, auxiliaryIndex4: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVQueryCategoryAttributes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQueryCategoryAttributesById(code, attributeID, valueid, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getQueryCustomer
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQueryCustomer($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20017>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQueryCustomer($filter, $top, $skip, $orderby, $expand, $count, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getQueryCustomerqueryCustomerById
         * @param {string} customerNo 
         * @param {string} shipToCode 
         * @param {string} auxiliaryIndex1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQueryCustomerById(customerNo: string, shipToCode: string, auxiliaryIndex1: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVQueryCustomer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQueryCustomerById(customerNo, shipToCode, auxiliaryIndex1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getQueryItemAttributes
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQueryItemAttributes($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20020>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQueryItemAttributes($filter, $top, $skip, $orderby, $expand, $count, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getQueryItemAttributesqueryItemAttributesById
         * @param {string} no 
         * @param {string} barCode 
         * @param {number} attributeID 
         * @param {number} valueid 
         * @param {string} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {string} auxiliaryIndex3 
         * @param {string} auxiliaryIndex4 
         * @param {string} auxiliaryIndex5 
         * @param {number} auxiliaryIndex6 
         * @param {string} auxiliaryIndex7 
         * @param {number} auxiliaryIndex8 
         * @param {number} auxiliaryIndex9 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQueryItemAttributesById(no: string, barCode: string, attributeID: number, valueid: number, auxiliaryIndex1: string, auxiliaryIndex2: string, auxiliaryIndex3: string, auxiliaryIndex4: string, auxiliaryIndex5: string, auxiliaryIndex6: number, auxiliaryIndex7: string, auxiliaryIndex8: number, auxiliaryIndex9: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVQueryItemAttributes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQueryItemAttributesById(no, barCode, attributeID, valueid, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, auxiliaryIndex5, auxiliaryIndex6, auxiliaryIndex7, auxiliaryIndex8, auxiliaryIndex9, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getQueryItems
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQueryItems($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20022>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQueryItems($filter, $top, $skip, $orderby, $expand, $count, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getQueryItemsqueryItemsById
         * @param {string} no 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQueryItemsById(no: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVQueryItems>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQueryItemsById(no, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getQuerySalesCrMemo
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQuerySalesCrMemo($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20015>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQuerySalesCrMemo($filter, $top, $skip, $orderby, $expand, $count, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getQuerySalesCrMemoquerySalesCrMemoById
         * @param {string} no 
         * @param {number} lineNo 
         * @param {string} barCode 
         * @param {string} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {string} auxiliaryIndex3 
         * @param {string} auxiliaryIndex4 
         * @param {string} auxiliaryIndex5 
         * @param {string} auxiliaryIndex6 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQuerySalesCrMemoById(no: string, lineNo: number, barCode: string, auxiliaryIndex1: string, auxiliaryIndex2: string, auxiliaryIndex3: string, auxiliaryIndex4: string, auxiliaryIndex5: string, auxiliaryIndex6: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVQuerySalesCrMemo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQuerySalesCrMemoById(no, lineNo, barCode, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, auxiliaryIndex5, auxiliaryIndex6, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getQuerySalesInvoice
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQuerySalesInvoice($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20014>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQuerySalesInvoice($filter, $top, $skip, $orderby, $expand, $count, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getQuerySalesInvoicequerySalesInvoiceById
         * @param {string} no 
         * @param {number} lineNo 
         * @param {string} barCode 
         * @param {string} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {string} auxiliaryIndex3 
         * @param {string} auxiliaryIndex4 
         * @param {string} auxiliaryIndex5 
         * @param {string} auxiliaryIndex6 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQuerySalesInvoiceById(no: string, lineNo: number, barCode: string, auxiliaryIndex1: string, auxiliaryIndex2: string, auxiliaryIndex3: string, auxiliaryIndex4: string, auxiliaryIndex5: string, auxiliaryIndex6: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVQuerySalesInvoice>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQuerySalesInvoiceById(no, lineNo, barCode, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, auxiliaryIndex5, auxiliaryIndex6, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getQuerySalesOrderHeader
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQuerySalesOrderHeader($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20013>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQuerySalesOrderHeader($filter, $top, $skip, $orderby, $expand, $count, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getQuerySalesOrderHeaderquerySalesOrderHeaderById
         * @param {string} documentType 
         * @param {string} no 
         * @param {number} lineNo 
         * @param {string} barCode 
         * @param {string} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {string} auxiliaryIndex3 
         * @param {string} auxiliaryIndex4 
         * @param {string} auxiliaryIndex5 
         * @param {string} auxiliaryIndex6 
         * @param {string} auxiliaryIndex7 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQuerySalesOrderHeaderById(documentType: string, no: string, lineNo: number, barCode: string, auxiliaryIndex1: string, auxiliaryIndex2: string, auxiliaryIndex3: string, auxiliaryIndex4: string, auxiliaryIndex5: string, auxiliaryIndex6: string, auxiliaryIndex7: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVQuerySalesOrderHeader>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQuerySalesOrderHeaderById(documentType, no, lineNo, barCode, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, auxiliaryIndex5, auxiliaryIndex6, auxiliaryIndex7, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getQuerySalesShipment
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQuerySalesShipment($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20016>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQuerySalesShipment($filter, $top, $skip, $orderby, $expand, $count, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getQuerySalesShipmentquerySalesShipmentById
         * @param {string} no 
         * @param {number} lineNo 
         * @param {string} barCode 
         * @param {string} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {string} auxiliaryIndex3 
         * @param {string} auxiliaryIndex4 
         * @param {string} auxiliaryIndex5 
         * @param {string} auxiliaryIndex6 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQuerySalesShipmentById(no: string, lineNo: number, barCode: string, auxiliaryIndex1: string, auxiliaryIndex2: string, auxiliaryIndex3: string, auxiliaryIndex4: string, auxiliaryIndex5: string, auxiliaryIndex6: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVQuerySalesShipment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQuerySalesShipmentById(no, lineNo, barCode, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, auxiliaryIndex5, auxiliaryIndex6, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getSalesCrMemosHeadersalesCrMemoHeaderById
         * @param {string} documentNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSalesCrMemoHeaderById(documentNo: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVSalesCrMemoHeader>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSalesCrMemoHeaderById(documentNo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getSalesCrMemosHeader
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSalesCrMemosHeader($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2007>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSalesCrMemosHeader($filter, $top, $skip, $orderby, $expand, $count, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getSalesInvoicesHeadersalesInvoiceHeaderById
         * @param {string} documentNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSalesInvoiceHeaderById(documentNo: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVSalesInvoiceHeader>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSalesInvoiceHeaderById(documentNo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getSalesInvoiceLinessalesInvoiceLineById
         * @param {string} documentNo 
         * @param {number} lineNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSalesInvoiceLineById(documentNo: string, lineNo: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVSalesInvoiceLine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSalesInvoiceLineById(documentNo, lineNo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getSalesInvoiceLines
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSalesInvoiceLines($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2004>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSalesInvoiceLines($filter, $top, $skip, $orderby, $expand, $count, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getSalesInvoicesHeader
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSalesInvoicesHeader($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2003>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSalesInvoicesHeader($filter, $top, $skip, $orderby, $expand, $count, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getSalesOrderHeader
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSalesOrderHeader($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSalesOrderHeader($filter, $top, $skip, $orderby, $expand, $count, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getSalesOrderHeadersalesOrderHeaderById
         * @param {string} documentType 
         * @param {string} documentNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSalesOrderHeaderById(documentType: string, documentNo: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVSalesOrderHeader>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSalesOrderHeaderById(documentType, documentNo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getSalesOrderLinessalesOrderLineById
         * @param {string} documentType 
         * @param {string} documentNo 
         * @param {number} lineNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSalesOrderLineById(documentType: string, documentNo: string, lineNo: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVSalesOrderLine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSalesOrderLineById(documentType, documentNo, lineNo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getSalesOrderLines
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSalesOrderLines($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSalesOrderLines($filter, $top, $skip, $orderby, $expand, $count, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getSalesQuoteHeader
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSalesQuoteHeader($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20011>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSalesQuoteHeader($filter, $top, $skip, $orderby, $expand, $count, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getSalesQuoteHeadersalesQuoteHeaderById
         * @param {string} documentType 
         * @param {string} documentNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSalesQuoteHeaderById(documentType: string, documentNo: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVSalesQuoteHeader>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSalesQuoteHeaderById(documentType, documentNo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getSalesQuoteLinessalesQuoteLineById
         * @param {string} documentType 
         * @param {string} documentNo 
         * @param {number} lineNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSalesQuoteLineById(documentType: string, documentNo: string, lineNo: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVSalesQuoteLine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSalesQuoteLineById(documentType, documentNo, lineNo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getSalesQuoteLines
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSalesQuoteLines($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20012>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSalesQuoteLines($filter, $top, $skip, $orderby, $expand, $count, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getSalesShipmentsHeadersalesShipmentHeaderById
         * @param {string} documentNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSalesShipmentHeaderById(documentNo: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVSalesShipmentHeader>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSalesShipmentHeaderById(documentNo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getSalesShipmentLinessalesShipmentLineById
         * @param {string} documentNo 
         * @param {number} lineNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSalesShipmentLineById(documentNo: string, lineNo: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVSalesShipmentLine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSalesShipmentLineById(documentNo, lineNo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getSalesShipmentLines
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSalesShipmentLines($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2006>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSalesShipmentLines($filter, $top, $skip, $orderby, $expand, $count, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getSalesShipmentsHeader
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSalesShipmentsHeader($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2005>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSalesShipmentsHeader($filter, $top, $skip, $orderby, $expand, $count, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getSalescrMemoLinessalescrMemoLineById
         * @param {string} documentNo 
         * @param {number} lineNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSalescrMemoLineById(documentNo: string, lineNo: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVSalescrMemoLine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSalescrMemoLineById(documentNo, lineNo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getSalescrMemoLines
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSalescrMemoLines($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2008>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSalescrMemoLines($filter, $top, $skip, $orderby, $expand, $count, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getShiptoAddress
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShiptoAddress($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20010>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getShiptoAddress($filter, $top, $skip, $orderby, $expand, $count, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getShiptoAddressshiptoAddressById
         * @param {string} customerNo 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShiptoAddressById(customerNo: string, code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVShiptoAddress>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getShiptoAddressById(customerNo, code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getSubscriptions
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubscriptions($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20024>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubscriptions($filter, $top, $skip, $orderby, $expand, $count, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getSubscriptionssubscriptionsById
         * @param {string} subscriptionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubscriptionsById(subscriptionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVSubscriptions>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubscriptionsById(subscriptionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary InsertItem
         * @param {MicrosoftNAVInsertItem} item 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insertItem(item: MicrosoftNAVInsertItem, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVInsertItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insertItem(item, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary NewEANCode
         * @param {MicrosoftNAVNewEANCode} item 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newEANCode(item: MicrosoftNAVNewEANCode, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.newEANCode(item, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateCompaniescompany
         * @param {string} id 
         * @param {MicrosoftNAVCompany} company 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCompany(id: string, company: MicrosoftNAVCompany, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVCompany>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCompany(id, company, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateItemsitem
         * @param {string} no 
         * @param {MicrosoftNAVItem} item 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateItem(no: string, item: MicrosoftNAVItem, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateItem(no, item, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateQueryAttributesqueryAttributes
         * @param {number} id 
         * @param {MicrosoftNAVQueryAttributes} queryAttributes 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateQueryAttributes(id: number, queryAttributes: MicrosoftNAVQueryAttributes, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVQueryAttributes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateQueryAttributes(id, queryAttributes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateQueryAttributesValuesqueryAttributesValues
         * @param {number} attributeID 
         * @param {number} id 
         * @param {MicrosoftNAVQueryAttributesValues} queryAttributesValues 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateQueryAttributesValues(attributeID: number, id: number, queryAttributesValues: MicrosoftNAVQueryAttributesValues, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVQueryAttributesValues>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateQueryAttributesValues(attributeID, id, queryAttributesValues, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateQueryCategoriesqueryCategories
         * @param {string} code 
         * @param {number} attributeID 
         * @param {number} valueid 
         * @param {number} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {number} auxiliaryIndex3 
         * @param {number} auxiliaryIndex4 
         * @param {MicrosoftNAVQueryCategories} queryCategories 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateQueryCategories(code: string, attributeID: number, valueid: number, auxiliaryIndex1: number, auxiliaryIndex2: string, auxiliaryIndex3: number, auxiliaryIndex4: number, queryCategories: MicrosoftNAVQueryCategories, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVQueryCategories>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateQueryCategories(code, attributeID, valueid, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, queryCategories, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateQueryCategoryAttributesqueryCategoryAttributes
         * @param {string} code 
         * @param {number} attributeID 
         * @param {number} valueid 
         * @param {number} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {number} auxiliaryIndex3 
         * @param {number} auxiliaryIndex4 
         * @param {MicrosoftNAVQueryCategoryAttributes} queryCategoryAttributes 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateQueryCategoryAttributes(code: string, attributeID: number, valueid: number, auxiliaryIndex1: number, auxiliaryIndex2: string, auxiliaryIndex3: number, auxiliaryIndex4: number, queryCategoryAttributes: MicrosoftNAVQueryCategoryAttributes, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVQueryCategoryAttributes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateQueryCategoryAttributes(code, attributeID, valueid, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, queryCategoryAttributes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateQueryCustomerqueryCustomer
         * @param {string} customerNo 
         * @param {string} shipToCode 
         * @param {string} auxiliaryIndex1 
         * @param {MicrosoftNAVQueryCustomer} queryCustomer 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateQueryCustomer(customerNo: string, shipToCode: string, auxiliaryIndex1: string, queryCustomer: MicrosoftNAVQueryCustomer, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVQueryCustomer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateQueryCustomer(customerNo, shipToCode, auxiliaryIndex1, queryCustomer, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateQueryItemAttributesqueryItemAttributes
         * @param {string} no 
         * @param {string} barCode 
         * @param {number} attributeID 
         * @param {number} valueid 
         * @param {string} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {string} auxiliaryIndex3 
         * @param {string} auxiliaryIndex4 
         * @param {string} auxiliaryIndex5 
         * @param {number} auxiliaryIndex6 
         * @param {string} auxiliaryIndex7 
         * @param {number} auxiliaryIndex8 
         * @param {number} auxiliaryIndex9 
         * @param {MicrosoftNAVQueryItemAttributes} queryItemAttributes 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateQueryItemAttributes(no: string, barCode: string, attributeID: number, valueid: number, auxiliaryIndex1: string, auxiliaryIndex2: string, auxiliaryIndex3: string, auxiliaryIndex4: string, auxiliaryIndex5: string, auxiliaryIndex6: number, auxiliaryIndex7: string, auxiliaryIndex8: number, auxiliaryIndex9: number, queryItemAttributes: MicrosoftNAVQueryItemAttributes, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVQueryItemAttributes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateQueryItemAttributes(no, barCode, attributeID, valueid, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, auxiliaryIndex5, auxiliaryIndex6, auxiliaryIndex7, auxiliaryIndex8, auxiliaryIndex9, queryItemAttributes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateQueryItemsqueryItems
         * @param {string} no 
         * @param {MicrosoftNAVQueryItems} queryItems 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateQueryItems(no: string, queryItems: MicrosoftNAVQueryItems, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVQueryItems>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateQueryItems(no, queryItems, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateQuerySalesCrMemoquerySalesCrMemo
         * @param {string} no 
         * @param {number} lineNo 
         * @param {string} barCode 
         * @param {string} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {string} auxiliaryIndex3 
         * @param {string} auxiliaryIndex4 
         * @param {string} auxiliaryIndex5 
         * @param {string} auxiliaryIndex6 
         * @param {MicrosoftNAVQuerySalesCrMemo} querySalesCrMemo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateQuerySalesCrMemo(no: string, lineNo: number, barCode: string, auxiliaryIndex1: string, auxiliaryIndex2: string, auxiliaryIndex3: string, auxiliaryIndex4: string, auxiliaryIndex5: string, auxiliaryIndex6: string, querySalesCrMemo: MicrosoftNAVQuerySalesCrMemo, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVQuerySalesCrMemo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateQuerySalesCrMemo(no, lineNo, barCode, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, auxiliaryIndex5, auxiliaryIndex6, querySalesCrMemo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateQuerySalesInvoicequerySalesInvoice
         * @param {string} no 
         * @param {number} lineNo 
         * @param {string} barCode 
         * @param {string} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {string} auxiliaryIndex3 
         * @param {string} auxiliaryIndex4 
         * @param {string} auxiliaryIndex5 
         * @param {string} auxiliaryIndex6 
         * @param {MicrosoftNAVQuerySalesInvoice} querySalesInvoice 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateQuerySalesInvoice(no: string, lineNo: number, barCode: string, auxiliaryIndex1: string, auxiliaryIndex2: string, auxiliaryIndex3: string, auxiliaryIndex4: string, auxiliaryIndex5: string, auxiliaryIndex6: string, querySalesInvoice: MicrosoftNAVQuerySalesInvoice, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVQuerySalesInvoice>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateQuerySalesInvoice(no, lineNo, barCode, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, auxiliaryIndex5, auxiliaryIndex6, querySalesInvoice, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateQuerySalesOrderHeaderquerySalesOrderHeader
         * @param {string} documentType 
         * @param {string} no 
         * @param {number} lineNo 
         * @param {string} barCode 
         * @param {string} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {string} auxiliaryIndex3 
         * @param {string} auxiliaryIndex4 
         * @param {string} auxiliaryIndex5 
         * @param {string} auxiliaryIndex6 
         * @param {string} auxiliaryIndex7 
         * @param {MicrosoftNAVQuerySalesOrderHeader} querySalesOrderHeader 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateQuerySalesOrderHeader(documentType: string, no: string, lineNo: number, barCode: string, auxiliaryIndex1: string, auxiliaryIndex2: string, auxiliaryIndex3: string, auxiliaryIndex4: string, auxiliaryIndex5: string, auxiliaryIndex6: string, auxiliaryIndex7: string, querySalesOrderHeader: MicrosoftNAVQuerySalesOrderHeader, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVQuerySalesOrderHeader>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateQuerySalesOrderHeader(documentType, no, lineNo, barCode, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, auxiliaryIndex5, auxiliaryIndex6, auxiliaryIndex7, querySalesOrderHeader, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateQuerySalesShipmentquerySalesShipment
         * @param {string} no 
         * @param {number} lineNo 
         * @param {string} barCode 
         * @param {string} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {string} auxiliaryIndex3 
         * @param {string} auxiliaryIndex4 
         * @param {string} auxiliaryIndex5 
         * @param {string} auxiliaryIndex6 
         * @param {MicrosoftNAVQuerySalesShipment} querySalesShipment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateQuerySalesShipment(no: string, lineNo: number, barCode: string, auxiliaryIndex1: string, auxiliaryIndex2: string, auxiliaryIndex3: string, auxiliaryIndex4: string, auxiliaryIndex5: string, auxiliaryIndex6: string, querySalesShipment: MicrosoftNAVQuerySalesShipment, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVQuerySalesShipment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateQuerySalesShipment(no, lineNo, barCode, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, auxiliaryIndex5, auxiliaryIndex6, querySalesShipment, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateSalesCrMemosHeadersalesCrMemoHeader
         * @param {string} documentNo 
         * @param {MicrosoftNAVSalesCrMemoHeader} salesCrMemoHeader 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSalesCrMemoHeader(documentNo: string, salesCrMemoHeader: MicrosoftNAVSalesCrMemoHeader, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVSalesCrMemoHeader>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSalesCrMemoHeader(documentNo, salesCrMemoHeader, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateSalesInvoicesHeadersalesInvoiceHeader
         * @param {string} documentNo 
         * @param {MicrosoftNAVSalesInvoiceHeader} salesInvoiceHeader 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSalesInvoiceHeader(documentNo: string, salesInvoiceHeader: MicrosoftNAVSalesInvoiceHeader, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVSalesInvoiceHeader>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSalesInvoiceHeader(documentNo, salesInvoiceHeader, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateSalesInvoiceLinessalesInvoiceLine
         * @param {string} documentNo 
         * @param {number} lineNo 
         * @param {MicrosoftNAVSalesInvoiceLine} salesInvoiceLine 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSalesInvoiceLine(documentNo: string, lineNo: number, salesInvoiceLine: MicrosoftNAVSalesInvoiceLine, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVSalesInvoiceLine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSalesInvoiceLine(documentNo, lineNo, salesInvoiceLine, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateSalesOrderHeadersalesOrderHeader
         * @param {string} documentType 
         * @param {string} documentNo 
         * @param {MicrosoftNAVSalesOrderHeader} salesOrderHeader 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSalesOrderHeader(documentType: string, documentNo: string, salesOrderHeader: MicrosoftNAVSalesOrderHeader, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVSalesOrderHeader>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSalesOrderHeader(documentType, documentNo, salesOrderHeader, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateSalesOrderLinessalesOrderLine
         * @param {string} documentType 
         * @param {string} documentNo 
         * @param {number} lineNo 
         * @param {MicrosoftNAVSalesOrderLine} salesOrderLine 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSalesOrderLine(documentType: string, documentNo: string, lineNo: number, salesOrderLine: MicrosoftNAVSalesOrderLine, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVSalesOrderLine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSalesOrderLine(documentType, documentNo, lineNo, salesOrderLine, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateSalesQuoteHeadersalesQuoteHeader
         * @param {string} documentType 
         * @param {string} documentNo 
         * @param {MicrosoftNAVSalesQuoteHeader} salesQuoteHeader 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSalesQuoteHeader(documentType: string, documentNo: string, salesQuoteHeader: MicrosoftNAVSalesQuoteHeader, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVSalesQuoteHeader>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSalesQuoteHeader(documentType, documentNo, salesQuoteHeader, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateSalesQuoteLinessalesQuoteLine
         * @param {string} documentType 
         * @param {string} documentNo 
         * @param {number} lineNo 
         * @param {MicrosoftNAVSalesQuoteLine} salesQuoteLine 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSalesQuoteLine(documentType: string, documentNo: string, lineNo: number, salesQuoteLine: MicrosoftNAVSalesQuoteLine, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVSalesQuoteLine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSalesQuoteLine(documentType, documentNo, lineNo, salesQuoteLine, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateSalesShipmentsHeadersalesShipmentHeader
         * @param {string} documentNo 
         * @param {MicrosoftNAVSalesShipmentHeader} salesShipmentHeader 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSalesShipmentHeader(documentNo: string, salesShipmentHeader: MicrosoftNAVSalesShipmentHeader, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVSalesShipmentHeader>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSalesShipmentHeader(documentNo, salesShipmentHeader, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateSalesShipmentLinessalesShipmentLine
         * @param {string} documentNo 
         * @param {number} lineNo 
         * @param {MicrosoftNAVSalesShipmentLine} salesShipmentLine 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSalesShipmentLine(documentNo: string, lineNo: number, salesShipmentLine: MicrosoftNAVSalesShipmentLine, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVSalesShipmentLine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSalesShipmentLine(documentNo, lineNo, salesShipmentLine, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateSalescrMemoLinessalescrMemoLine
         * @param {string} documentNo 
         * @param {number} lineNo 
         * @param {MicrosoftNAVSalescrMemoLine} salescrMemoLine 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSalescrMemoLine(documentNo: string, lineNo: number, salescrMemoLine: MicrosoftNAVSalescrMemoLine, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVSalescrMemoLine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSalescrMemoLine(documentNo, lineNo, salescrMemoLine, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateShiptoAddressshiptoAddress
         * @param {string} customerNo 
         * @param {string} code 
         * @param {MicrosoftNAVShiptoAddress} shiptoAddress 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateShiptoAddress(customerNo: string, code: string, shiptoAddress: MicrosoftNAVShiptoAddress, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVShiptoAddress>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateShiptoAddress(customerNo, code, shiptoAddress, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateSubscriptionssubscriptions
         * @param {string} subscriptionId 
         * @param {MicrosoftNAVSubscriptions} subscriptions 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSubscriptions(subscriptionId: string, subscriptions: MicrosoftNAVSubscriptions, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicrosoftNAVSubscriptions>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSubscriptions(subscriptionId, subscriptions, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary createCompaniescompany
         * @param {MicrosoftNAVCompany} company 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCompany(company: MicrosoftNAVCompany, options?: any): AxiosPromise<MicrosoftNAVCompany> {
            return localVarFp.createCompany(company, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary createItemsitem
         * @param {MicrosoftNAVItem} item 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createItem(item: MicrosoftNAVItem, options?: any): AxiosPromise<MicrosoftNAVItem> {
            return localVarFp.createItem(item, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary createQueryAttributesqueryAttributes
         * @param {MicrosoftNAVQueryAttributes} queryAttributes 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQueryAttributes(queryAttributes: MicrosoftNAVQueryAttributes, options?: any): AxiosPromise<MicrosoftNAVQueryAttributes> {
            return localVarFp.createQueryAttributes(queryAttributes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary createQueryAttributesValuesqueryAttributesValues
         * @param {MicrosoftNAVQueryAttributesValues} queryAttributesValues 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQueryAttributesValues(queryAttributesValues: MicrosoftNAVQueryAttributesValues, options?: any): AxiosPromise<MicrosoftNAVQueryAttributesValues> {
            return localVarFp.createQueryAttributesValues(queryAttributesValues, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary createQueryCategoriesqueryCategories
         * @param {MicrosoftNAVQueryCategories} queryCategories 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQueryCategories(queryCategories: MicrosoftNAVQueryCategories, options?: any): AxiosPromise<MicrosoftNAVQueryCategories> {
            return localVarFp.createQueryCategories(queryCategories, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary createQueryCategoryAttributesqueryCategoryAttributes
         * @param {MicrosoftNAVQueryCategoryAttributes} queryCategoryAttributes 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQueryCategoryAttributes(queryCategoryAttributes: MicrosoftNAVQueryCategoryAttributes, options?: any): AxiosPromise<MicrosoftNAVQueryCategoryAttributes> {
            return localVarFp.createQueryCategoryAttributes(queryCategoryAttributes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary createQueryCustomerqueryCustomer
         * @param {MicrosoftNAVQueryCustomer} queryCustomer 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQueryCustomer(queryCustomer: MicrosoftNAVQueryCustomer, options?: any): AxiosPromise<MicrosoftNAVQueryCustomer> {
            return localVarFp.createQueryCustomer(queryCustomer, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary createQueryItemAttributesqueryItemAttributes
         * @param {MicrosoftNAVQueryItemAttributes} queryItemAttributes 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQueryItemAttributes(queryItemAttributes: MicrosoftNAVQueryItemAttributes, options?: any): AxiosPromise<MicrosoftNAVQueryItemAttributes> {
            return localVarFp.createQueryItemAttributes(queryItemAttributes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary createQueryItemsqueryItems
         * @param {MicrosoftNAVQueryItems} queryItems 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQueryItems(queryItems: MicrosoftNAVQueryItems, options?: any): AxiosPromise<MicrosoftNAVQueryItems> {
            return localVarFp.createQueryItems(queryItems, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary createQuerySalesCrMemoquerySalesCrMemo
         * @param {MicrosoftNAVQuerySalesCrMemo} querySalesCrMemo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQuerySalesCrMemo(querySalesCrMemo: MicrosoftNAVQuerySalesCrMemo, options?: any): AxiosPromise<MicrosoftNAVQuerySalesCrMemo> {
            return localVarFp.createQuerySalesCrMemo(querySalesCrMemo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary createQuerySalesInvoicequerySalesInvoice
         * @param {MicrosoftNAVQuerySalesInvoice} querySalesInvoice 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQuerySalesInvoice(querySalesInvoice: MicrosoftNAVQuerySalesInvoice, options?: any): AxiosPromise<MicrosoftNAVQuerySalesInvoice> {
            return localVarFp.createQuerySalesInvoice(querySalesInvoice, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary createQuerySalesOrderHeaderquerySalesOrderHeader
         * @param {MicrosoftNAVQuerySalesOrderHeader} querySalesOrderHeader 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQuerySalesOrderHeader(querySalesOrderHeader: MicrosoftNAVQuerySalesOrderHeader, options?: any): AxiosPromise<MicrosoftNAVQuerySalesOrderHeader> {
            return localVarFp.createQuerySalesOrderHeader(querySalesOrderHeader, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary createQuerySalesShipmentquerySalesShipment
         * @param {MicrosoftNAVQuerySalesShipment} querySalesShipment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQuerySalesShipment(querySalesShipment: MicrosoftNAVQuerySalesShipment, options?: any): AxiosPromise<MicrosoftNAVQuerySalesShipment> {
            return localVarFp.createQuerySalesShipment(querySalesShipment, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary createSalesCrMemosHeadersalesCrMemoHeader
         * @param {MicrosoftNAVSalesCrMemoHeader} salesCrMemoHeader 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSalesCrMemoHeader(salesCrMemoHeader: MicrosoftNAVSalesCrMemoHeader, options?: any): AxiosPromise<MicrosoftNAVSalesCrMemoHeader> {
            return localVarFp.createSalesCrMemoHeader(salesCrMemoHeader, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary createSalesInvoicesHeadersalesInvoiceHeader
         * @param {MicrosoftNAVSalesInvoiceHeader} salesInvoiceHeader 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSalesInvoiceHeader(salesInvoiceHeader: MicrosoftNAVSalesInvoiceHeader, options?: any): AxiosPromise<MicrosoftNAVSalesInvoiceHeader> {
            return localVarFp.createSalesInvoiceHeader(salesInvoiceHeader, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary createSalesInvoiceLinessalesInvoiceLine
         * @param {MicrosoftNAVSalesInvoiceLine} salesInvoiceLine 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSalesInvoiceLine(salesInvoiceLine: MicrosoftNAVSalesInvoiceLine, options?: any): AxiosPromise<MicrosoftNAVSalesInvoiceLine> {
            return localVarFp.createSalesInvoiceLine(salesInvoiceLine, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary createSalesOrderHeadersalesOrderHeader
         * @param {MicrosoftNAVSalesOrderHeader} salesOrderHeader 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSalesOrderHeader(salesOrderHeader: MicrosoftNAVSalesOrderHeader, options?: any): AxiosPromise<MicrosoftNAVSalesOrderHeader> {
            return localVarFp.createSalesOrderHeader(salesOrderHeader, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary createSalesOrderLinessalesOrderLine
         * @param {MicrosoftNAVSalesOrderLine} salesOrderLine 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSalesOrderLine(salesOrderLine: MicrosoftNAVSalesOrderLine, options?: any): AxiosPromise<MicrosoftNAVSalesOrderLine> {
            return localVarFp.createSalesOrderLine(salesOrderLine, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary createSalesQuoteHeadersalesQuoteHeader
         * @param {MicrosoftNAVSalesQuoteHeader} salesQuoteHeader 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSalesQuoteHeader(salesQuoteHeader: MicrosoftNAVSalesQuoteHeader, options?: any): AxiosPromise<MicrosoftNAVSalesQuoteHeader> {
            return localVarFp.createSalesQuoteHeader(salesQuoteHeader, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary createSalesQuoteLinessalesQuoteLine
         * @param {MicrosoftNAVSalesQuoteLine} salesQuoteLine 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSalesQuoteLine(salesQuoteLine: MicrosoftNAVSalesQuoteLine, options?: any): AxiosPromise<MicrosoftNAVSalesQuoteLine> {
            return localVarFp.createSalesQuoteLine(salesQuoteLine, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary createSalesShipmentsHeadersalesShipmentHeader
         * @param {MicrosoftNAVSalesShipmentHeader} salesShipmentHeader 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSalesShipmentHeader(salesShipmentHeader: MicrosoftNAVSalesShipmentHeader, options?: any): AxiosPromise<MicrosoftNAVSalesShipmentHeader> {
            return localVarFp.createSalesShipmentHeader(salesShipmentHeader, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary createSalesShipmentLinessalesShipmentLine
         * @param {MicrosoftNAVSalesShipmentLine} salesShipmentLine 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSalesShipmentLine(salesShipmentLine: MicrosoftNAVSalesShipmentLine, options?: any): AxiosPromise<MicrosoftNAVSalesShipmentLine> {
            return localVarFp.createSalesShipmentLine(salesShipmentLine, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary createSalescrMemoLinessalescrMemoLine
         * @param {MicrosoftNAVSalescrMemoLine} salescrMemoLine 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSalescrMemoLine(salescrMemoLine: MicrosoftNAVSalescrMemoLine, options?: any): AxiosPromise<MicrosoftNAVSalescrMemoLine> {
            return localVarFp.createSalescrMemoLine(salescrMemoLine, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary createShiptoAddressshiptoAddress
         * @param {MicrosoftNAVShiptoAddress} shiptoAddress 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createShiptoAddress(shiptoAddress: MicrosoftNAVShiptoAddress, options?: any): AxiosPromise<MicrosoftNAVShiptoAddress> {
            return localVarFp.createShiptoAddress(shiptoAddress, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary createSubscriptionssubscriptions
         * @param {MicrosoftNAVSubscriptions} subscriptions 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubscriptions(subscriptions: MicrosoftNAVSubscriptions, options?: any): AxiosPromise<MicrosoftNAVSubscriptions> {
            return localVarFp.createSubscriptions(subscriptions, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteCompaniescompany
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCompany(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteCompany(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteItemsitem
         * @param {string} no 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItem(no: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteItem(no, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteQueryAttributesqueryAttributes
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQueryAttributes(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteQueryAttributes(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteQueryAttributesValuesqueryAttributesValues
         * @param {number} attributeID 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQueryAttributesValues(attributeID: number, id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteQueryAttributesValues(attributeID, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteQueryCategoriesqueryCategories
         * @param {string} code 
         * @param {number} attributeID 
         * @param {number} valueid 
         * @param {number} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {number} auxiliaryIndex3 
         * @param {number} auxiliaryIndex4 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQueryCategories(code: string, attributeID: number, valueid: number, auxiliaryIndex1: number, auxiliaryIndex2: string, auxiliaryIndex3: number, auxiliaryIndex4: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteQueryCategories(code, attributeID, valueid, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteQueryCategoryAttributesqueryCategoryAttributes
         * @param {string} code 
         * @param {number} attributeID 
         * @param {number} valueid 
         * @param {number} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {number} auxiliaryIndex3 
         * @param {number} auxiliaryIndex4 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQueryCategoryAttributes(code: string, attributeID: number, valueid: number, auxiliaryIndex1: number, auxiliaryIndex2: string, auxiliaryIndex3: number, auxiliaryIndex4: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteQueryCategoryAttributes(code, attributeID, valueid, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteQueryCustomerqueryCustomer
         * @param {string} customerNo 
         * @param {string} shipToCode 
         * @param {string} auxiliaryIndex1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQueryCustomer(customerNo: string, shipToCode: string, auxiliaryIndex1: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteQueryCustomer(customerNo, shipToCode, auxiliaryIndex1, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteQueryItemAttributesqueryItemAttributes
         * @param {string} no 
         * @param {string} barCode 
         * @param {number} attributeID 
         * @param {number} valueid 
         * @param {string} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {string} auxiliaryIndex3 
         * @param {string} auxiliaryIndex4 
         * @param {string} auxiliaryIndex5 
         * @param {number} auxiliaryIndex6 
         * @param {string} auxiliaryIndex7 
         * @param {number} auxiliaryIndex8 
         * @param {number} auxiliaryIndex9 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQueryItemAttributes(no: string, barCode: string, attributeID: number, valueid: number, auxiliaryIndex1: string, auxiliaryIndex2: string, auxiliaryIndex3: string, auxiliaryIndex4: string, auxiliaryIndex5: string, auxiliaryIndex6: number, auxiliaryIndex7: string, auxiliaryIndex8: number, auxiliaryIndex9: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteQueryItemAttributes(no, barCode, attributeID, valueid, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, auxiliaryIndex5, auxiliaryIndex6, auxiliaryIndex7, auxiliaryIndex8, auxiliaryIndex9, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteQueryItemsqueryItems
         * @param {string} no 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQueryItems(no: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteQueryItems(no, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteQuerySalesCrMemoquerySalesCrMemo
         * @param {string} no 
         * @param {number} lineNo 
         * @param {string} barCode 
         * @param {string} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {string} auxiliaryIndex3 
         * @param {string} auxiliaryIndex4 
         * @param {string} auxiliaryIndex5 
         * @param {string} auxiliaryIndex6 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQuerySalesCrMemo(no: string, lineNo: number, barCode: string, auxiliaryIndex1: string, auxiliaryIndex2: string, auxiliaryIndex3: string, auxiliaryIndex4: string, auxiliaryIndex5: string, auxiliaryIndex6: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteQuerySalesCrMemo(no, lineNo, barCode, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, auxiliaryIndex5, auxiliaryIndex6, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteQuerySalesInvoicequerySalesInvoice
         * @param {string} no 
         * @param {number} lineNo 
         * @param {string} barCode 
         * @param {string} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {string} auxiliaryIndex3 
         * @param {string} auxiliaryIndex4 
         * @param {string} auxiliaryIndex5 
         * @param {string} auxiliaryIndex6 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQuerySalesInvoice(no: string, lineNo: number, barCode: string, auxiliaryIndex1: string, auxiliaryIndex2: string, auxiliaryIndex3: string, auxiliaryIndex4: string, auxiliaryIndex5: string, auxiliaryIndex6: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteQuerySalesInvoice(no, lineNo, barCode, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, auxiliaryIndex5, auxiliaryIndex6, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteQuerySalesOrderHeaderquerySalesOrderHeader
         * @param {string} documentType 
         * @param {string} no 
         * @param {number} lineNo 
         * @param {string} barCode 
         * @param {string} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {string} auxiliaryIndex3 
         * @param {string} auxiliaryIndex4 
         * @param {string} auxiliaryIndex5 
         * @param {string} auxiliaryIndex6 
         * @param {string} auxiliaryIndex7 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQuerySalesOrderHeader(documentType: string, no: string, lineNo: number, barCode: string, auxiliaryIndex1: string, auxiliaryIndex2: string, auxiliaryIndex3: string, auxiliaryIndex4: string, auxiliaryIndex5: string, auxiliaryIndex6: string, auxiliaryIndex7: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteQuerySalesOrderHeader(documentType, no, lineNo, barCode, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, auxiliaryIndex5, auxiliaryIndex6, auxiliaryIndex7, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteQuerySalesShipmentquerySalesShipment
         * @param {string} no 
         * @param {number} lineNo 
         * @param {string} barCode 
         * @param {string} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {string} auxiliaryIndex3 
         * @param {string} auxiliaryIndex4 
         * @param {string} auxiliaryIndex5 
         * @param {string} auxiliaryIndex6 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQuerySalesShipment(no: string, lineNo: number, barCode: string, auxiliaryIndex1: string, auxiliaryIndex2: string, auxiliaryIndex3: string, auxiliaryIndex4: string, auxiliaryIndex5: string, auxiliaryIndex6: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteQuerySalesShipment(no, lineNo, barCode, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, auxiliaryIndex5, auxiliaryIndex6, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteSalesCrMemosHeadersalesCrMemoHeader
         * @param {string} documentNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSalesCrMemoHeader(documentNo: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteSalesCrMemoHeader(documentNo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteSalesInvoicesHeadersalesInvoiceHeader
         * @param {string} documentNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSalesInvoiceHeader(documentNo: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteSalesInvoiceHeader(documentNo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteSalesInvoiceLinessalesInvoiceLine
         * @param {string} documentNo 
         * @param {number} lineNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSalesInvoiceLine(documentNo: string, lineNo: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteSalesInvoiceLine(documentNo, lineNo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteSalesOrderHeadersalesOrderHeader
         * @param {string} documentType 
         * @param {string} documentNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSalesOrderHeader(documentType: string, documentNo: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteSalesOrderHeader(documentType, documentNo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteSalesOrderLinessalesOrderLine
         * @param {string} documentType 
         * @param {string} documentNo 
         * @param {number} lineNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSalesOrderLine(documentType: string, documentNo: string, lineNo: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteSalesOrderLine(documentType, documentNo, lineNo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteSalesQuoteHeadersalesQuoteHeader
         * @param {string} documentType 
         * @param {string} documentNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSalesQuoteHeader(documentType: string, documentNo: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteSalesQuoteHeader(documentType, documentNo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteSalesQuoteLinessalesQuoteLine
         * @param {string} documentType 
         * @param {string} documentNo 
         * @param {number} lineNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSalesQuoteLine(documentType: string, documentNo: string, lineNo: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteSalesQuoteLine(documentType, documentNo, lineNo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteSalesShipmentsHeadersalesShipmentHeader
         * @param {string} documentNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSalesShipmentHeader(documentNo: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteSalesShipmentHeader(documentNo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteSalesShipmentLinessalesShipmentLine
         * @param {string} documentNo 
         * @param {number} lineNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSalesShipmentLine(documentNo: string, lineNo: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteSalesShipmentLine(documentNo, lineNo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteSalescrMemoLinessalescrMemoLine
         * @param {string} documentNo 
         * @param {number} lineNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSalescrMemoLine(documentNo: string, lineNo: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteSalescrMemoLine(documentNo, lineNo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteShiptoAddressshiptoAddress
         * @param {string} customerNo 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteShiptoAddress(customerNo: string, code: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteShiptoAddress(customerNo, code, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteSubscriptionssubscriptions
         * @param {string} subscriptionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSubscriptions(subscriptionId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteSubscriptions(subscriptionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getCompanies
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanies($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: any): AxiosPromise<InlineResponse20023> {
            return localVarFp.getCompanies($filter, $top, $skip, $orderby, $expand, $count, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getCompaniescompanyById
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyById(id: string, options?: any): AxiosPromise<MicrosoftNAVCompany> {
            return localVarFp.getCompanyById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getItemsitemById
         * @param {string} no 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemById(no: string, options?: any): AxiosPromise<MicrosoftNAVItem> {
            return localVarFp.getItemById(no, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getItems
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItems($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: any): AxiosPromise<InlineResponse2009> {
            return localVarFp.getItems($filter, $top, $skip, $orderby, $expand, $count, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getQueryAttributes
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryAttributes($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: any): AxiosPromise<InlineResponse20018> {
            return localVarFp.getQueryAttributes($filter, $top, $skip, $orderby, $expand, $count, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getQueryAttributesqueryAttributesById
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryAttributesById(id: number, options?: any): AxiosPromise<MicrosoftNAVQueryAttributes> {
            return localVarFp.getQueryAttributesById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getQueryAttributesValues
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryAttributesValues($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: any): AxiosPromise<InlineResponse20019> {
            return localVarFp.getQueryAttributesValues($filter, $top, $skip, $orderby, $expand, $count, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getQueryAttributesValuesqueryAttributesValuesById
         * @param {number} attributeID 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryAttributesValuesById(attributeID: number, id: number, options?: any): AxiosPromise<MicrosoftNAVQueryAttributesValues> {
            return localVarFp.getQueryAttributesValuesById(attributeID, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getQueryCategories
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryCategories($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: any): AxiosPromise<InlineResponse20025> {
            return localVarFp.getQueryCategories($filter, $top, $skip, $orderby, $expand, $count, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getQueryCategoriesqueryCategoriesById
         * @param {string} code 
         * @param {number} attributeID 
         * @param {number} valueid 
         * @param {number} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {number} auxiliaryIndex3 
         * @param {number} auxiliaryIndex4 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryCategoriesById(code: string, attributeID: number, valueid: number, auxiliaryIndex1: number, auxiliaryIndex2: string, auxiliaryIndex3: number, auxiliaryIndex4: number, options?: any): AxiosPromise<MicrosoftNAVQueryCategories> {
            return localVarFp.getQueryCategoriesById(code, attributeID, valueid, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getQueryCategoryAttributes
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryCategoryAttributes($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: any): AxiosPromise<InlineResponse20021> {
            return localVarFp.getQueryCategoryAttributes($filter, $top, $skip, $orderby, $expand, $count, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getQueryCategoryAttributesqueryCategoryAttributesById
         * @param {string} code 
         * @param {number} attributeID 
         * @param {number} valueid 
         * @param {number} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {number} auxiliaryIndex3 
         * @param {number} auxiliaryIndex4 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryCategoryAttributesById(code: string, attributeID: number, valueid: number, auxiliaryIndex1: number, auxiliaryIndex2: string, auxiliaryIndex3: number, auxiliaryIndex4: number, options?: any): AxiosPromise<MicrosoftNAVQueryCategoryAttributes> {
            return localVarFp.getQueryCategoryAttributesById(code, attributeID, valueid, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getQueryCustomer
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryCustomer($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: any): AxiosPromise<InlineResponse20017> {
            return localVarFp.getQueryCustomer($filter, $top, $skip, $orderby, $expand, $count, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getQueryCustomerqueryCustomerById
         * @param {string} customerNo 
         * @param {string} shipToCode 
         * @param {string} auxiliaryIndex1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryCustomerById(customerNo: string, shipToCode: string, auxiliaryIndex1: string, options?: any): AxiosPromise<MicrosoftNAVQueryCustomer> {
            return localVarFp.getQueryCustomerById(customerNo, shipToCode, auxiliaryIndex1, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getQueryItemAttributes
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryItemAttributes($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: any): AxiosPromise<InlineResponse20020> {
            return localVarFp.getQueryItemAttributes($filter, $top, $skip, $orderby, $expand, $count, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getQueryItemAttributesqueryItemAttributesById
         * @param {string} no 
         * @param {string} barCode 
         * @param {number} attributeID 
         * @param {number} valueid 
         * @param {string} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {string} auxiliaryIndex3 
         * @param {string} auxiliaryIndex4 
         * @param {string} auxiliaryIndex5 
         * @param {number} auxiliaryIndex6 
         * @param {string} auxiliaryIndex7 
         * @param {number} auxiliaryIndex8 
         * @param {number} auxiliaryIndex9 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryItemAttributesById(no: string, barCode: string, attributeID: number, valueid: number, auxiliaryIndex1: string, auxiliaryIndex2: string, auxiliaryIndex3: string, auxiliaryIndex4: string, auxiliaryIndex5: string, auxiliaryIndex6: number, auxiliaryIndex7: string, auxiliaryIndex8: number, auxiliaryIndex9: number, options?: any): AxiosPromise<MicrosoftNAVQueryItemAttributes> {
            return localVarFp.getQueryItemAttributesById(no, barCode, attributeID, valueid, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, auxiliaryIndex5, auxiliaryIndex6, auxiliaryIndex7, auxiliaryIndex8, auxiliaryIndex9, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getQueryItems
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryItems($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: any): AxiosPromise<InlineResponse20022> {
            return localVarFp.getQueryItems($filter, $top, $skip, $orderby, $expand, $count, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getQueryItemsqueryItemsById
         * @param {string} no 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryItemsById(no: string, options?: any): AxiosPromise<MicrosoftNAVQueryItems> {
            return localVarFp.getQueryItemsById(no, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getQuerySalesCrMemo
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuerySalesCrMemo($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: any): AxiosPromise<InlineResponse20015> {
            return localVarFp.getQuerySalesCrMemo($filter, $top, $skip, $orderby, $expand, $count, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getQuerySalesCrMemoquerySalesCrMemoById
         * @param {string} no 
         * @param {number} lineNo 
         * @param {string} barCode 
         * @param {string} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {string} auxiliaryIndex3 
         * @param {string} auxiliaryIndex4 
         * @param {string} auxiliaryIndex5 
         * @param {string} auxiliaryIndex6 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuerySalesCrMemoById(no: string, lineNo: number, barCode: string, auxiliaryIndex1: string, auxiliaryIndex2: string, auxiliaryIndex3: string, auxiliaryIndex4: string, auxiliaryIndex5: string, auxiliaryIndex6: string, options?: any): AxiosPromise<MicrosoftNAVQuerySalesCrMemo> {
            return localVarFp.getQuerySalesCrMemoById(no, lineNo, barCode, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, auxiliaryIndex5, auxiliaryIndex6, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getQuerySalesInvoice
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuerySalesInvoice($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: any): AxiosPromise<InlineResponse20014> {
            return localVarFp.getQuerySalesInvoice($filter, $top, $skip, $orderby, $expand, $count, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getQuerySalesInvoicequerySalesInvoiceById
         * @param {string} no 
         * @param {number} lineNo 
         * @param {string} barCode 
         * @param {string} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {string} auxiliaryIndex3 
         * @param {string} auxiliaryIndex4 
         * @param {string} auxiliaryIndex5 
         * @param {string} auxiliaryIndex6 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuerySalesInvoiceById(no: string, lineNo: number, barCode: string, auxiliaryIndex1: string, auxiliaryIndex2: string, auxiliaryIndex3: string, auxiliaryIndex4: string, auxiliaryIndex5: string, auxiliaryIndex6: string, options?: any): AxiosPromise<MicrosoftNAVQuerySalesInvoice> {
            return localVarFp.getQuerySalesInvoiceById(no, lineNo, barCode, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, auxiliaryIndex5, auxiliaryIndex6, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getQuerySalesOrderHeader
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuerySalesOrderHeader($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: any): AxiosPromise<InlineResponse20013> {
            return localVarFp.getQuerySalesOrderHeader($filter, $top, $skip, $orderby, $expand, $count, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getQuerySalesOrderHeaderquerySalesOrderHeaderById
         * @param {string} documentType 
         * @param {string} no 
         * @param {number} lineNo 
         * @param {string} barCode 
         * @param {string} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {string} auxiliaryIndex3 
         * @param {string} auxiliaryIndex4 
         * @param {string} auxiliaryIndex5 
         * @param {string} auxiliaryIndex6 
         * @param {string} auxiliaryIndex7 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuerySalesOrderHeaderById(documentType: string, no: string, lineNo: number, barCode: string, auxiliaryIndex1: string, auxiliaryIndex2: string, auxiliaryIndex3: string, auxiliaryIndex4: string, auxiliaryIndex5: string, auxiliaryIndex6: string, auxiliaryIndex7: string, options?: any): AxiosPromise<MicrosoftNAVQuerySalesOrderHeader> {
            return localVarFp.getQuerySalesOrderHeaderById(documentType, no, lineNo, barCode, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, auxiliaryIndex5, auxiliaryIndex6, auxiliaryIndex7, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getQuerySalesShipment
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuerySalesShipment($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: any): AxiosPromise<InlineResponse20016> {
            return localVarFp.getQuerySalesShipment($filter, $top, $skip, $orderby, $expand, $count, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getQuerySalesShipmentquerySalesShipmentById
         * @param {string} no 
         * @param {number} lineNo 
         * @param {string} barCode 
         * @param {string} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {string} auxiliaryIndex3 
         * @param {string} auxiliaryIndex4 
         * @param {string} auxiliaryIndex5 
         * @param {string} auxiliaryIndex6 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuerySalesShipmentById(no: string, lineNo: number, barCode: string, auxiliaryIndex1: string, auxiliaryIndex2: string, auxiliaryIndex3: string, auxiliaryIndex4: string, auxiliaryIndex5: string, auxiliaryIndex6: string, options?: any): AxiosPromise<MicrosoftNAVQuerySalesShipment> {
            return localVarFp.getQuerySalesShipmentById(no, lineNo, barCode, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, auxiliaryIndex5, auxiliaryIndex6, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getSalesCrMemosHeadersalesCrMemoHeaderById
         * @param {string} documentNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesCrMemoHeaderById(documentNo: string, options?: any): AxiosPromise<MicrosoftNAVSalesCrMemoHeader> {
            return localVarFp.getSalesCrMemoHeaderById(documentNo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getSalesCrMemosHeader
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesCrMemosHeader($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: any): AxiosPromise<InlineResponse2007> {
            return localVarFp.getSalesCrMemosHeader($filter, $top, $skip, $orderby, $expand, $count, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getSalesInvoicesHeadersalesInvoiceHeaderById
         * @param {string} documentNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesInvoiceHeaderById(documentNo: string, options?: any): AxiosPromise<MicrosoftNAVSalesInvoiceHeader> {
            return localVarFp.getSalesInvoiceHeaderById(documentNo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getSalesInvoiceLinessalesInvoiceLineById
         * @param {string} documentNo 
         * @param {number} lineNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesInvoiceLineById(documentNo: string, lineNo: number, options?: any): AxiosPromise<MicrosoftNAVSalesInvoiceLine> {
            return localVarFp.getSalesInvoiceLineById(documentNo, lineNo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getSalesInvoiceLines
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesInvoiceLines($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: any): AxiosPromise<InlineResponse2004> {
            return localVarFp.getSalesInvoiceLines($filter, $top, $skip, $orderby, $expand, $count, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getSalesInvoicesHeader
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesInvoicesHeader($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: any): AxiosPromise<InlineResponse2003> {
            return localVarFp.getSalesInvoicesHeader($filter, $top, $skip, $orderby, $expand, $count, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getSalesOrderHeader
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesOrderHeader($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.getSalesOrderHeader($filter, $top, $skip, $orderby, $expand, $count, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getSalesOrderHeadersalesOrderHeaderById
         * @param {string} documentType 
         * @param {string} documentNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesOrderHeaderById(documentType: string, documentNo: string, options?: any): AxiosPromise<MicrosoftNAVSalesOrderHeader> {
            return localVarFp.getSalesOrderHeaderById(documentType, documentNo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getSalesOrderLinessalesOrderLineById
         * @param {string} documentType 
         * @param {string} documentNo 
         * @param {number} lineNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesOrderLineById(documentType: string, documentNo: string, lineNo: number, options?: any): AxiosPromise<MicrosoftNAVSalesOrderLine> {
            return localVarFp.getSalesOrderLineById(documentType, documentNo, lineNo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getSalesOrderLines
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesOrderLines($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: any): AxiosPromise<InlineResponse2002> {
            return localVarFp.getSalesOrderLines($filter, $top, $skip, $orderby, $expand, $count, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getSalesQuoteHeader
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesQuoteHeader($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: any): AxiosPromise<InlineResponse20011> {
            return localVarFp.getSalesQuoteHeader($filter, $top, $skip, $orderby, $expand, $count, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getSalesQuoteHeadersalesQuoteHeaderById
         * @param {string} documentType 
         * @param {string} documentNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesQuoteHeaderById(documentType: string, documentNo: string, options?: any): AxiosPromise<MicrosoftNAVSalesQuoteHeader> {
            return localVarFp.getSalesQuoteHeaderById(documentType, documentNo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getSalesQuoteLinessalesQuoteLineById
         * @param {string} documentType 
         * @param {string} documentNo 
         * @param {number} lineNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesQuoteLineById(documentType: string, documentNo: string, lineNo: number, options?: any): AxiosPromise<MicrosoftNAVSalesQuoteLine> {
            return localVarFp.getSalesQuoteLineById(documentType, documentNo, lineNo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getSalesQuoteLines
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesQuoteLines($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: any): AxiosPromise<InlineResponse20012> {
            return localVarFp.getSalesQuoteLines($filter, $top, $skip, $orderby, $expand, $count, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getSalesShipmentsHeadersalesShipmentHeaderById
         * @param {string} documentNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesShipmentHeaderById(documentNo: string, options?: any): AxiosPromise<MicrosoftNAVSalesShipmentHeader> {
            return localVarFp.getSalesShipmentHeaderById(documentNo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getSalesShipmentLinessalesShipmentLineById
         * @param {string} documentNo 
         * @param {number} lineNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesShipmentLineById(documentNo: string, lineNo: number, options?: any): AxiosPromise<MicrosoftNAVSalesShipmentLine> {
            return localVarFp.getSalesShipmentLineById(documentNo, lineNo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getSalesShipmentLines
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesShipmentLines($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: any): AxiosPromise<InlineResponse2006> {
            return localVarFp.getSalesShipmentLines($filter, $top, $skip, $orderby, $expand, $count, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getSalesShipmentsHeader
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesShipmentsHeader($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: any): AxiosPromise<InlineResponse2005> {
            return localVarFp.getSalesShipmentsHeader($filter, $top, $skip, $orderby, $expand, $count, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getSalescrMemoLinessalescrMemoLineById
         * @param {string} documentNo 
         * @param {number} lineNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalescrMemoLineById(documentNo: string, lineNo: number, options?: any): AxiosPromise<MicrosoftNAVSalescrMemoLine> {
            return localVarFp.getSalescrMemoLineById(documentNo, lineNo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getSalescrMemoLines
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalescrMemoLines($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: any): AxiosPromise<InlineResponse2008> {
            return localVarFp.getSalescrMemoLines($filter, $top, $skip, $orderby, $expand, $count, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getShiptoAddress
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShiptoAddress($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: any): AxiosPromise<InlineResponse20010> {
            return localVarFp.getShiptoAddress($filter, $top, $skip, $orderby, $expand, $count, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getShiptoAddressshiptoAddressById
         * @param {string} customerNo 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShiptoAddressById(customerNo: string, code: string, options?: any): AxiosPromise<MicrosoftNAVShiptoAddress> {
            return localVarFp.getShiptoAddressById(customerNo, code, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getSubscriptions
         * @param {string} [$filter] 
         * @param {number} [$top] 
         * @param {number} [$skip] 
         * @param {string} [$orderby] 
         * @param {string} [$expand] 
         * @param {boolean} [$count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscriptions($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: any): AxiosPromise<InlineResponse20024> {
            return localVarFp.getSubscriptions($filter, $top, $skip, $orderby, $expand, $count, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getSubscriptionssubscriptionsById
         * @param {string} subscriptionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscriptionsById(subscriptionId: string, options?: any): AxiosPromise<MicrosoftNAVSubscriptions> {
            return localVarFp.getSubscriptionsById(subscriptionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary InsertItem
         * @param {MicrosoftNAVInsertItem} item 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertItem(item: MicrosoftNAVInsertItem, options?: any): AxiosPromise<MicrosoftNAVInsertItem> {
            return localVarFp.insertItem(item, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary NewEANCode
         * @param {MicrosoftNAVNewEANCode} item 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newEANCode(item: MicrosoftNAVNewEANCode, options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.newEANCode(item, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateCompaniescompany
         * @param {string} id 
         * @param {MicrosoftNAVCompany} company 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCompany(id: string, company: MicrosoftNAVCompany, options?: any): AxiosPromise<MicrosoftNAVCompany> {
            return localVarFp.updateCompany(id, company, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateItemsitem
         * @param {string} no 
         * @param {MicrosoftNAVItem} item 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItem(no: string, item: MicrosoftNAVItem, options?: any): AxiosPromise<MicrosoftNAVItem> {
            return localVarFp.updateItem(no, item, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateQueryAttributesqueryAttributes
         * @param {number} id 
         * @param {MicrosoftNAVQueryAttributes} queryAttributes 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQueryAttributes(id: number, queryAttributes: MicrosoftNAVQueryAttributes, options?: any): AxiosPromise<MicrosoftNAVQueryAttributes> {
            return localVarFp.updateQueryAttributes(id, queryAttributes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateQueryAttributesValuesqueryAttributesValues
         * @param {number} attributeID 
         * @param {number} id 
         * @param {MicrosoftNAVQueryAttributesValues} queryAttributesValues 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQueryAttributesValues(attributeID: number, id: number, queryAttributesValues: MicrosoftNAVQueryAttributesValues, options?: any): AxiosPromise<MicrosoftNAVQueryAttributesValues> {
            return localVarFp.updateQueryAttributesValues(attributeID, id, queryAttributesValues, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateQueryCategoriesqueryCategories
         * @param {string} code 
         * @param {number} attributeID 
         * @param {number} valueid 
         * @param {number} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {number} auxiliaryIndex3 
         * @param {number} auxiliaryIndex4 
         * @param {MicrosoftNAVQueryCategories} queryCategories 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQueryCategories(code: string, attributeID: number, valueid: number, auxiliaryIndex1: number, auxiliaryIndex2: string, auxiliaryIndex3: number, auxiliaryIndex4: number, queryCategories: MicrosoftNAVQueryCategories, options?: any): AxiosPromise<MicrosoftNAVQueryCategories> {
            return localVarFp.updateQueryCategories(code, attributeID, valueid, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, queryCategories, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateQueryCategoryAttributesqueryCategoryAttributes
         * @param {string} code 
         * @param {number} attributeID 
         * @param {number} valueid 
         * @param {number} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {number} auxiliaryIndex3 
         * @param {number} auxiliaryIndex4 
         * @param {MicrosoftNAVQueryCategoryAttributes} queryCategoryAttributes 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQueryCategoryAttributes(code: string, attributeID: number, valueid: number, auxiliaryIndex1: number, auxiliaryIndex2: string, auxiliaryIndex3: number, auxiliaryIndex4: number, queryCategoryAttributes: MicrosoftNAVQueryCategoryAttributes, options?: any): AxiosPromise<MicrosoftNAVQueryCategoryAttributes> {
            return localVarFp.updateQueryCategoryAttributes(code, attributeID, valueid, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, queryCategoryAttributes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateQueryCustomerqueryCustomer
         * @param {string} customerNo 
         * @param {string} shipToCode 
         * @param {string} auxiliaryIndex1 
         * @param {MicrosoftNAVQueryCustomer} queryCustomer 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQueryCustomer(customerNo: string, shipToCode: string, auxiliaryIndex1: string, queryCustomer: MicrosoftNAVQueryCustomer, options?: any): AxiosPromise<MicrosoftNAVQueryCustomer> {
            return localVarFp.updateQueryCustomer(customerNo, shipToCode, auxiliaryIndex1, queryCustomer, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateQueryItemAttributesqueryItemAttributes
         * @param {string} no 
         * @param {string} barCode 
         * @param {number} attributeID 
         * @param {number} valueid 
         * @param {string} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {string} auxiliaryIndex3 
         * @param {string} auxiliaryIndex4 
         * @param {string} auxiliaryIndex5 
         * @param {number} auxiliaryIndex6 
         * @param {string} auxiliaryIndex7 
         * @param {number} auxiliaryIndex8 
         * @param {number} auxiliaryIndex9 
         * @param {MicrosoftNAVQueryItemAttributes} queryItemAttributes 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQueryItemAttributes(no: string, barCode: string, attributeID: number, valueid: number, auxiliaryIndex1: string, auxiliaryIndex2: string, auxiliaryIndex3: string, auxiliaryIndex4: string, auxiliaryIndex5: string, auxiliaryIndex6: number, auxiliaryIndex7: string, auxiliaryIndex8: number, auxiliaryIndex9: number, queryItemAttributes: MicrosoftNAVQueryItemAttributes, options?: any): AxiosPromise<MicrosoftNAVQueryItemAttributes> {
            return localVarFp.updateQueryItemAttributes(no, barCode, attributeID, valueid, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, auxiliaryIndex5, auxiliaryIndex6, auxiliaryIndex7, auxiliaryIndex8, auxiliaryIndex9, queryItemAttributes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateQueryItemsqueryItems
         * @param {string} no 
         * @param {MicrosoftNAVQueryItems} queryItems 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQueryItems(no: string, queryItems: MicrosoftNAVQueryItems, options?: any): AxiosPromise<MicrosoftNAVQueryItems> {
            return localVarFp.updateQueryItems(no, queryItems, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateQuerySalesCrMemoquerySalesCrMemo
         * @param {string} no 
         * @param {number} lineNo 
         * @param {string} barCode 
         * @param {string} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {string} auxiliaryIndex3 
         * @param {string} auxiliaryIndex4 
         * @param {string} auxiliaryIndex5 
         * @param {string} auxiliaryIndex6 
         * @param {MicrosoftNAVQuerySalesCrMemo} querySalesCrMemo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQuerySalesCrMemo(no: string, lineNo: number, barCode: string, auxiliaryIndex1: string, auxiliaryIndex2: string, auxiliaryIndex3: string, auxiliaryIndex4: string, auxiliaryIndex5: string, auxiliaryIndex6: string, querySalesCrMemo: MicrosoftNAVQuerySalesCrMemo, options?: any): AxiosPromise<MicrosoftNAVQuerySalesCrMemo> {
            return localVarFp.updateQuerySalesCrMemo(no, lineNo, barCode, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, auxiliaryIndex5, auxiliaryIndex6, querySalesCrMemo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateQuerySalesInvoicequerySalesInvoice
         * @param {string} no 
         * @param {number} lineNo 
         * @param {string} barCode 
         * @param {string} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {string} auxiliaryIndex3 
         * @param {string} auxiliaryIndex4 
         * @param {string} auxiliaryIndex5 
         * @param {string} auxiliaryIndex6 
         * @param {MicrosoftNAVQuerySalesInvoice} querySalesInvoice 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQuerySalesInvoice(no: string, lineNo: number, barCode: string, auxiliaryIndex1: string, auxiliaryIndex2: string, auxiliaryIndex3: string, auxiliaryIndex4: string, auxiliaryIndex5: string, auxiliaryIndex6: string, querySalesInvoice: MicrosoftNAVQuerySalesInvoice, options?: any): AxiosPromise<MicrosoftNAVQuerySalesInvoice> {
            return localVarFp.updateQuerySalesInvoice(no, lineNo, barCode, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, auxiliaryIndex5, auxiliaryIndex6, querySalesInvoice, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateQuerySalesOrderHeaderquerySalesOrderHeader
         * @param {string} documentType 
         * @param {string} no 
         * @param {number} lineNo 
         * @param {string} barCode 
         * @param {string} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {string} auxiliaryIndex3 
         * @param {string} auxiliaryIndex4 
         * @param {string} auxiliaryIndex5 
         * @param {string} auxiliaryIndex6 
         * @param {string} auxiliaryIndex7 
         * @param {MicrosoftNAVQuerySalesOrderHeader} querySalesOrderHeader 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQuerySalesOrderHeader(documentType: string, no: string, lineNo: number, barCode: string, auxiliaryIndex1: string, auxiliaryIndex2: string, auxiliaryIndex3: string, auxiliaryIndex4: string, auxiliaryIndex5: string, auxiliaryIndex6: string, auxiliaryIndex7: string, querySalesOrderHeader: MicrosoftNAVQuerySalesOrderHeader, options?: any): AxiosPromise<MicrosoftNAVQuerySalesOrderHeader> {
            return localVarFp.updateQuerySalesOrderHeader(documentType, no, lineNo, barCode, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, auxiliaryIndex5, auxiliaryIndex6, auxiliaryIndex7, querySalesOrderHeader, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateQuerySalesShipmentquerySalesShipment
         * @param {string} no 
         * @param {number} lineNo 
         * @param {string} barCode 
         * @param {string} auxiliaryIndex1 
         * @param {string} auxiliaryIndex2 
         * @param {string} auxiliaryIndex3 
         * @param {string} auxiliaryIndex4 
         * @param {string} auxiliaryIndex5 
         * @param {string} auxiliaryIndex6 
         * @param {MicrosoftNAVQuerySalesShipment} querySalesShipment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQuerySalesShipment(no: string, lineNo: number, barCode: string, auxiliaryIndex1: string, auxiliaryIndex2: string, auxiliaryIndex3: string, auxiliaryIndex4: string, auxiliaryIndex5: string, auxiliaryIndex6: string, querySalesShipment: MicrosoftNAVQuerySalesShipment, options?: any): AxiosPromise<MicrosoftNAVQuerySalesShipment> {
            return localVarFp.updateQuerySalesShipment(no, lineNo, barCode, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, auxiliaryIndex5, auxiliaryIndex6, querySalesShipment, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateSalesCrMemosHeadersalesCrMemoHeader
         * @param {string} documentNo 
         * @param {MicrosoftNAVSalesCrMemoHeader} salesCrMemoHeader 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSalesCrMemoHeader(documentNo: string, salesCrMemoHeader: MicrosoftNAVSalesCrMemoHeader, options?: any): AxiosPromise<MicrosoftNAVSalesCrMemoHeader> {
            return localVarFp.updateSalesCrMemoHeader(documentNo, salesCrMemoHeader, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateSalesInvoicesHeadersalesInvoiceHeader
         * @param {string} documentNo 
         * @param {MicrosoftNAVSalesInvoiceHeader} salesInvoiceHeader 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSalesInvoiceHeader(documentNo: string, salesInvoiceHeader: MicrosoftNAVSalesInvoiceHeader, options?: any): AxiosPromise<MicrosoftNAVSalesInvoiceHeader> {
            return localVarFp.updateSalesInvoiceHeader(documentNo, salesInvoiceHeader, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateSalesInvoiceLinessalesInvoiceLine
         * @param {string} documentNo 
         * @param {number} lineNo 
         * @param {MicrosoftNAVSalesInvoiceLine} salesInvoiceLine 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSalesInvoiceLine(documentNo: string, lineNo: number, salesInvoiceLine: MicrosoftNAVSalesInvoiceLine, options?: any): AxiosPromise<MicrosoftNAVSalesInvoiceLine> {
            return localVarFp.updateSalesInvoiceLine(documentNo, lineNo, salesInvoiceLine, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateSalesOrderHeadersalesOrderHeader
         * @param {string} documentType 
         * @param {string} documentNo 
         * @param {MicrosoftNAVSalesOrderHeader} salesOrderHeader 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSalesOrderHeader(documentType: string, documentNo: string, salesOrderHeader: MicrosoftNAVSalesOrderHeader, options?: any): AxiosPromise<MicrosoftNAVSalesOrderHeader> {
            return localVarFp.updateSalesOrderHeader(documentType, documentNo, salesOrderHeader, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateSalesOrderLinessalesOrderLine
         * @param {string} documentType 
         * @param {string} documentNo 
         * @param {number} lineNo 
         * @param {MicrosoftNAVSalesOrderLine} salesOrderLine 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSalesOrderLine(documentType: string, documentNo: string, lineNo: number, salesOrderLine: MicrosoftNAVSalesOrderLine, options?: any): AxiosPromise<MicrosoftNAVSalesOrderLine> {
            return localVarFp.updateSalesOrderLine(documentType, documentNo, lineNo, salesOrderLine, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateSalesQuoteHeadersalesQuoteHeader
         * @param {string} documentType 
         * @param {string} documentNo 
         * @param {MicrosoftNAVSalesQuoteHeader} salesQuoteHeader 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSalesQuoteHeader(documentType: string, documentNo: string, salesQuoteHeader: MicrosoftNAVSalesQuoteHeader, options?: any): AxiosPromise<MicrosoftNAVSalesQuoteHeader> {
            return localVarFp.updateSalesQuoteHeader(documentType, documentNo, salesQuoteHeader, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateSalesQuoteLinessalesQuoteLine
         * @param {string} documentType 
         * @param {string} documentNo 
         * @param {number} lineNo 
         * @param {MicrosoftNAVSalesQuoteLine} salesQuoteLine 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSalesQuoteLine(documentType: string, documentNo: string, lineNo: number, salesQuoteLine: MicrosoftNAVSalesQuoteLine, options?: any): AxiosPromise<MicrosoftNAVSalesQuoteLine> {
            return localVarFp.updateSalesQuoteLine(documentType, documentNo, lineNo, salesQuoteLine, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateSalesShipmentsHeadersalesShipmentHeader
         * @param {string} documentNo 
         * @param {MicrosoftNAVSalesShipmentHeader} salesShipmentHeader 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSalesShipmentHeader(documentNo: string, salesShipmentHeader: MicrosoftNAVSalesShipmentHeader, options?: any): AxiosPromise<MicrosoftNAVSalesShipmentHeader> {
            return localVarFp.updateSalesShipmentHeader(documentNo, salesShipmentHeader, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateSalesShipmentLinessalesShipmentLine
         * @param {string} documentNo 
         * @param {number} lineNo 
         * @param {MicrosoftNAVSalesShipmentLine} salesShipmentLine 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSalesShipmentLine(documentNo: string, lineNo: number, salesShipmentLine: MicrosoftNAVSalesShipmentLine, options?: any): AxiosPromise<MicrosoftNAVSalesShipmentLine> {
            return localVarFp.updateSalesShipmentLine(documentNo, lineNo, salesShipmentLine, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateSalescrMemoLinessalescrMemoLine
         * @param {string} documentNo 
         * @param {number} lineNo 
         * @param {MicrosoftNAVSalescrMemoLine} salescrMemoLine 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSalescrMemoLine(documentNo: string, lineNo: number, salescrMemoLine: MicrosoftNAVSalescrMemoLine, options?: any): AxiosPromise<MicrosoftNAVSalescrMemoLine> {
            return localVarFp.updateSalescrMemoLine(documentNo, lineNo, salescrMemoLine, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateShiptoAddressshiptoAddress
         * @param {string} customerNo 
         * @param {string} code 
         * @param {MicrosoftNAVShiptoAddress} shiptoAddress 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateShiptoAddress(customerNo: string, code: string, shiptoAddress: MicrosoftNAVShiptoAddress, options?: any): AxiosPromise<MicrosoftNAVShiptoAddress> {
            return localVarFp.updateShiptoAddress(customerNo, code, shiptoAddress, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateSubscriptionssubscriptions
         * @param {string} subscriptionId 
         * @param {MicrosoftNAVSubscriptions} subscriptions 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubscriptions(subscriptionId: string, subscriptions: MicrosoftNAVSubscriptions, options?: any): AxiosPromise<MicrosoftNAVSubscriptions> {
            return localVarFp.updateSubscriptions(subscriptionId, subscriptions, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary createCompaniescompany
     * @param {MicrosoftNAVCompany} company 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createCompany(company: MicrosoftNAVCompany, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createCompany(company, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary createItemsitem
     * @param {MicrosoftNAVItem} item 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createItem(item: MicrosoftNAVItem, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createItem(item, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary createQueryAttributesqueryAttributes
     * @param {MicrosoftNAVQueryAttributes} queryAttributes 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createQueryAttributes(queryAttributes: MicrosoftNAVQueryAttributes, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createQueryAttributes(queryAttributes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary createQueryAttributesValuesqueryAttributesValues
     * @param {MicrosoftNAVQueryAttributesValues} queryAttributesValues 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createQueryAttributesValues(queryAttributesValues: MicrosoftNAVQueryAttributesValues, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createQueryAttributesValues(queryAttributesValues, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary createQueryCategoriesqueryCategories
     * @param {MicrosoftNAVQueryCategories} queryCategories 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createQueryCategories(queryCategories: MicrosoftNAVQueryCategories, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createQueryCategories(queryCategories, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary createQueryCategoryAttributesqueryCategoryAttributes
     * @param {MicrosoftNAVQueryCategoryAttributes} queryCategoryAttributes 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createQueryCategoryAttributes(queryCategoryAttributes: MicrosoftNAVQueryCategoryAttributes, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createQueryCategoryAttributes(queryCategoryAttributes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary createQueryCustomerqueryCustomer
     * @param {MicrosoftNAVQueryCustomer} queryCustomer 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createQueryCustomer(queryCustomer: MicrosoftNAVQueryCustomer, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createQueryCustomer(queryCustomer, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary createQueryItemAttributesqueryItemAttributes
     * @param {MicrosoftNAVQueryItemAttributes} queryItemAttributes 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createQueryItemAttributes(queryItemAttributes: MicrosoftNAVQueryItemAttributes, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createQueryItemAttributes(queryItemAttributes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary createQueryItemsqueryItems
     * @param {MicrosoftNAVQueryItems} queryItems 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createQueryItems(queryItems: MicrosoftNAVQueryItems, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createQueryItems(queryItems, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary createQuerySalesCrMemoquerySalesCrMemo
     * @param {MicrosoftNAVQuerySalesCrMemo} querySalesCrMemo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createQuerySalesCrMemo(querySalesCrMemo: MicrosoftNAVQuerySalesCrMemo, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createQuerySalesCrMemo(querySalesCrMemo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary createQuerySalesInvoicequerySalesInvoice
     * @param {MicrosoftNAVQuerySalesInvoice} querySalesInvoice 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createQuerySalesInvoice(querySalesInvoice: MicrosoftNAVQuerySalesInvoice, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createQuerySalesInvoice(querySalesInvoice, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary createQuerySalesOrderHeaderquerySalesOrderHeader
     * @param {MicrosoftNAVQuerySalesOrderHeader} querySalesOrderHeader 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createQuerySalesOrderHeader(querySalesOrderHeader: MicrosoftNAVQuerySalesOrderHeader, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createQuerySalesOrderHeader(querySalesOrderHeader, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary createQuerySalesShipmentquerySalesShipment
     * @param {MicrosoftNAVQuerySalesShipment} querySalesShipment 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createQuerySalesShipment(querySalesShipment: MicrosoftNAVQuerySalesShipment, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createQuerySalesShipment(querySalesShipment, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary createSalesCrMemosHeadersalesCrMemoHeader
     * @param {MicrosoftNAVSalesCrMemoHeader} salesCrMemoHeader 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createSalesCrMemoHeader(salesCrMemoHeader: MicrosoftNAVSalesCrMemoHeader, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createSalesCrMemoHeader(salesCrMemoHeader, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary createSalesInvoicesHeadersalesInvoiceHeader
     * @param {MicrosoftNAVSalesInvoiceHeader} salesInvoiceHeader 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createSalesInvoiceHeader(salesInvoiceHeader: MicrosoftNAVSalesInvoiceHeader, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createSalesInvoiceHeader(salesInvoiceHeader, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary createSalesInvoiceLinessalesInvoiceLine
     * @param {MicrosoftNAVSalesInvoiceLine} salesInvoiceLine 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createSalesInvoiceLine(salesInvoiceLine: MicrosoftNAVSalesInvoiceLine, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createSalesInvoiceLine(salesInvoiceLine, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary createSalesOrderHeadersalesOrderHeader
     * @param {MicrosoftNAVSalesOrderHeader} salesOrderHeader 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createSalesOrderHeader(salesOrderHeader: MicrosoftNAVSalesOrderHeader, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createSalesOrderHeader(salesOrderHeader, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary createSalesOrderLinessalesOrderLine
     * @param {MicrosoftNAVSalesOrderLine} salesOrderLine 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createSalesOrderLine(salesOrderLine: MicrosoftNAVSalesOrderLine, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createSalesOrderLine(salesOrderLine, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary createSalesQuoteHeadersalesQuoteHeader
     * @param {MicrosoftNAVSalesQuoteHeader} salesQuoteHeader 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createSalesQuoteHeader(salesQuoteHeader: MicrosoftNAVSalesQuoteHeader, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createSalesQuoteHeader(salesQuoteHeader, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary createSalesQuoteLinessalesQuoteLine
     * @param {MicrosoftNAVSalesQuoteLine} salesQuoteLine 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createSalesQuoteLine(salesQuoteLine: MicrosoftNAVSalesQuoteLine, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createSalesQuoteLine(salesQuoteLine, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary createSalesShipmentsHeadersalesShipmentHeader
     * @param {MicrosoftNAVSalesShipmentHeader} salesShipmentHeader 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createSalesShipmentHeader(salesShipmentHeader: MicrosoftNAVSalesShipmentHeader, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createSalesShipmentHeader(salesShipmentHeader, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary createSalesShipmentLinessalesShipmentLine
     * @param {MicrosoftNAVSalesShipmentLine} salesShipmentLine 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createSalesShipmentLine(salesShipmentLine: MicrosoftNAVSalesShipmentLine, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createSalesShipmentLine(salesShipmentLine, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary createSalescrMemoLinessalescrMemoLine
     * @param {MicrosoftNAVSalescrMemoLine} salescrMemoLine 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createSalescrMemoLine(salescrMemoLine: MicrosoftNAVSalescrMemoLine, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createSalescrMemoLine(salescrMemoLine, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary createShiptoAddressshiptoAddress
     * @param {MicrosoftNAVShiptoAddress} shiptoAddress 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createShiptoAddress(shiptoAddress: MicrosoftNAVShiptoAddress, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createShiptoAddress(shiptoAddress, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary createSubscriptionssubscriptions
     * @param {MicrosoftNAVSubscriptions} subscriptions 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createSubscriptions(subscriptions: MicrosoftNAVSubscriptions, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createSubscriptions(subscriptions, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteCompaniescompany
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteCompany(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteCompany(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteItemsitem
     * @param {string} no 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteItem(no: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteItem(no, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteQueryAttributesqueryAttributes
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteQueryAttributes(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteQueryAttributes(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteQueryAttributesValuesqueryAttributesValues
     * @param {number} attributeID 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteQueryAttributesValues(attributeID: number, id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteQueryAttributesValues(attributeID, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteQueryCategoriesqueryCategories
     * @param {string} code 
     * @param {number} attributeID 
     * @param {number} valueid 
     * @param {number} auxiliaryIndex1 
     * @param {string} auxiliaryIndex2 
     * @param {number} auxiliaryIndex3 
     * @param {number} auxiliaryIndex4 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteQueryCategories(code: string, attributeID: number, valueid: number, auxiliaryIndex1: number, auxiliaryIndex2: string, auxiliaryIndex3: number, auxiliaryIndex4: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteQueryCategories(code, attributeID, valueid, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteQueryCategoryAttributesqueryCategoryAttributes
     * @param {string} code 
     * @param {number} attributeID 
     * @param {number} valueid 
     * @param {number} auxiliaryIndex1 
     * @param {string} auxiliaryIndex2 
     * @param {number} auxiliaryIndex3 
     * @param {number} auxiliaryIndex4 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteQueryCategoryAttributes(code: string, attributeID: number, valueid: number, auxiliaryIndex1: number, auxiliaryIndex2: string, auxiliaryIndex3: number, auxiliaryIndex4: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteQueryCategoryAttributes(code, attributeID, valueid, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteQueryCustomerqueryCustomer
     * @param {string} customerNo 
     * @param {string} shipToCode 
     * @param {string} auxiliaryIndex1 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteQueryCustomer(customerNo: string, shipToCode: string, auxiliaryIndex1: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteQueryCustomer(customerNo, shipToCode, auxiliaryIndex1, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteQueryItemAttributesqueryItemAttributes
     * @param {string} no 
     * @param {string} barCode 
     * @param {number} attributeID 
     * @param {number} valueid 
     * @param {string} auxiliaryIndex1 
     * @param {string} auxiliaryIndex2 
     * @param {string} auxiliaryIndex3 
     * @param {string} auxiliaryIndex4 
     * @param {string} auxiliaryIndex5 
     * @param {number} auxiliaryIndex6 
     * @param {string} auxiliaryIndex7 
     * @param {number} auxiliaryIndex8 
     * @param {number} auxiliaryIndex9 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteQueryItemAttributes(no: string, barCode: string, attributeID: number, valueid: number, auxiliaryIndex1: string, auxiliaryIndex2: string, auxiliaryIndex3: string, auxiliaryIndex4: string, auxiliaryIndex5: string, auxiliaryIndex6: number, auxiliaryIndex7: string, auxiliaryIndex8: number, auxiliaryIndex9: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteQueryItemAttributes(no, barCode, attributeID, valueid, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, auxiliaryIndex5, auxiliaryIndex6, auxiliaryIndex7, auxiliaryIndex8, auxiliaryIndex9, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteQueryItemsqueryItems
     * @param {string} no 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteQueryItems(no: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteQueryItems(no, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteQuerySalesCrMemoquerySalesCrMemo
     * @param {string} no 
     * @param {number} lineNo 
     * @param {string} barCode 
     * @param {string} auxiliaryIndex1 
     * @param {string} auxiliaryIndex2 
     * @param {string} auxiliaryIndex3 
     * @param {string} auxiliaryIndex4 
     * @param {string} auxiliaryIndex5 
     * @param {string} auxiliaryIndex6 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteQuerySalesCrMemo(no: string, lineNo: number, barCode: string, auxiliaryIndex1: string, auxiliaryIndex2: string, auxiliaryIndex3: string, auxiliaryIndex4: string, auxiliaryIndex5: string, auxiliaryIndex6: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteQuerySalesCrMemo(no, lineNo, barCode, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, auxiliaryIndex5, auxiliaryIndex6, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteQuerySalesInvoicequerySalesInvoice
     * @param {string} no 
     * @param {number} lineNo 
     * @param {string} barCode 
     * @param {string} auxiliaryIndex1 
     * @param {string} auxiliaryIndex2 
     * @param {string} auxiliaryIndex3 
     * @param {string} auxiliaryIndex4 
     * @param {string} auxiliaryIndex5 
     * @param {string} auxiliaryIndex6 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteQuerySalesInvoice(no: string, lineNo: number, barCode: string, auxiliaryIndex1: string, auxiliaryIndex2: string, auxiliaryIndex3: string, auxiliaryIndex4: string, auxiliaryIndex5: string, auxiliaryIndex6: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteQuerySalesInvoice(no, lineNo, barCode, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, auxiliaryIndex5, auxiliaryIndex6, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteQuerySalesOrderHeaderquerySalesOrderHeader
     * @param {string} documentType 
     * @param {string} no 
     * @param {number} lineNo 
     * @param {string} barCode 
     * @param {string} auxiliaryIndex1 
     * @param {string} auxiliaryIndex2 
     * @param {string} auxiliaryIndex3 
     * @param {string} auxiliaryIndex4 
     * @param {string} auxiliaryIndex5 
     * @param {string} auxiliaryIndex6 
     * @param {string} auxiliaryIndex7 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteQuerySalesOrderHeader(documentType: string, no: string, lineNo: number, barCode: string, auxiliaryIndex1: string, auxiliaryIndex2: string, auxiliaryIndex3: string, auxiliaryIndex4: string, auxiliaryIndex5: string, auxiliaryIndex6: string, auxiliaryIndex7: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteQuerySalesOrderHeader(documentType, no, lineNo, barCode, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, auxiliaryIndex5, auxiliaryIndex6, auxiliaryIndex7, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteQuerySalesShipmentquerySalesShipment
     * @param {string} no 
     * @param {number} lineNo 
     * @param {string} barCode 
     * @param {string} auxiliaryIndex1 
     * @param {string} auxiliaryIndex2 
     * @param {string} auxiliaryIndex3 
     * @param {string} auxiliaryIndex4 
     * @param {string} auxiliaryIndex5 
     * @param {string} auxiliaryIndex6 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteQuerySalesShipment(no: string, lineNo: number, barCode: string, auxiliaryIndex1: string, auxiliaryIndex2: string, auxiliaryIndex3: string, auxiliaryIndex4: string, auxiliaryIndex5: string, auxiliaryIndex6: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteQuerySalesShipment(no, lineNo, barCode, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, auxiliaryIndex5, auxiliaryIndex6, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteSalesCrMemosHeadersalesCrMemoHeader
     * @param {string} documentNo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteSalesCrMemoHeader(documentNo: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteSalesCrMemoHeader(documentNo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteSalesInvoicesHeadersalesInvoiceHeader
     * @param {string} documentNo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteSalesInvoiceHeader(documentNo: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteSalesInvoiceHeader(documentNo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteSalesInvoiceLinessalesInvoiceLine
     * @param {string} documentNo 
     * @param {number} lineNo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteSalesInvoiceLine(documentNo: string, lineNo: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteSalesInvoiceLine(documentNo, lineNo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteSalesOrderHeadersalesOrderHeader
     * @param {string} documentType 
     * @param {string} documentNo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteSalesOrderHeader(documentType: string, documentNo: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteSalesOrderHeader(documentType, documentNo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteSalesOrderLinessalesOrderLine
     * @param {string} documentType 
     * @param {string} documentNo 
     * @param {number} lineNo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteSalesOrderLine(documentType: string, documentNo: string, lineNo: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteSalesOrderLine(documentType, documentNo, lineNo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteSalesQuoteHeadersalesQuoteHeader
     * @param {string} documentType 
     * @param {string} documentNo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteSalesQuoteHeader(documentType: string, documentNo: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteSalesQuoteHeader(documentType, documentNo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteSalesQuoteLinessalesQuoteLine
     * @param {string} documentType 
     * @param {string} documentNo 
     * @param {number} lineNo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteSalesQuoteLine(documentType: string, documentNo: string, lineNo: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteSalesQuoteLine(documentType, documentNo, lineNo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteSalesShipmentsHeadersalesShipmentHeader
     * @param {string} documentNo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteSalesShipmentHeader(documentNo: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteSalesShipmentHeader(documentNo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteSalesShipmentLinessalesShipmentLine
     * @param {string} documentNo 
     * @param {number} lineNo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteSalesShipmentLine(documentNo: string, lineNo: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteSalesShipmentLine(documentNo, lineNo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteSalescrMemoLinessalescrMemoLine
     * @param {string} documentNo 
     * @param {number} lineNo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteSalescrMemoLine(documentNo: string, lineNo: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteSalescrMemoLine(documentNo, lineNo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteShiptoAddressshiptoAddress
     * @param {string} customerNo 
     * @param {string} code 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteShiptoAddress(customerNo: string, code: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteShiptoAddress(customerNo, code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteSubscriptionssubscriptions
     * @param {string} subscriptionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteSubscriptions(subscriptionId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteSubscriptions(subscriptionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getCompanies
     * @param {string} [$filter] 
     * @param {number} [$top] 
     * @param {number} [$skip] 
     * @param {string} [$orderby] 
     * @param {string} [$expand] 
     * @param {boolean} [$count] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCompanies($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCompanies($filter, $top, $skip, $orderby, $expand, $count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getCompaniescompanyById
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCompanyById(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCompanyById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getItemsitemById
     * @param {string} no 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getItemById(no: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getItemById(no, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getItems
     * @param {string} [$filter] 
     * @param {number} [$top] 
     * @param {number} [$skip] 
     * @param {string} [$orderby] 
     * @param {string} [$expand] 
     * @param {boolean} [$count] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getItems($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getItems($filter, $top, $skip, $orderby, $expand, $count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getQueryAttributes
     * @param {string} [$filter] 
     * @param {number} [$top] 
     * @param {number} [$skip] 
     * @param {string} [$orderby] 
     * @param {string} [$expand] 
     * @param {boolean} [$count] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getQueryAttributes($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getQueryAttributes($filter, $top, $skip, $orderby, $expand, $count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getQueryAttributesqueryAttributesById
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getQueryAttributesById(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getQueryAttributesById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getQueryAttributesValues
     * @param {string} [$filter] 
     * @param {number} [$top] 
     * @param {number} [$skip] 
     * @param {string} [$orderby] 
     * @param {string} [$expand] 
     * @param {boolean} [$count] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getQueryAttributesValues($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getQueryAttributesValues($filter, $top, $skip, $orderby, $expand, $count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getQueryAttributesValuesqueryAttributesValuesById
     * @param {number} attributeID 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getQueryAttributesValuesById(attributeID: number, id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getQueryAttributesValuesById(attributeID, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getQueryCategories
     * @param {string} [$filter] 
     * @param {number} [$top] 
     * @param {number} [$skip] 
     * @param {string} [$orderby] 
     * @param {string} [$expand] 
     * @param {boolean} [$count] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getQueryCategories($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getQueryCategories($filter, $top, $skip, $orderby, $expand, $count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getQueryCategoriesqueryCategoriesById
     * @param {string} code 
     * @param {number} attributeID 
     * @param {number} valueid 
     * @param {number} auxiliaryIndex1 
     * @param {string} auxiliaryIndex2 
     * @param {number} auxiliaryIndex3 
     * @param {number} auxiliaryIndex4 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getQueryCategoriesById(code: string, attributeID: number, valueid: number, auxiliaryIndex1: number, auxiliaryIndex2: string, auxiliaryIndex3: number, auxiliaryIndex4: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getQueryCategoriesById(code, attributeID, valueid, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getQueryCategoryAttributes
     * @param {string} [$filter] 
     * @param {number} [$top] 
     * @param {number} [$skip] 
     * @param {string} [$orderby] 
     * @param {string} [$expand] 
     * @param {boolean} [$count] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getQueryCategoryAttributes($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getQueryCategoryAttributes($filter, $top, $skip, $orderby, $expand, $count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getQueryCategoryAttributesqueryCategoryAttributesById
     * @param {string} code 
     * @param {number} attributeID 
     * @param {number} valueid 
     * @param {number} auxiliaryIndex1 
     * @param {string} auxiliaryIndex2 
     * @param {number} auxiliaryIndex3 
     * @param {number} auxiliaryIndex4 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getQueryCategoryAttributesById(code: string, attributeID: number, valueid: number, auxiliaryIndex1: number, auxiliaryIndex2: string, auxiliaryIndex3: number, auxiliaryIndex4: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getQueryCategoryAttributesById(code, attributeID, valueid, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getQueryCustomer
     * @param {string} [$filter] 
     * @param {number} [$top] 
     * @param {number} [$skip] 
     * @param {string} [$orderby] 
     * @param {string} [$expand] 
     * @param {boolean} [$count] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getQueryCustomer($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getQueryCustomer($filter, $top, $skip, $orderby, $expand, $count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getQueryCustomerqueryCustomerById
     * @param {string} customerNo 
     * @param {string} shipToCode 
     * @param {string} auxiliaryIndex1 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getQueryCustomerById(customerNo: string, shipToCode: string, auxiliaryIndex1: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getQueryCustomerById(customerNo, shipToCode, auxiliaryIndex1, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getQueryItemAttributes
     * @param {string} [$filter] 
     * @param {number} [$top] 
     * @param {number} [$skip] 
     * @param {string} [$orderby] 
     * @param {string} [$expand] 
     * @param {boolean} [$count] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getQueryItemAttributes($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getQueryItemAttributes($filter, $top, $skip, $orderby, $expand, $count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getQueryItemAttributesqueryItemAttributesById
     * @param {string} no 
     * @param {string} barCode 
     * @param {number} attributeID 
     * @param {number} valueid 
     * @param {string} auxiliaryIndex1 
     * @param {string} auxiliaryIndex2 
     * @param {string} auxiliaryIndex3 
     * @param {string} auxiliaryIndex4 
     * @param {string} auxiliaryIndex5 
     * @param {number} auxiliaryIndex6 
     * @param {string} auxiliaryIndex7 
     * @param {number} auxiliaryIndex8 
     * @param {number} auxiliaryIndex9 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getQueryItemAttributesById(no: string, barCode: string, attributeID: number, valueid: number, auxiliaryIndex1: string, auxiliaryIndex2: string, auxiliaryIndex3: string, auxiliaryIndex4: string, auxiliaryIndex5: string, auxiliaryIndex6: number, auxiliaryIndex7: string, auxiliaryIndex8: number, auxiliaryIndex9: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getQueryItemAttributesById(no, barCode, attributeID, valueid, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, auxiliaryIndex5, auxiliaryIndex6, auxiliaryIndex7, auxiliaryIndex8, auxiliaryIndex9, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getQueryItems
     * @param {string} [$filter] 
     * @param {number} [$top] 
     * @param {number} [$skip] 
     * @param {string} [$orderby] 
     * @param {string} [$expand] 
     * @param {boolean} [$count] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getQueryItems($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getQueryItems($filter, $top, $skip, $orderby, $expand, $count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getQueryItemsqueryItemsById
     * @param {string} no 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getQueryItemsById(no: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getQueryItemsById(no, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getQuerySalesCrMemo
     * @param {string} [$filter] 
     * @param {number} [$top] 
     * @param {number} [$skip] 
     * @param {string} [$orderby] 
     * @param {string} [$expand] 
     * @param {boolean} [$count] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getQuerySalesCrMemo($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getQuerySalesCrMemo($filter, $top, $skip, $orderby, $expand, $count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getQuerySalesCrMemoquerySalesCrMemoById
     * @param {string} no 
     * @param {number} lineNo 
     * @param {string} barCode 
     * @param {string} auxiliaryIndex1 
     * @param {string} auxiliaryIndex2 
     * @param {string} auxiliaryIndex3 
     * @param {string} auxiliaryIndex4 
     * @param {string} auxiliaryIndex5 
     * @param {string} auxiliaryIndex6 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getQuerySalesCrMemoById(no: string, lineNo: number, barCode: string, auxiliaryIndex1: string, auxiliaryIndex2: string, auxiliaryIndex3: string, auxiliaryIndex4: string, auxiliaryIndex5: string, auxiliaryIndex6: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getQuerySalesCrMemoById(no, lineNo, barCode, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, auxiliaryIndex5, auxiliaryIndex6, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getQuerySalesInvoice
     * @param {string} [$filter] 
     * @param {number} [$top] 
     * @param {number} [$skip] 
     * @param {string} [$orderby] 
     * @param {string} [$expand] 
     * @param {boolean} [$count] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getQuerySalesInvoice($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getQuerySalesInvoice($filter, $top, $skip, $orderby, $expand, $count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getQuerySalesInvoicequerySalesInvoiceById
     * @param {string} no 
     * @param {number} lineNo 
     * @param {string} barCode 
     * @param {string} auxiliaryIndex1 
     * @param {string} auxiliaryIndex2 
     * @param {string} auxiliaryIndex3 
     * @param {string} auxiliaryIndex4 
     * @param {string} auxiliaryIndex5 
     * @param {string} auxiliaryIndex6 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getQuerySalesInvoiceById(no: string, lineNo: number, barCode: string, auxiliaryIndex1: string, auxiliaryIndex2: string, auxiliaryIndex3: string, auxiliaryIndex4: string, auxiliaryIndex5: string, auxiliaryIndex6: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getQuerySalesInvoiceById(no, lineNo, barCode, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, auxiliaryIndex5, auxiliaryIndex6, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getQuerySalesOrderHeader
     * @param {string} [$filter] 
     * @param {number} [$top] 
     * @param {number} [$skip] 
     * @param {string} [$orderby] 
     * @param {string} [$expand] 
     * @param {boolean} [$count] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getQuerySalesOrderHeader($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getQuerySalesOrderHeader($filter, $top, $skip, $orderby, $expand, $count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getQuerySalesOrderHeaderquerySalesOrderHeaderById
     * @param {string} documentType 
     * @param {string} no 
     * @param {number} lineNo 
     * @param {string} barCode 
     * @param {string} auxiliaryIndex1 
     * @param {string} auxiliaryIndex2 
     * @param {string} auxiliaryIndex3 
     * @param {string} auxiliaryIndex4 
     * @param {string} auxiliaryIndex5 
     * @param {string} auxiliaryIndex6 
     * @param {string} auxiliaryIndex7 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getQuerySalesOrderHeaderById(documentType: string, no: string, lineNo: number, barCode: string, auxiliaryIndex1: string, auxiliaryIndex2: string, auxiliaryIndex3: string, auxiliaryIndex4: string, auxiliaryIndex5: string, auxiliaryIndex6: string, auxiliaryIndex7: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getQuerySalesOrderHeaderById(documentType, no, lineNo, barCode, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, auxiliaryIndex5, auxiliaryIndex6, auxiliaryIndex7, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getQuerySalesShipment
     * @param {string} [$filter] 
     * @param {number} [$top] 
     * @param {number} [$skip] 
     * @param {string} [$orderby] 
     * @param {string} [$expand] 
     * @param {boolean} [$count] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getQuerySalesShipment($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getQuerySalesShipment($filter, $top, $skip, $orderby, $expand, $count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getQuerySalesShipmentquerySalesShipmentById
     * @param {string} no 
     * @param {number} lineNo 
     * @param {string} barCode 
     * @param {string} auxiliaryIndex1 
     * @param {string} auxiliaryIndex2 
     * @param {string} auxiliaryIndex3 
     * @param {string} auxiliaryIndex4 
     * @param {string} auxiliaryIndex5 
     * @param {string} auxiliaryIndex6 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getQuerySalesShipmentById(no: string, lineNo: number, barCode: string, auxiliaryIndex1: string, auxiliaryIndex2: string, auxiliaryIndex3: string, auxiliaryIndex4: string, auxiliaryIndex5: string, auxiliaryIndex6: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getQuerySalesShipmentById(no, lineNo, barCode, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, auxiliaryIndex5, auxiliaryIndex6, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getSalesCrMemosHeadersalesCrMemoHeaderById
     * @param {string} documentNo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSalesCrMemoHeaderById(documentNo: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSalesCrMemoHeaderById(documentNo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getSalesCrMemosHeader
     * @param {string} [$filter] 
     * @param {number} [$top] 
     * @param {number} [$skip] 
     * @param {string} [$orderby] 
     * @param {string} [$expand] 
     * @param {boolean} [$count] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSalesCrMemosHeader($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSalesCrMemosHeader($filter, $top, $skip, $orderby, $expand, $count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getSalesInvoicesHeadersalesInvoiceHeaderById
     * @param {string} documentNo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSalesInvoiceHeaderById(documentNo: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSalesInvoiceHeaderById(documentNo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getSalesInvoiceLinessalesInvoiceLineById
     * @param {string} documentNo 
     * @param {number} lineNo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSalesInvoiceLineById(documentNo: string, lineNo: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSalesInvoiceLineById(documentNo, lineNo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getSalesInvoiceLines
     * @param {string} [$filter] 
     * @param {number} [$top] 
     * @param {number} [$skip] 
     * @param {string} [$orderby] 
     * @param {string} [$expand] 
     * @param {boolean} [$count] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSalesInvoiceLines($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSalesInvoiceLines($filter, $top, $skip, $orderby, $expand, $count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getSalesInvoicesHeader
     * @param {string} [$filter] 
     * @param {number} [$top] 
     * @param {number} [$skip] 
     * @param {string} [$orderby] 
     * @param {string} [$expand] 
     * @param {boolean} [$count] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSalesInvoicesHeader($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSalesInvoicesHeader($filter, $top, $skip, $orderby, $expand, $count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getSalesOrderHeader
     * @param {string} [$filter] 
     * @param {number} [$top] 
     * @param {number} [$skip] 
     * @param {string} [$orderby] 
     * @param {string} [$expand] 
     * @param {boolean} [$count] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSalesOrderHeader($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSalesOrderHeader($filter, $top, $skip, $orderby, $expand, $count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getSalesOrderHeadersalesOrderHeaderById
     * @param {string} documentType 
     * @param {string} documentNo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSalesOrderHeaderById(documentType: string, documentNo: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSalesOrderHeaderById(documentType, documentNo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getSalesOrderLinessalesOrderLineById
     * @param {string} documentType 
     * @param {string} documentNo 
     * @param {number} lineNo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSalesOrderLineById(documentType: string, documentNo: string, lineNo: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSalesOrderLineById(documentType, documentNo, lineNo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getSalesOrderLines
     * @param {string} [$filter] 
     * @param {number} [$top] 
     * @param {number} [$skip] 
     * @param {string} [$orderby] 
     * @param {string} [$expand] 
     * @param {boolean} [$count] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSalesOrderLines($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSalesOrderLines($filter, $top, $skip, $orderby, $expand, $count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getSalesQuoteHeader
     * @param {string} [$filter] 
     * @param {number} [$top] 
     * @param {number} [$skip] 
     * @param {string} [$orderby] 
     * @param {string} [$expand] 
     * @param {boolean} [$count] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSalesQuoteHeader($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSalesQuoteHeader($filter, $top, $skip, $orderby, $expand, $count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getSalesQuoteHeadersalesQuoteHeaderById
     * @param {string} documentType 
     * @param {string} documentNo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSalesQuoteHeaderById(documentType: string, documentNo: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSalesQuoteHeaderById(documentType, documentNo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getSalesQuoteLinessalesQuoteLineById
     * @param {string} documentType 
     * @param {string} documentNo 
     * @param {number} lineNo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSalesQuoteLineById(documentType: string, documentNo: string, lineNo: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSalesQuoteLineById(documentType, documentNo, lineNo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getSalesQuoteLines
     * @param {string} [$filter] 
     * @param {number} [$top] 
     * @param {number} [$skip] 
     * @param {string} [$orderby] 
     * @param {string} [$expand] 
     * @param {boolean} [$count] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSalesQuoteLines($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSalesQuoteLines($filter, $top, $skip, $orderby, $expand, $count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getSalesShipmentsHeadersalesShipmentHeaderById
     * @param {string} documentNo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSalesShipmentHeaderById(documentNo: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSalesShipmentHeaderById(documentNo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getSalesShipmentLinessalesShipmentLineById
     * @param {string} documentNo 
     * @param {number} lineNo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSalesShipmentLineById(documentNo: string, lineNo: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSalesShipmentLineById(documentNo, lineNo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getSalesShipmentLines
     * @param {string} [$filter] 
     * @param {number} [$top] 
     * @param {number} [$skip] 
     * @param {string} [$orderby] 
     * @param {string} [$expand] 
     * @param {boolean} [$count] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSalesShipmentLines($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSalesShipmentLines($filter, $top, $skip, $orderby, $expand, $count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getSalesShipmentsHeader
     * @param {string} [$filter] 
     * @param {number} [$top] 
     * @param {number} [$skip] 
     * @param {string} [$orderby] 
     * @param {string} [$expand] 
     * @param {boolean} [$count] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSalesShipmentsHeader($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSalesShipmentsHeader($filter, $top, $skip, $orderby, $expand, $count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getSalescrMemoLinessalescrMemoLineById
     * @param {string} documentNo 
     * @param {number} lineNo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSalescrMemoLineById(documentNo: string, lineNo: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSalescrMemoLineById(documentNo, lineNo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getSalescrMemoLines
     * @param {string} [$filter] 
     * @param {number} [$top] 
     * @param {number} [$skip] 
     * @param {string} [$orderby] 
     * @param {string} [$expand] 
     * @param {boolean} [$count] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSalescrMemoLines($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSalescrMemoLines($filter, $top, $skip, $orderby, $expand, $count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getShiptoAddress
     * @param {string} [$filter] 
     * @param {number} [$top] 
     * @param {number} [$skip] 
     * @param {string} [$orderby] 
     * @param {string} [$expand] 
     * @param {boolean} [$count] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getShiptoAddress($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getShiptoAddress($filter, $top, $skip, $orderby, $expand, $count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getShiptoAddressshiptoAddressById
     * @param {string} customerNo 
     * @param {string} code 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getShiptoAddressById(customerNo: string, code: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getShiptoAddressById(customerNo, code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getSubscriptions
     * @param {string} [$filter] 
     * @param {number} [$top] 
     * @param {number} [$skip] 
     * @param {string} [$orderby] 
     * @param {string} [$expand] 
     * @param {boolean} [$count] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSubscriptions($filter?: string, $top?: number, $skip?: number, $orderby?: string, $expand?: string, $count?: boolean, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSubscriptions($filter, $top, $skip, $orderby, $expand, $count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getSubscriptionssubscriptionsById
     * @param {string} subscriptionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSubscriptionsById(subscriptionId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSubscriptionsById(subscriptionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary InsertItem
     * @param {MicrosoftNAVInsertItem} item 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public insertItem(item: MicrosoftNAVInsertItem, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).insertItem(item, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary NewEANCode
     * @param {MicrosoftNAVNewEANCode} item 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public newEANCode(item: MicrosoftNAVNewEANCode, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).newEANCode(item, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateCompaniescompany
     * @param {string} id 
     * @param {MicrosoftNAVCompany} company 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateCompany(id: string, company: MicrosoftNAVCompany, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateCompany(id, company, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateItemsitem
     * @param {string} no 
     * @param {MicrosoftNAVItem} item 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateItem(no: string, item: MicrosoftNAVItem, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateItem(no, item, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateQueryAttributesqueryAttributes
     * @param {number} id 
     * @param {MicrosoftNAVQueryAttributes} queryAttributes 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateQueryAttributes(id: number, queryAttributes: MicrosoftNAVQueryAttributes, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateQueryAttributes(id, queryAttributes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateQueryAttributesValuesqueryAttributesValues
     * @param {number} attributeID 
     * @param {number} id 
     * @param {MicrosoftNAVQueryAttributesValues} queryAttributesValues 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateQueryAttributesValues(attributeID: number, id: number, queryAttributesValues: MicrosoftNAVQueryAttributesValues, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateQueryAttributesValues(attributeID, id, queryAttributesValues, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateQueryCategoriesqueryCategories
     * @param {string} code 
     * @param {number} attributeID 
     * @param {number} valueid 
     * @param {number} auxiliaryIndex1 
     * @param {string} auxiliaryIndex2 
     * @param {number} auxiliaryIndex3 
     * @param {number} auxiliaryIndex4 
     * @param {MicrosoftNAVQueryCategories} queryCategories 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateQueryCategories(code: string, attributeID: number, valueid: number, auxiliaryIndex1: number, auxiliaryIndex2: string, auxiliaryIndex3: number, auxiliaryIndex4: number, queryCategories: MicrosoftNAVQueryCategories, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateQueryCategories(code, attributeID, valueid, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, queryCategories, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateQueryCategoryAttributesqueryCategoryAttributes
     * @param {string} code 
     * @param {number} attributeID 
     * @param {number} valueid 
     * @param {number} auxiliaryIndex1 
     * @param {string} auxiliaryIndex2 
     * @param {number} auxiliaryIndex3 
     * @param {number} auxiliaryIndex4 
     * @param {MicrosoftNAVQueryCategoryAttributes} queryCategoryAttributes 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateQueryCategoryAttributes(code: string, attributeID: number, valueid: number, auxiliaryIndex1: number, auxiliaryIndex2: string, auxiliaryIndex3: number, auxiliaryIndex4: number, queryCategoryAttributes: MicrosoftNAVQueryCategoryAttributes, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateQueryCategoryAttributes(code, attributeID, valueid, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, queryCategoryAttributes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateQueryCustomerqueryCustomer
     * @param {string} customerNo 
     * @param {string} shipToCode 
     * @param {string} auxiliaryIndex1 
     * @param {MicrosoftNAVQueryCustomer} queryCustomer 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateQueryCustomer(customerNo: string, shipToCode: string, auxiliaryIndex1: string, queryCustomer: MicrosoftNAVQueryCustomer, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateQueryCustomer(customerNo, shipToCode, auxiliaryIndex1, queryCustomer, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateQueryItemAttributesqueryItemAttributes
     * @param {string} no 
     * @param {string} barCode 
     * @param {number} attributeID 
     * @param {number} valueid 
     * @param {string} auxiliaryIndex1 
     * @param {string} auxiliaryIndex2 
     * @param {string} auxiliaryIndex3 
     * @param {string} auxiliaryIndex4 
     * @param {string} auxiliaryIndex5 
     * @param {number} auxiliaryIndex6 
     * @param {string} auxiliaryIndex7 
     * @param {number} auxiliaryIndex8 
     * @param {number} auxiliaryIndex9 
     * @param {MicrosoftNAVQueryItemAttributes} queryItemAttributes 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateQueryItemAttributes(no: string, barCode: string, attributeID: number, valueid: number, auxiliaryIndex1: string, auxiliaryIndex2: string, auxiliaryIndex3: string, auxiliaryIndex4: string, auxiliaryIndex5: string, auxiliaryIndex6: number, auxiliaryIndex7: string, auxiliaryIndex8: number, auxiliaryIndex9: number, queryItemAttributes: MicrosoftNAVQueryItemAttributes, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateQueryItemAttributes(no, barCode, attributeID, valueid, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, auxiliaryIndex5, auxiliaryIndex6, auxiliaryIndex7, auxiliaryIndex8, auxiliaryIndex9, queryItemAttributes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateQueryItemsqueryItems
     * @param {string} no 
     * @param {MicrosoftNAVQueryItems} queryItems 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateQueryItems(no: string, queryItems: MicrosoftNAVQueryItems, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateQueryItems(no, queryItems, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateQuerySalesCrMemoquerySalesCrMemo
     * @param {string} no 
     * @param {number} lineNo 
     * @param {string} barCode 
     * @param {string} auxiliaryIndex1 
     * @param {string} auxiliaryIndex2 
     * @param {string} auxiliaryIndex3 
     * @param {string} auxiliaryIndex4 
     * @param {string} auxiliaryIndex5 
     * @param {string} auxiliaryIndex6 
     * @param {MicrosoftNAVQuerySalesCrMemo} querySalesCrMemo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateQuerySalesCrMemo(no: string, lineNo: number, barCode: string, auxiliaryIndex1: string, auxiliaryIndex2: string, auxiliaryIndex3: string, auxiliaryIndex4: string, auxiliaryIndex5: string, auxiliaryIndex6: string, querySalesCrMemo: MicrosoftNAVQuerySalesCrMemo, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateQuerySalesCrMemo(no, lineNo, barCode, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, auxiliaryIndex5, auxiliaryIndex6, querySalesCrMemo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateQuerySalesInvoicequerySalesInvoice
     * @param {string} no 
     * @param {number} lineNo 
     * @param {string} barCode 
     * @param {string} auxiliaryIndex1 
     * @param {string} auxiliaryIndex2 
     * @param {string} auxiliaryIndex3 
     * @param {string} auxiliaryIndex4 
     * @param {string} auxiliaryIndex5 
     * @param {string} auxiliaryIndex6 
     * @param {MicrosoftNAVQuerySalesInvoice} querySalesInvoice 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateQuerySalesInvoice(no: string, lineNo: number, barCode: string, auxiliaryIndex1: string, auxiliaryIndex2: string, auxiliaryIndex3: string, auxiliaryIndex4: string, auxiliaryIndex5: string, auxiliaryIndex6: string, querySalesInvoice: MicrosoftNAVQuerySalesInvoice, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateQuerySalesInvoice(no, lineNo, barCode, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, auxiliaryIndex5, auxiliaryIndex6, querySalesInvoice, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateQuerySalesOrderHeaderquerySalesOrderHeader
     * @param {string} documentType 
     * @param {string} no 
     * @param {number} lineNo 
     * @param {string} barCode 
     * @param {string} auxiliaryIndex1 
     * @param {string} auxiliaryIndex2 
     * @param {string} auxiliaryIndex3 
     * @param {string} auxiliaryIndex4 
     * @param {string} auxiliaryIndex5 
     * @param {string} auxiliaryIndex6 
     * @param {string} auxiliaryIndex7 
     * @param {MicrosoftNAVQuerySalesOrderHeader} querySalesOrderHeader 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateQuerySalesOrderHeader(documentType: string, no: string, lineNo: number, barCode: string, auxiliaryIndex1: string, auxiliaryIndex2: string, auxiliaryIndex3: string, auxiliaryIndex4: string, auxiliaryIndex5: string, auxiliaryIndex6: string, auxiliaryIndex7: string, querySalesOrderHeader: MicrosoftNAVQuerySalesOrderHeader, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateQuerySalesOrderHeader(documentType, no, lineNo, barCode, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, auxiliaryIndex5, auxiliaryIndex6, auxiliaryIndex7, querySalesOrderHeader, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateQuerySalesShipmentquerySalesShipment
     * @param {string} no 
     * @param {number} lineNo 
     * @param {string} barCode 
     * @param {string} auxiliaryIndex1 
     * @param {string} auxiliaryIndex2 
     * @param {string} auxiliaryIndex3 
     * @param {string} auxiliaryIndex4 
     * @param {string} auxiliaryIndex5 
     * @param {string} auxiliaryIndex6 
     * @param {MicrosoftNAVQuerySalesShipment} querySalesShipment 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateQuerySalesShipment(no: string, lineNo: number, barCode: string, auxiliaryIndex1: string, auxiliaryIndex2: string, auxiliaryIndex3: string, auxiliaryIndex4: string, auxiliaryIndex5: string, auxiliaryIndex6: string, querySalesShipment: MicrosoftNAVQuerySalesShipment, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateQuerySalesShipment(no, lineNo, barCode, auxiliaryIndex1, auxiliaryIndex2, auxiliaryIndex3, auxiliaryIndex4, auxiliaryIndex5, auxiliaryIndex6, querySalesShipment, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateSalesCrMemosHeadersalesCrMemoHeader
     * @param {string} documentNo 
     * @param {MicrosoftNAVSalesCrMemoHeader} salesCrMemoHeader 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateSalesCrMemoHeader(documentNo: string, salesCrMemoHeader: MicrosoftNAVSalesCrMemoHeader, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateSalesCrMemoHeader(documentNo, salesCrMemoHeader, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateSalesInvoicesHeadersalesInvoiceHeader
     * @param {string} documentNo 
     * @param {MicrosoftNAVSalesInvoiceHeader} salesInvoiceHeader 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateSalesInvoiceHeader(documentNo: string, salesInvoiceHeader: MicrosoftNAVSalesInvoiceHeader, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateSalesInvoiceHeader(documentNo, salesInvoiceHeader, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateSalesInvoiceLinessalesInvoiceLine
     * @param {string} documentNo 
     * @param {number} lineNo 
     * @param {MicrosoftNAVSalesInvoiceLine} salesInvoiceLine 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateSalesInvoiceLine(documentNo: string, lineNo: number, salesInvoiceLine: MicrosoftNAVSalesInvoiceLine, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateSalesInvoiceLine(documentNo, lineNo, salesInvoiceLine, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateSalesOrderHeadersalesOrderHeader
     * @param {string} documentType 
     * @param {string} documentNo 
     * @param {MicrosoftNAVSalesOrderHeader} salesOrderHeader 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateSalesOrderHeader(documentType: string, documentNo: string, salesOrderHeader: MicrosoftNAVSalesOrderHeader, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateSalesOrderHeader(documentType, documentNo, salesOrderHeader, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateSalesOrderLinessalesOrderLine
     * @param {string} documentType 
     * @param {string} documentNo 
     * @param {number} lineNo 
     * @param {MicrosoftNAVSalesOrderLine} salesOrderLine 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateSalesOrderLine(documentType: string, documentNo: string, lineNo: number, salesOrderLine: MicrosoftNAVSalesOrderLine, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateSalesOrderLine(documentType, documentNo, lineNo, salesOrderLine, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateSalesQuoteHeadersalesQuoteHeader
     * @param {string} documentType 
     * @param {string} documentNo 
     * @param {MicrosoftNAVSalesQuoteHeader} salesQuoteHeader 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateSalesQuoteHeader(documentType: string, documentNo: string, salesQuoteHeader: MicrosoftNAVSalesQuoteHeader, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateSalesQuoteHeader(documentType, documentNo, salesQuoteHeader, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateSalesQuoteLinessalesQuoteLine
     * @param {string} documentType 
     * @param {string} documentNo 
     * @param {number} lineNo 
     * @param {MicrosoftNAVSalesQuoteLine} salesQuoteLine 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateSalesQuoteLine(documentType: string, documentNo: string, lineNo: number, salesQuoteLine: MicrosoftNAVSalesQuoteLine, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateSalesQuoteLine(documentType, documentNo, lineNo, salesQuoteLine, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateSalesShipmentsHeadersalesShipmentHeader
     * @param {string} documentNo 
     * @param {MicrosoftNAVSalesShipmentHeader} salesShipmentHeader 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateSalesShipmentHeader(documentNo: string, salesShipmentHeader: MicrosoftNAVSalesShipmentHeader, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateSalesShipmentHeader(documentNo, salesShipmentHeader, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateSalesShipmentLinessalesShipmentLine
     * @param {string} documentNo 
     * @param {number} lineNo 
     * @param {MicrosoftNAVSalesShipmentLine} salesShipmentLine 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateSalesShipmentLine(documentNo: string, lineNo: number, salesShipmentLine: MicrosoftNAVSalesShipmentLine, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateSalesShipmentLine(documentNo, lineNo, salesShipmentLine, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateSalescrMemoLinessalescrMemoLine
     * @param {string} documentNo 
     * @param {number} lineNo 
     * @param {MicrosoftNAVSalescrMemoLine} salescrMemoLine 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateSalescrMemoLine(documentNo: string, lineNo: number, salescrMemoLine: MicrosoftNAVSalescrMemoLine, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateSalescrMemoLine(documentNo, lineNo, salescrMemoLine, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateShiptoAddressshiptoAddress
     * @param {string} customerNo 
     * @param {string} code 
     * @param {MicrosoftNAVShiptoAddress} shiptoAddress 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateShiptoAddress(customerNo: string, code: string, shiptoAddress: MicrosoftNAVShiptoAddress, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateShiptoAddress(customerNo, code, shiptoAddress, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateSubscriptionssubscriptions
     * @param {string} subscriptionId 
     * @param {MicrosoftNAVSubscriptions} subscriptions 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateSubscriptions(subscriptionId: string, subscriptions: MicrosoftNAVSubscriptions, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateSubscriptions(subscriptionId, subscriptions, options).then((request) => request(this.axios, this.basePath));
    }
}


